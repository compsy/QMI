{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/previews/DrawingPreview.js\";\nimport * as React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst styles = {\n  canvas: {\n    border: '1px solid #333',\n    margin: '20px 0px'\n  },\n  maindiv: {\n    padding: '10px',\n    margin: 'auto',\n    width: '800px'\n  },\n  button: {\n    border: '0px',\n    margin: '1px',\n    height: '50px',\n    minWidth: '75px'\n  },\n  colorSwatches: {\n    red: {\n      'backgroundColor': 'red'\n    },\n    orange: {\n      'backgroundColor': 'orange'\n    },\n    yellow: {\n      'backgroundColor': 'yellow'\n    },\n    green: {\n      'backgroundColor': 'green'\n    },\n    blue: {\n      'backgroundColor': 'blue'\n    }\n  }\n}; //simple draw component made in react\n\nclass DrawingPreview extends React.Component {\n  componentDidMount() {\n    this.reset();\n  }\n\n  draw(e) {\n    //response to Draw button click \n    this.setState({\n      mode: 'draw'\n    });\n  }\n\n  erase() {\n    //response to Erase button click\n    this.setState({\n      mode: 'erase'\n    });\n  }\n\n  drawing(e) {\n    //if the pen is down in the canvas, draw/erase\n    if (this.state.pen === 'down') {\n      this.ctx.beginPath();\n      this.ctx.lineWidth = this.state.lineWidth;\n      this.ctx.lineCap = 'round';\n\n      if (this.state.mode === 'draw') {\n        this.ctx.strokeStyle = this.state.penColor;\n      }\n\n      if (this.state.mode === 'erase') {\n        this.ctx.strokeStyle = '#ffffff';\n      }\n\n      this.ctx.moveTo(this.state.penCoords[0], this.state.penCoords[1]); //move to old position\n\n      this.ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY); //draw to new position\n\n      this.ctx.stroke();\n      this.setState({\n        //save new position \n        penCoords: [e.nativeEvent.offsetX, e.nativeEvent.offsetY]\n      });\n    }\n  }\n\n  penDown(e) {\n    //mouse is down on the canvas\n    this.setState({\n      pen: 'down',\n      penCoords: [e.nativeEvent.offsetX, e.nativeEvent.offsetY]\n    });\n  }\n\n  penUp() {\n    //mouse is up on the canvas\n    this.setState({\n      pen: 'up'\n    });\n  }\n\n  penSizeUp() {\n    //increase pen size button clicked\n    this.setState({\n      lineWidth: this.state.lineWidth += 5\n    });\n  }\n\n  penSizeDown() {\n    //decrease pen size button clicked\n    this.setState({\n      lineWidth: this.state.lineWidth -= 5\n    });\n  }\n\n  setColor(c) {\n    //a color button was clicked\n    this.setState({\n      penColor: c\n    });\n  }\n\n  reset() {\n    //clears it to all white, resets state to original\n    this.setState({\n      mode: 'draw',\n      pen: 'up',\n      lineWidth: 10,\n      penColor: 'black'\n    });\n    this.ctx = this.refs.canvas.getContext('2d');\n    this.ctx.fillStyle = \"white\";\n    this.ctx.fillRect(0, 0, 300, 300);\n    this.ctx.lineWidth = 10;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: styles.maindiv,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: \"300\",\n      height: \"300\",\n      style: styles.canvas,\n      onMouseMove: e => this.drawing(e),\n      onMouseDown: e => this.penDown(e),\n      onMouseUp: e => this.penUp(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: e => this.draw(e),\n      style: styles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Draw\"), React.createElement(\"button\", {\n      onClick: e => this.erase(e),\n      style: styles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Erase\"), React.createElement(\"button\", {\n      onClick: e => this.penSizeUp(),\n      style: styles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Pen Size +\"), React.createElement(\"button\", {\n      onClick: e => this.penSizeDown(),\n      style: styles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Pen Size -\"), React.createElement(\"button\", {\n      onClick: () => this.reset(),\n      style: styles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Reset\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      style: Object.assign({}, styles.colorSwatches.red, styles.button),\n      onClick: () => this.setColor('red'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Red\"), React.createElement(\"button\", {\n      style: Object.assign({}, styles.colorSwatches.orange, styles.button),\n      onClick: () => this.setColor('orange'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Orange\"), React.createElement(\"button\", {\n      style: Object.assign({}, styles.colorSwatches.yellow, styles.button),\n      onClick: () => this.setColor('yellow'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Yellow\"), React.createElement(\"button\", {\n      style: Object.assign({}, styles.colorSwatches.green, styles.button),\n      onClick: () => this.setColor('green'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Green\"), React.createElement(\"button\", {\n      style: Object.assign({}, styles.colorSwatches.blue, styles.button),\n      onClick: () => this.setColor('blue'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Blue\")));\n  }\n\n}\n\nexport default DrawingPreview;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/previews/DrawingPreview.js"],"names":["React","makeStyles","styles","canvas","border","margin","maindiv","padding","width","button","height","minWidth","colorSwatches","red","orange","yellow","green","blue","DrawingPreview","Component","componentDidMount","reset","draw","e","setState","mode","erase","drawing","state","pen","ctx","beginPath","lineWidth","lineCap","strokeStyle","penColor","moveTo","penCoords","lineTo","nativeEvent","offsetX","offsetY","stroke","penDown","penUp","penSizeUp","penSizeDown","setColor","c","refs","getContext","fillStyle","fillRect","render","Object","assign"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst styles = {\n    canvas : {\n        border:'1px solid #333',\n        margin:'20px 0px'\n    },\n\n    maindiv : {\n        padding:'10px',\n        margin:'auto',\n        width:'800px'\n    },\n\n    button : {\n        border:'0px',\n        margin:'1px',\n        height:'50px',\n        minWidth:'75px'\n    },\n\n    colorSwatches : {\n        red : {'backgroundColor' : 'red'},\n        orange : {'backgroundColor' : 'orange'},\n        yellow : {'backgroundColor' : 'yellow'},\n        green : {'backgroundColor' : 'green'},\n        blue : {'backgroundColor' : 'blue'},\n    },\n};\n\n\n//simple draw component made in react\nclass DrawingPreview extends React.Component {\n\n    componentDidMount() {\n        this.reset()\n    }\n\n    draw(e) { //response to Draw button click \n        this.setState({\n            mode:'draw'\n        })\n    }\n\n    erase() { //response to Erase button click\n        this.setState({\n            mode:'erase'\n        })\n    }\n\n    drawing(e) { //if the pen is down in the canvas, draw/erase\n\n        if(this.state.pen === 'down') {\n\n            this.ctx.beginPath();\n            this.ctx.lineWidth = this.state.lineWidth;\n            this.ctx.lineCap = 'round';\n\n\n            if(this.state.mode === 'draw') {\n                this.ctx.strokeStyle = this.state.penColor\n            }\n\n            if(this.state.mode === 'erase') {\n                this.ctx.strokeStyle = '#ffffff'\n            }\n\n            this.ctx.moveTo(this.state.penCoords[0], this.state.penCoords[1]) ;//move to old position\n            this.ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY); //draw to new position\n            this.ctx.stroke();\n\n            this.setState({ //save new position \n                penCoords:[e.nativeEvent.offsetX, e.nativeEvent.offsetY]\n            })\n        }\n    }\n\n    penDown(e) { //mouse is down on the canvas\n        this.setState({\n            pen:'down',\n            penCoords:[e.nativeEvent.offsetX, e.nativeEvent.offsetY]\n        })\n    }\n\n    penUp() { //mouse is up on the canvas\n        this.setState({\n            pen:'up'\n        })\n    }\n\n    penSizeUp(){ //increase pen size button clicked\n        this.setState({\n            lineWidth: this.state.lineWidth += 5\n        })\n    }\n\n    penSizeDown() {//decrease pen size button clicked\n        this.setState({\n            lineWidth: this.state.lineWidth -= 5\n        })\n    }\n\n    setColor(c){ //a color button was clicked\n        this.setState({\n            penColor : c\n        })\n    }\n\n    reset() { //clears it to all white, resets state to original\n        this.setState({\n            mode: 'draw',\n            pen : 'up',\n            lineWidth : 10,\n            penColor : 'black'\n        });\n\n        this.ctx = this.refs.canvas.getContext('2d');\n        this.ctx.fillStyle=\"white\";\n        this.ctx.fillRect(0,0,300,300);\n        this.ctx.lineWidth = 10\n    }\n\n    render() {\n        return (\n            <div style={styles.maindiv}>\n                <canvas ref=\"canvas\" width=\"300\" height=\"300\" style={styles.canvas}\n                        onMouseMove={(e)=>this.drawing(e)}\n                        onMouseDown={(e)=>this.penDown(e)}\n                        onMouseUp={(e)=>this.penUp(e)}>\n                </canvas>\n                <div>\n                    <button onClick={(e)=>this.draw(e)} style={styles.button}>Draw</button>\n                    <button onClick={(e)=>this.erase(e)} style={styles.button}>Erase</button>\n                    <button onClick={(e)=>this.penSizeUp()} style={styles.button}>Pen Size +</button>\n                    <button onClick={(e)=>this.penSizeDown()} style={styles.button}>Pen Size -</button>\n                    <button onClick={()=>this.reset()} style={styles.button}>Reset</button>\n                </div>\n                <div>\n                    <button style={Object.assign({}, styles.colorSwatches.red, styles.button)} onClick={()=>this.setColor('red')}>Red</button>\n                    <button style={Object.assign({}, styles.colorSwatches.orange, styles.button)} onClick={()=>this.setColor('orange')}>Orange</button>\n                    <button style={Object.assign({}, styles.colorSwatches.yellow, styles.button)} onClick={()=>this.setColor('yellow')}>Yellow</button>\n                    <button style={Object.assign({}, styles.colorSwatches.green, styles.button)} onClick={()=>this.setColor('green')}>Green</button>\n                    <button style={Object.assign({}, styles.colorSwatches.blue, styles.button)} onClick={()=>this.setColor('blue')}>Blue</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DrawingPreview;"]},"metadata":{},"sourceType":"module"}