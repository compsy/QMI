{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/properties/TextTemplate.js\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectProperty, setProperty } from \"../../features/questionProperties/questionSlice\";\nimport { TextField } from \"@material-ui/core\";\nexport const TextProperty = ({\n  name,\n  propertyName,\n  ...props\n}) => {\n  const property = useSelector(selectProperty(propertyName));\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(setProperty({\n      property: propertyName,\n      value: event.target.value\n    }));\n  };\n\n  return React.createElement(TextField, {\n    key: propertyName,\n    fullWidth: true,\n    variant: \"filled\",\n    type: \"text\",\n    id: \"outlined-basic\",\n    value: property // onChange={handleChange}\n    // label={name}\n    // {...props}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  });\n  return React.createElement(FormControl, {\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    variant: \"filled\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, name), React.createElement(FilledInput, Object.assign({\n    required: true,\n    className: classes.boxy,\n    autoFocus: true,\n    autoComplete: \"off\",\n    type: \"text\",\n    id: `option-${index + 1}`,\n    placeholder: type === \"range\" ? \"Enter range label here..\" : \"Enter option title here..\",\n    value: property || \"\",\n    onChange: handleChange\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/properties/TextTemplate.js"],"names":["React","useSelector","useDispatch","selectProperty","setProperty","TextField","TextProperty","name","propertyName","props","property","dispatch","handleChange","event","value","target","classes","boxy","index","type"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,cADF,EAEEC,WAFF,QAGO,iDAHP;AAIA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,YAAR;AAAsB,KAAGC;AAAzB,CAAD,KAAsC;AAChE,QAAMC,QAAQ,GAAGT,WAAW,CAACE,cAAc,CAACK,YAAD,CAAf,CAA5B;AACA,QAAMG,QAAQ,GAAGT,WAAW,EAA5B;;AAEA,QAAMU,YAAY,GAAIC,KAAD,IAAW;AAC9BF,IAAAA,QAAQ,CACNP,WAAW,CAAC;AACVM,MAAAA,QAAQ,EAAEF,YADA;AAEVM,MAAAA,KAAK,EAAED,KAAK,CAACE,MAAN,CAAaD;AAFV,KAAD,CADL,CAAR;AAMD,GAPD;;AASA,SACE,oBAAC,SAAD;AACE,IAAA,GAAG,EAAEN,YADP;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,OAAO,EAAC,QAHV;AAIE,IAAA,IAAI,EAAC,MAJP;AAKE,IAAA,EAAE,EAAE,gBALN;AAME,IAAA,KAAK,EAAEE,QANT,CAOE;AACA;AACA;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAcA,SACE,oBAAC,WAAD;AAAa,IAAA,SAAS,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IADH,CADF,EAIE,oBAAC,WAAD;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,SAAS,EAAES,OAAO,CAACC,IAFrB;AAGE,IAAA,SAAS,MAHX;AAIE,IAAA,YAAY,EAAC,KAJf;AAKE,IAAA,IAAI,EAAC,MALP;AAME,IAAA,EAAE,EAAG,UAASC,KAAK,GAAG,CAAE,EAN1B;AAOE,IAAA,WAAW,EACTC,IAAI,KAAK,OAAT,GACI,0BADJ,GAEI,2BAVR;AAYE,IAAA,KAAK,EAAET,QAAQ,IAAI,EAZrB;AAaE,IAAA,QAAQ,EAAEE;AAbZ,KAcMH,KAdN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,CADF;AAuBD,CAlDM","sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectProperty,\n  setProperty,\n} from \"../../features/questionProperties/questionSlice\";\nimport { TextField } from \"@material-ui/core\";\n\nexport const TextProperty = ({ name, propertyName, ...props }) => {\n  const property = useSelector(selectProperty(propertyName));\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    dispatch(\n      setProperty({\n        property: propertyName,\n        value: event.target.value,\n      })\n    );\n  };\n\n  return (\n    <TextField\n      key={propertyName}\n      fullWidth\n      variant=\"filled\"\n      type=\"text\"\n      id={\"outlined-basic\"}\n      value={property}\n      // onChange={handleChange}\n      // label={name}\n      // {...props}\n    />\n  );\n\n  return (\n    <FormControl fullWidth>\n      <InputLabel variant=\"filled\">\n        {name}\n      </InputLabel>\n      <FilledInput\n        required\n        className={classes.boxy}\n        autoFocus\n        autoComplete=\"off\"\n        type=\"text\"\n        id={`option-${index + 1}`}\n        placeholder={\n          type === \"range\"\n            ? \"Enter range label here..\"\n            : \"Enter option title here..\"\n        }\n        value={property || \"\"}\n        onChange={handleChange}\n        {...props}\n      />\n    </FormControl>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}