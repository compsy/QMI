{"ast":null,"code":"import uuid from \"uuid/v1\";\n\nconst reorder = (list, startIndex, endIndex) => {\n  const [removed] = list.splice(startIndex, 1);\n  list.splice(endIndex, 0, removed);\n  return list;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  const item = source[droppableSource.index];\n  destination.splice(droppableDestination.index, 0, {\n    id: uuid(),\n    type: item.label,\n    title: `untitled ${item.label}`,\n    options: [\"option1\", \"option2\", \"option3\", \"option4\"]\n  });\n  return destination;\n};\n\nexport const questionnaireReducer = (state, action) => {\n  switch (action.type) {\n    case \"REORDER\":\n      const newQuestions = reorder(state, action.source.index, action.destination.index);\n      return;\n\n    case \"SET_QUESTIONS\":\n      return action.questions;\n\n    case \"ADD_QUESTION\":\n      const uniq = uuid();\n      return [...state, {\n        id: uniq,\n        type: action.questionType.toLowerCase(),\n        title: \"untitled \" + action.questionType,\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      }];\n\n    case \"REMOVE_QUESTION\":\n      return state.filter(question => question.id !== action.id);\n\n    case \"UPDATE_QUESTION\":\n      return state.map(question => question.id === action.id ? action.new : question);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/reducers/questionnaireReducer.js"],"names":["uuid","reorder","list","startIndex","endIndex","removed","splice","copy","source","destination","droppableSource","droppableDestination","item","index","id","type","label","title","options","questionnaireReducer","state","action","newQuestions","questions","uniq","questionType","toLowerCase","filter","question","map","new"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AAC9C,QAAM,CAACC,OAAD,IAAYH,IAAI,CAACI,MAAL,CAAYH,UAAZ,EAAwB,CAAxB,CAAlB;AACAD,EAAAA,IAAI,CAACI,MAAL,CAAYF,QAAZ,EAAsB,CAAtB,EAAyBC,OAAzB;AACA,SAAOH,IAAP;AACD,CAJD;;AAMA,MAAMK,IAAI,GAAG,CAACC,MAAD,EAASC,WAAT,EAAsBC,eAAtB,EAAuCC,oBAAvC,KAAgE;AAC3E,QAAMC,IAAI,GAAGJ,MAAM,CAACE,eAAe,CAACG,KAAjB,CAAnB;AACAJ,EAAAA,WAAW,CAACH,MAAZ,CAAmBK,oBAAoB,CAACE,KAAxC,EAA+C,CAA/C,EAAkD;AAChDC,IAAAA,EAAE,EAAEd,IAAI,EADwC;AAEhDe,IAAAA,IAAI,EAAEH,IAAI,CAACI,KAFqC;AAGhDC,IAAAA,KAAK,EAAG,YAAWL,IAAI,CAACI,KAAM,EAHkB;AAIhDE,IAAAA,OAAO,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC;AAJuC,GAAlD;AAMA,SAAOT,WAAP;AACD,CATD;;AAYA,OAAO,MAAMU,oBAAoB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrD,UAAQA,MAAM,CAACN,IAAf;AACE,SAAK,SAAL;AACE,YAAMO,YAAY,GAAGrB,OAAO,CAACmB,KAAD,EAAQC,MAAM,CAACb,MAAP,CAAcK,KAAtB,EAA6BQ,MAAM,CAACZ,WAAP,CAAmBI,KAAhD,CAA5B;AACA;;AACF,SAAK,eAAL;AACE,aAAOQ,MAAM,CAACE,SAAd;;AACF,SAAK,cAAL;AACE,YAAMC,IAAI,GAAGxB,IAAI,EAAjB;AACA,aAAO,CACL,GAAGoB,KADE,EAEL;AACEN,QAAAA,EAAE,EAAEU,IADN;AAEET,QAAAA,IAAI,EAAEM,MAAM,CAACI,YAAP,CAAoBC,WAApB,EAFR;AAGET,QAAAA,KAAK,EAAE,cAAcI,MAAM,CAACI,YAH9B;AAIEP,QAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC;AAJX,OAFK,CAAP;;AASF,SAAK,iBAAL;AACE,aAAOE,KAAK,CAACO,MAAN,CAAaC,QAAQ,IAAIA,QAAQ,CAACd,EAAT,KAAgBO,MAAM,CAACP,EAAhD,CAAP;;AACF,SAAK,iBAAL;AACE,aAAOM,KAAK,CAACS,GAAN,CAAUD,QAAQ,IACvBA,QAAQ,CAACd,EAAT,KAAgBO,MAAM,CAACP,EAAvB,GAA4BO,MAAM,CAACS,GAAnC,GAAyCF,QADpC,CAAP;;AAGF;AACE,aAAOR,KAAP;AAxBJ;AA0BD,CA3BM","sourcesContent":["import uuid from \"uuid/v1\";\n\nconst reorder = (list, startIndex, endIndex) => {\n  const [removed] = list.splice(startIndex, 1);\n  list.splice(endIndex, 0, removed);\n  return list;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  const item = source[droppableSource.index];\n  destination.splice(droppableDestination.index, 0, {\n    id: uuid(),\n    type: item.label,\n    title: `untitled ${item.label}`,\n    options: [\"option1\", \"option2\", \"option3\", \"option4\"]\n  });\n  return destination;\n};\n\n\nexport const questionnaireReducer = (state, action) => {\n  switch (action.type) {\n    case \"REORDER\":\n      const newQuestions = reorder(state, action.source.index, action.destination.index);\n      return \n    case \"SET_QUESTIONS\":\n      return action.questions;\n    case \"ADD_QUESTION\":\n      const uniq = uuid();\n      return [\n        ...state,\n        {\n          id: uniq,\n          type: action.questionType.toLowerCase(),\n          title: \"untitled \" + action.questionType,\n          options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n        }\n      ];\n    case \"REMOVE_QUESTION\":\n      return state.filter(question => question.id !== action.id);\n    case \"UPDATE_QUESTION\":\n      return state.map(question =>\n        question.id === action.id ? action.new : question\n      );\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}