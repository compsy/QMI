{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/Question.js\";\nimport React, { useContext } from \"react\";\nimport { ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, Divider, Grid, Typography } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport RemoveQuestionButton from \"./buttons/RemoveQuestionButton\";\nimport EditQuestionButton from \"./buttons/EditQuestionButton\";\nimport RadioCheckboxPreview from \"./previews/RadioCheckboxPreview\";\nimport LikertPreview from \"./previews/LikertPreview\";\n\nconst Question = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  return React.createElement(ExpansionPanel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Summary, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(Details, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }));\n};\n\nexport default Question;\n\nconst Summary = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  return React.createElement(ExpansionPanelSummary, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 1,\n    style: {\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"left\",\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, questions.indexOf(question) + 1)), React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    style: {\n      textAlign: \"left\",\n      wordWrap: \"break-word\",\n      wordBreak: \"break-word\",\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, question.title)), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"right\",\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(ExpandMoreIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }))));\n};\n\nconst Details = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  return React.createElement(ExpansionPanelDetails, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    spacing: 1,\n    style: {\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, question.type.toUpperCase())), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, (() => {\n    switch (question.type) {\n      case \"radio\":\n        return React.createElement(RadioCheckboxPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        });\n\n      case \"checkbox\":\n        return React.createElement(RadioCheckboxPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        });\n\n      case \"likert\":\n        return React.createElement(LikertPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(RadioCheckboxPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        });\n    }\n  })()), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(RemoveQuestionButton, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(EditQuestionButton, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }))));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/Question.js"],"names":["React","useContext","ExpansionPanel","ExpansionPanelSummary","ExpansionPanelDetails","Divider","Grid","Typography","ExpandMoreIcon","QuestionnaireContext","SettingsContext","RemoveQuestionButton","EditQuestionButton","RadioCheckboxPreview","LikertPreview","Question","question","settings","Summary","questions","background","showGridAreas","opacity","textAlign","indexOf","wordWrap","wordBreak","title","Details","type","toUpperCase"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SACEC,cADF,EAEEC,qBAFF,EAGEC,qBAHF,EAIEC,OAJF,EAKEC,IALF,EAMEC,UANF,QAOO,mBAPP;AAQA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,SAASC,oBAAT,QAAqC,kCAArC;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,OAAOC,oBAAP,MAAiC,gCAAjC;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAOC,oBAAP,MAAiC,iCAAjC;AACA,OAAOC,aAAP,MAA0B,0BAA1B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAehB,UAAU,CAACS,eAAD,CAA/B;AACA,SACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEM,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEA,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CATD;;AAWA,eAAeD,QAAf;;AAEA,MAAMG,OAAO,GAAG,CAAC;AAAEF,EAAAA;AAAF,CAAD,KAAkB;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAehB,UAAU,CAACS,eAAD,CAA/B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAgBlB,UAAU,CAACQ,oBAAD,CAAhC;AAEA,SACE,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,SAAS,EAAC,KAFZ;AAGE,IAAA,OAAO,EAAC,QAHV;AAIE,IAAA,UAAU,EAAC,QAJb;AAKE,IAAA,OAAO,EAAE,CALX;AAME,IAAA,KAAK,EAAE;AACLW,MAAAA,UAAU,EAAEH,QAAQ,CAACI,aAAT,GAAyB,WAAzB,GAAuC,aAD9C;AAELC,MAAAA,OAAO,EAAEL,QAAQ,CAACI,aAAT,GAAyB,KAAzB,GAAiC;AAFrC,KANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,oBAAC,IAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,EAAE,MAFJ;AAGE,IAAA,KAAK,EAAE;AACLE,MAAAA,SAAS,EAAE,MADN;AAELH,MAAAA,UAAU,EAAEH,QAAQ,CAACI,aAAT,GAAyB,YAAzB,GAAwC,aAF/C;AAGLC,MAAAA,OAAO,EAAEL,QAAQ,CAACI,aAAT,GAAyB,KAAzB,GAAiC;AAHrC,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,SAAS,CAACK,OAAV,CAAkBR,QAAlB,IAA8B,CADjC,CATF,CAXF,EAwBE,oBAAC,IAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,EAAE,EAAE,CAFN;AAGE,IAAA,KAAK,EAAE;AACLO,MAAAA,SAAS,EAAE,MADN;AAELE,MAAAA,QAAQ,EAAE,YAFL;AAGLC,MAAAA,SAAS,EAAE,YAHN;AAILN,MAAAA,UAAU,EAAEH,QAAQ,CAACI,aAAT,GAAyB,WAAzB,GAAuC,aAJ9C;AAKLC,MAAAA,OAAO,EAAEL,QAAQ,CAACI,aAAT,GAAyB,KAAzB,GAAiC;AALrC,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BL,QAAQ,CAACW,KAAnC,CAXF,CAxBF,EAqCE,oBAAC,IAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,EAAE,MAFJ;AAGE,IAAA,KAAK,EAAE;AACLJ,MAAAA,SAAS,EAAE,OADN;AAELH,MAAAA,UAAU,EAAEH,QAAQ,CAACI,aAAT,GAAyB,YAAzB,GAAwC,aAF/C;AAGLC,MAAAA,OAAO,EAAEL,QAAQ,CAACI,aAAT,GAAyB,KAAzB,GAAiC;AAHrC,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CArCF,CADF,CADF;AAqDD,CAzDD;;AA2DA,MAAMO,OAAO,GAAG,CAAC;AAAEZ,EAAAA;AAAF,CAAD,KAAkB;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAehB,UAAU,CAACS,eAAD,CAA/B;AAEA,SACE,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,OAAO,EAAC,QAHV;AAIE,IAAA,UAAU,EAAC,SAJb;AAKE,IAAA,OAAO,EAAE,CALX;AAME,IAAA,KAAK,EAAE;AACLU,MAAAA,UAAU,EAAEH,QAAQ,CAACI,aAAT,GAAyB,WAAzB,GAAuC,aAD9C;AAELC,MAAAA,OAAO,EAAEL,QAAQ,CAACI,aAAT,GAAyB,KAAzB,GAAiC;AAFrC,KANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,oBAAC,IAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,EAAE,MAFJ;AAGE,IAAA,KAAK,EAAE;AACLE,MAAAA,SAAS,EAAE,QADN;AAELH,MAAAA,UAAU,EAAEH,QAAQ,CAACI,aAAT,GAAyB,YAAzB,GAAwC,aAF/C;AAGLC,MAAAA,OAAO,EAAEL,QAAQ,CAACI,aAAT,GAAyB,KAAzB,GAAiC;AAHrC,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGL,QAAQ,CAACa,IAAT,CAAcC,WAAd,EAFH,CATF,CAXF,EAyBE,oBAAC,IAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,EAAE,MAFJ;AAGE,IAAA,KAAK,EAAE;AACLP,MAAAA,SAAS,EAAE,QADN;AAELH,MAAAA,UAAU,EAAEH,QAAQ,CAACI,aAAT,GAAyB,WAAzB,GAAuC,aAF9C;AAGLC,MAAAA,OAAO,EAAEL,QAAQ,CAACI,aAAT,GAAyB,KAAzB,GAAiC;AAHrC,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASG,CAAC,MAAM;AACN,YAAQL,QAAQ,CAACa,IAAjB;AACE,WAAK,OAAL;AACE,eAAO,oBAAC,oBAAD;AAAsB,UAAA,QAAQ,EAAEb,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACF,WAAK,UAAL;AACE,eAAO,oBAAC,oBAAD;AAAsB,UAAA,QAAQ,EAAEA,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACF,WAAK,QAAL;AACE,eAAO,oBAAC,aAAD;AAAe,UAAA,QAAQ,EAAEA,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AACF;AACE,eAAO,oBAAC,oBAAD;AAAsB,UAAA,QAAQ,EAAEA,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AARJ;AAUD,GAXA,GATH,CAzBF,EA+CE,oBAAC,IAAD;AACE,IAAA,IAAI,MADN;AAEE,IAAA,EAAE,MAFJ;AAGE,IAAA,KAAK,EAAE;AACLO,MAAAA,SAAS,EAAE,QADN;AAELH,MAAAA,UAAU,EAAEH,QAAQ,CAACI,aAAT,GAAyB,YAAzB,GAAwC,aAF/C;AAGLC,MAAAA,OAAO,EAAEL,QAAQ,CAACI,aAAT,GAAyB,KAAzB,GAAiC;AAHrC,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,oBAAC,oBAAD;AAAsB,IAAA,QAAQ,EAAEL,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAUE,oBAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAEA,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CA/CF,CADF,CADF;AAgED,CAnED","sourcesContent":["import React, { useContext } from \"react\";\nimport {\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  Divider,\n  Grid,\n  Typography\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport RemoveQuestionButton from \"./buttons/RemoveQuestionButton\";\nimport EditQuestionButton from \"./buttons/EditQuestionButton\";\nimport RadioCheckboxPreview from \"./previews/RadioCheckboxPreview\";\nimport LikertPreview from \"./previews/LikertPreview\";\n\nconst Question = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n  return (\n    <ExpansionPanel>\n      <Summary question={question} />\n      <Divider />\n      <Details question={question} />\n    </ExpansionPanel>\n  );\n};\n\nexport default Question;\n\nconst Summary = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n\n  return (\n    <ExpansionPanelSummary>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={1}\n        style={{\n          background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n          opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n        }}\n      >\n        <Grid\n          item\n          xs\n          style={{\n            textAlign: \"left\",\n            background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          <Typography variant=\"h5\">\n            {questions.indexOf(question) + 1}\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          xs={8}\n          style={{\n            textAlign: \"left\",\n            wordWrap: \"break-word\",\n            wordBreak: \"break-word\",\n            background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          <Typography variant=\"h5\">{question.title}</Typography>\n        </Grid>\n        <Grid\n          item\n          xs\n          style={{\n            textAlign: \"right\",\n            background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          <ExpandMoreIcon />\n        </Grid>\n      </Grid>\n    </ExpansionPanelSummary>\n  );\n};\n\nconst Details = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n\n  return (\n    <ExpansionPanelDetails>\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"stretch\"\n        spacing={1}\n        style={{\n          background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n          opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n        }}\n      >\n        <Grid\n          item\n          xs\n          style={{\n            textAlign: \"center\",\n            background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          <Typography variant=\"caption\">\n            {/* {`${question.type} options preview`.toUpperCase()} */}\n            {question.type.toUpperCase()}\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          xs\n          style={{\n            textAlign: \"center\",\n            background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          {(() => {\n            switch (question.type) {\n              case \"radio\":\n                return <RadioCheckboxPreview question={question} />;\n              case \"checkbox\":\n                return <RadioCheckboxPreview question={question} />;\n              case \"likert\":\n                return <LikertPreview question={question} />;\n              default:\n                return <RadioCheckboxPreview question={question} />;\n            }\n          })()}\n        </Grid>\n        <Grid\n          item\n          xs\n          style={{\n            textAlign: \"center\",\n            background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          <RemoveQuestionButton question={question} />\n          <EditQuestionButton question={question} />\n        </Grid>\n      </Grid>\n    </ExpansionPanelDetails>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}