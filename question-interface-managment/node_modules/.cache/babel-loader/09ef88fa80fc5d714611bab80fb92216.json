{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/contexts/QuestionnaireContext.js\";\nimport React, { createContext, useReducer } from \"react\";\nimport { questionnaireReducer } from \"../reducers/questionnaireReducer\";\nimport { useEffect } from \"react\";\nexport const QuestionnaireContext = createContext();\n\nconst timelineReducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATED\":\n      return action.timeline;\n\n    default:\n      return state;\n  }\n};\n\nconst QuestionnaireContextProvider = props => {\n  const [timeline, dispatchTimeline] = useReducer(timelineReducer, {\n    past: [],\n    present: [{\n      id: \"v1\",\n      type: \"radio\",\n      title: \"untitled radio\",\n      options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n    }, {\n      id: \"v2\",\n      type: \"checkbox\",\n      title: \"untitled checkbox\",\n      options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n    }, {\n      id: \"v3\",\n      type: \"range\",\n      title: \"untitled range\",\n      options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n    }, {\n      id: \"v4\",\n      type: \"likert\",\n      title: \"untitled likert\",\n      options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n    }],\n    future: []\n  });\n  const [questions, dispatch] = useReducer(questionnaireReducer, []);\n  useEffect(() => {\n    dispatch({\n      type: \"SET_QUESTIONS\",\n      questions: timeline.present\n    });\n  }, []);\n  useEffect(() => {\n    const t = {\n      past: [...timeline.past, timeline.present],\n      present: questions,\n      future: [...timeline.future]\n    };\n    console.log(t);\n    dispatchTimeline({\n      type: \"UPDATED\",\n      timeline: t\n    });\n  }, [questions]);\n  return React.createElement(QuestionnaireContext.Provider, {\n    value: {\n      questions,\n      dispatch,\n      timeline,\n      dispatchTimeline\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default QuestionnaireContextProvider;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/contexts/QuestionnaireContext.js"],"names":["React","createContext","useReducer","questionnaireReducer","useEffect","QuestionnaireContext","timelineReducer","state","action","type","timeline","QuestionnaireContextProvider","props","dispatchTimeline","past","present","id","title","options","future","questions","dispatch","t","console","log","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,SAASC,oBAAT,QAAqC,kCAArC;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,OAAO,MAAMC,oBAAoB,GAAGJ,aAAa,EAA1C;;AAEP,MAAMK,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAOD,MAAM,CAACE,QAAd;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAPD;;AASA,MAAMI,4BAA4B,GAAGC,KAAK,IAAI;AAC5C,QAAM,CAACF,QAAD,EAAWG,gBAAX,IAA+BX,UAAU,CAACI,eAAD,EAAkB;AAC/DQ,IAAAA,IAAI,EAAE,EADyD;AAE/DC,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,EAAE,EAAE,IADN;AAEEP,MAAAA,IAAI,EAAE,OAFR;AAGEQ,MAAAA,KAAK,EAAE,gBAHT;AAIEC,MAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC;AAJX,KADO,EAOP;AACEF,MAAAA,EAAE,EAAE,IADN;AAEEP,MAAAA,IAAI,EAAE,UAFR;AAGEQ,MAAAA,KAAK,EAAE,mBAHT;AAIEC,MAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC;AAJX,KAPO,EAaP;AACEF,MAAAA,EAAE,EAAE,IADN;AAEEP,MAAAA,IAAI,EAAE,OAFR;AAGEQ,MAAAA,KAAK,EAAE,gBAHT;AAIEC,MAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC;AAJX,KAbO,EAmBP;AACEF,MAAAA,EAAE,EAAE,IADN;AAEEP,MAAAA,IAAI,EAAE,QAFR;AAGEQ,MAAAA,KAAK,EAAE,iBAHT;AAIEC,MAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC;AAJX,KAnBO,CAFsD;AA4B/DC,IAAAA,MAAM,EAAE;AA5BuD,GAAlB,CAA/C;AA8BA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBnB,UAAU,CAACC,oBAAD,EAAuB,EAAvB,CAAxC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,QAAQ,CAAC;AAAEZ,MAAAA,IAAI,EAAE,eAAR;AAAyBW,MAAAA,SAAS,EAAEV,QAAQ,CAACK;AAA7C,KAAD,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAGAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,CAAC,GAAG;AAACR,MAAAA,IAAI,EAAE,CAAC,GAAGJ,QAAQ,CAACI,IAAb,EAAmBJ,QAAQ,CAACK,OAA5B,CAAP;AAA6CA,MAAAA,OAAO,EAAEK,SAAtD;AAAiED,MAAAA,MAAM,EAAE,CAAC,GAAGT,QAAQ,CAACS,MAAb;AAAzE,KAAV;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAT,IAAAA,gBAAgB,CAAC;AAAEJ,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,QAAQ,EAAGY;AAA9B,KAAD,CAAhB;AACD,GAJQ,EAIN,CAACF,SAAD,CAJM,CAAT;AAKA,SACE,oBAAC,oBAAD,CAAsB,QAAtB;AACE,IAAA,KAAK,EAAE;AAAEA,MAAAA,SAAF;AAAaC,MAAAA,QAAb;AAAuBX,MAAAA,QAAvB;AAAiCG,MAAAA;AAAjC,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGD,KAAK,CAACa,QAHT,CADF;AAOD,CA/CD;;AAiDA,eAAed,4BAAf","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport { questionnaireReducer } from \"../reducers/questionnaireReducer\";\nimport { useEffect } from \"react\";\n\nexport const QuestionnaireContext = createContext();\n\nconst timelineReducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATED\":\n      return action.timeline;\n    default:\n      return state;\n  }\n};\n\nconst QuestionnaireContextProvider = props => {\n  const [timeline, dispatchTimeline] = useReducer(timelineReducer, {\n    past: [],\n    present: [\n      {\n        id: \"v1\",\n        type: \"radio\",\n        title: \"untitled radio\",\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      },\n      {\n        id: \"v2\",\n        type: \"checkbox\",\n        title: \"untitled checkbox\",\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      },\n      {\n        id: \"v3\",\n        type: \"range\",\n        title: \"untitled range\",\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      },\n      {\n        id: \"v4\",\n        type: \"likert\",\n        title: \"untitled likert\",\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      }\n    ],\n    future: []\n  });\n  const [questions, dispatch] = useReducer(questionnaireReducer, []);\n  useEffect(() => {\n    dispatch({ type: \"SET_QUESTIONS\", questions: timeline.present })\n  }, [])\n  useEffect(() => {\n    const t = {past: [...timeline.past, timeline.present], present: questions, future: [...timeline.future]};\n    console.log(t);\n    dispatchTimeline({ type: \"UPDATED\", timeline:  t});\n  }, [questions]);\n  return (\n    <QuestionnaireContext.Provider\n      value={{ questions, dispatch, timeline, dispatchTimeline }}\n    >\n      {props.children}\n    </QuestionnaireContext.Provider>\n  );\n};\n\nexport default QuestionnaireContextProvider;\n"]},"metadata":{},"sourceType":"module"}