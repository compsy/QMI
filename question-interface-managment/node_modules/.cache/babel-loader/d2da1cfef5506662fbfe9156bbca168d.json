{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js\";\nimport React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport { Box, Container, Drawer, List, ListItem, ListItemIcon, ListItemText, Typography } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { QUESTION_TYPES } from \"./QuestionTypes\";\nimport './index.css';\n\nconst QuestionsPage = () => {\n  const {\n    questions,\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const onDragEnd = React.useCallback(result => {\n    const {\n      source,\n      destination\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    switch (source.droppableId) {\n      case \"BAG\":\n        dispatch({\n          type: \"REORDER\",\n          source: source,\n          destination: destination\n        });\n        break;\n\n      case \"SHOP\":\n        dispatch({\n          type: \"CLONE\",\n          source: source,\n          destination: destination\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  return React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    items: QUESTION_TYPES,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(Container, {\n    maxWidth: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(TopSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(BottomSection, {\n    items: questions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })));\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"2em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(ToggleGridAreasButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(StringifiedJSONCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\n\nconst BottomSection = ({\n  items\n}) => {\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"1em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Questions\"), React.createElement(Droppable, {\n    droppableId: \"BAG\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Box, {\n    ref: provided.innerRef,\n    className: \"shopping-bag\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, questions.map((question, index) => React.createElement(Draggable, {\n    key: question.id,\n    draggableId: question.id,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: provided.draggableProps.style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(Question, {\n    key: uuidv1(),\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })))), provided.placeholder)), React.createElement(AddQuestionButton2, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }));\n}; // This method is needed for rendering clones of draggables\n\n\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"li\", Object.assign({}, provided.draggableProps, provided.dragHandleProps, {\n    ref: provided.innerRef,\n    style: provided.draggableProps.style,\n    className: snapshot.isDragging ? \"dragging\" : \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), item.label));\n};\n\nconst Toolbar = ({\n  items\n}) => {\n  return React.createElement(Droppable, {\n    renderClone: getRenderItem(items, \"\"),\n    droppableId: \"SHOP\",\n    isDropDisabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Drawer, {\n    ref: provided.innerRef,\n    style: {\n      width: 50\n    },\n    variant: \"permanent\",\n    anchor: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, items.map((item, index) => {\n    const shouldRenderClone = item.id === snapshot.draggingFromThisWith;\n    return React.createElement(React.Fragment, {\n      style: {\n        textAlign: 'left'\n      },\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, shouldRenderClone ? React.createElement(ListItem, {\n      button: true,\n      key: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, item.icon), React.createElement(ListItemText, {\n      primary: item.label,\n      style: {\n        textAlign: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })) : React.createElement(Draggable, {\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      key: item.label,\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(ListItem, {\n      button: true,\n      className: snapshot.isDragging ? \"dragging\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, item.icon), React.createElement(ListItemText, {\n      primary: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    })))));\n  }), provided.placeholder)));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js"],"names":["React","useContext","v1","uuidv1","Box","Container","Drawer","List","ListItem","ListItemIcon","ListItemText","Typography","QuestionnaireContext","Question","ToggleGridAreasButton","AddQuestionButton2","StringifiedJSONCard","DragDropContext","Draggable","Droppable","QUESTION_TYPES","QuestionsPage","questions","dispatch","onDragEnd","useCallback","result","source","destination","droppableId","type","TopSection","textAlign","margin","BottomSection","items","provided","snapshot","innerRef","map","question","index","id","draggableProps","dragHandleProps","style","placeholder","getRenderItem","className","rubric","item","isDragging","label","Toolbar","width","shouldRenderClone","draggingFromThisWith","icon"],"mappings":"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","sourcesContent":["import React, {useContext} from \"react\";\nimport {v1 as uuidv1} from \"uuid\";\nimport {Box, Container, Drawer, List, ListItem, ListItemIcon, ListItemText, Typography} from \"@material-ui/core\";\nimport {QuestionnaireContext} from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport {DragDropContext, Draggable, Droppable} from \"react-beautiful-dnd\";\nimport {QUESTION_TYPES} from \"./QuestionTypes\";\nimport './index.css';\n\nconst QuestionsPage = () => {\n    const {questions, dispatch} = useContext(QuestionnaireContext);\n    const onDragEnd = React.useCallback(result => {\n        const {source, destination} = result;\n\n        if (!destination) {\n            return;\n        }\n\n    switch (source.droppableId) {\n      case \"BAG\":\n        dispatch({ type: \"REORDER\", source: source, destination: destination });\n        break;\n      case \"SHOP\":\n        dispatch({ type: \"CLONE\", source: source, destination: destination });\n        break;\n      default:\n        break;\n    }\n  }, []);\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Toolbar items={QUESTION_TYPES} />\n      <Container maxWidth=\"sm\">\n        <TopSection />\n        <BottomSection items={questions} />\n      </Container>\n    </DragDropContext>\n  );\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"2em auto\" }}>\n      {/* <AddQuestionButton /> */}\n      <ToggleGridAreasButton />\n      <StringifiedJSONCard />\n    </Container>\n  );\n};\n\nconst BottomSection = ({ items }) => {\n  const { questions } = useContext(QuestionnaireContext);\n\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"1em auto\" }}>\n      <Typography variant=\"h4\" style={{ margin: \"1em 0\" }}>\n        Questions\n      </Typography>\n      <Droppable droppableId=\"BAG\">\n          {(provided, snapshot) => (\n              <Box ref={provided.innerRef} className=\"shopping-bag\">\n                  {questions.map((question, index) => (\n                      <Draggable\n                          key={question.id}\n                          draggableId={question.id}\n                          index={index}\n                      >\n                          {(provided, snapshot) => (\n                              <div\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                  style={provided.draggableProps.style}\n                              >\n                                  <Question key={uuidv1()} question={question}/>\n                              </div>\n                          )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </Box>\n        )}\n      </Droppable>\n      <AddQuestionButton2 />\n    </Container>\n  );\n};\n\n// This method is needed for rendering clones of draggables\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return (\n    <React.Fragment>\n      <li\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        style={provided.draggableProps.style}\n        className={snapshot.isDragging ? \"dragging\" : \"\"}\n      >\n        {item.label}\n      </li>\n    </React.Fragment>\n  );\n};\n\n\nconst Toolbar = ({ items }) => {\n  return (\n    <Droppable\n      renderClone={getRenderItem(items, \"\")}\n      droppableId=\"SHOP\"\n      isDropDisabled={true}\n    >\n      {(provided, snapshot) => (\n          <Drawer ref={provided.innerRef} style={{width: 50}} variant=\"permanent\" anchor=\"right\">\n              <List>\n                  {items.map((item, index) => {\n                      const shouldRenderClone =\n                          item.id === snapshot.draggingFromThisWith;\n                      return (\n                          <React.Fragment style={{textAlign: 'left'}} key={item.id}>\n                              {shouldRenderClone ? (\n                                  <ListItem button key={item.label}>\n                                      <ListItemIcon>\n                                          {item.icon}\n                                      </ListItemIcon>\n                                      <ListItemText primary={item.label} style={{textAlign: 'left'}}/>\n                                  </ListItem>\n                              ) : (\n                                  <Draggable draggableId={item.id} index={index}>\n                                      {(provided, snapshot) => (\n                        <div\n                          key={item.label}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <ListItem\n                            button\n                            className={snapshot.isDragging ? \"dragging\" : \"\"}\n                          >\n                            <ListItemIcon>\n                              {item.icon}\n                            </ListItemIcon>\n                            <ListItemText primary={item.label} />\n                          </ListItem>\n                        </div>\n                      )}\n                    </Draggable>\n                  )}\n                </React.Fragment>\n              );\n            })}\n            {provided.placeholder}\n          </List>\n        </Drawer>\n      )}\n    </Droppable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}