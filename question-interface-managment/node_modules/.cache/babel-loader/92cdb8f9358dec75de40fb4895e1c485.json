{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Box, Dialog, IconButton, TextField, Button, InputAdornment, Grid, Typography, Select, MenuItem, InputLabel, FormControl } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport { AddButtonLabelProperty, ButtonTextProperty, ColorProperty, ContentProperty, DataMethodProperty, DefaultDateProperty, DefaultExpansionsProperty, DefaultTextValueProperty, DensityProperty, HeightProperty, HiddenProperty, HintProperty, HoursFromProperty, HoursLabelProperty, HoursStepProperty, HoursToProperty, ImageProperty, LabelOptionsProperty, LabelProperty, MaxDateProperty, MaxExpansionsProperty, MaxLengthProperty, MaxProperty, MinDateProperty, MinProperty, MinutesLabelProperty, OtherwiseLabelProperty, OtherwiseTooltipProperty, PatternProperty, PlaceholderProperty, RadiusProperty, RemoveButtonLabelProperty, RequiredProperty, SectionEndProperty, SectionStartProperty, ShowOtherwiseProperty, StepProperty, TextOptionsProperty, TitleProperty, TodayProperty, TooltipProperty, WidthProperty } from \"./QuestionnaireProperties\";\n\nconst EditDialog = ({\n  question,\n  open,\n  setOpen\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // load question to editor state on dialog open\n\n  useEffect(() => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...question\n      }\n    });\n  }, [open, newQuestionDispatch, question]); // dispatch action to questionnaireReducer to update question\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: newQuestion\n    });\n    console.table(question);\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: {\n        title: \"\",\n        options: []\n      }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      padding: \"1em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(DialogBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(DialogFooter, {\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))));\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext);\n\n  const GridItem = props => React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: props.textAlign,\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, props.children);\n\n  const TypeSelector = () => React.createElement(Select, {\n    autoWidth: true,\n    labelId: \"type-select-label\",\n    value: newQuestion.type,\n    onChange: e => newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        type: e.target.value\n      }\n    }),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Radio\"), React.createElement(MenuItem, {\n    value: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Checkbox\"), React.createElement(MenuItem, {\n    value: \"range\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Range\"), React.createElement(MenuItem, {\n    value: \"likert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Likert\"));\n\n  const QuestionTitle = () => React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Edit Question \", questions.indexOf(question) + 1);\n\n  return React.createElement(GridItem, {\n    textAlign: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"type-select-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Type\"), React.createElement(TypeSelector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(QuestionTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }))));\n};\n\nconst DialogBody = () => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // Grid for boolean items. These are switches, checkboxes, etc.\n\n  const MiscProperties = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Misc.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"These items are available in \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"multiple\"), \" other question types.\")), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(RequiredProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), React.createElement(ShowOtherwiseProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), newQuestion.show_otherwise ? React.createElement(Grid, {\n      item: true,\n      xs: true,\n      style: {\n        textAlign: \"center\",\n        margin: \"1em 0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(OtherwiseLabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(OtherwiseTooltipProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    })) : null, React.createElement(HiddenProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      style: {\n        textAlign: \"center\",\n        margin: \"1em 0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(TooltipProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })), React.createElement(MinProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(MaxProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(ContentProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(PlaceholderProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(SectionStartProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(SectionEndProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }));\n  };\n\n  const DrawingSpecificVariables = () => {\n    const DrawingGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Drawing-specific.\"), props.children);\n\n    return React.createElement(DrawingGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(WidthProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(HeightProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(ImageProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(ColorProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(RadiusProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(DensityProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }));\n  };\n\n  const TextFieldSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Textfield-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(DefaultTextValueProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(PatternProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(HintProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }));\n  };\n\n  const NumberSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"Number-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(MaxLengthProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }));\n  };\n\n  const RangeSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Range-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(StepProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(LabelOptionsProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }));\n  };\n\n  const ExpandableSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Expandable-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(AddButtonLabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(RemoveButtonLabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }), React.createElement(DefaultExpansionsProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }), React.createElement(MaxExpansionsProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }));\n  };\n\n  const TimeSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Time-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(HoursFromProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }), React.createElement(HoursToProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }), React.createElement(HoursStepProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), React.createElement(HoursLabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }), React.createElement(MinutesLabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }));\n  };\n\n  const DateSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \"Date-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(TodayProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }), React.createElement(DefaultDateProperty, {\n      disabled: newQuestion.today,\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }), React.createElement(MinDateProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(MaxDateProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }));\n  };\n\n  const UnsubscribeSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Unsubscribe-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(ButtonTextProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }), React.createElement(DataMethodProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }));\n  };\n\n  const DropdownSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Dropdown-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(LabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322\n    },\n    __self: this\n  }, React.createElement(TitleProperty, {\n    required: true,\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, \"All other properties (debug)\"), React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  }, React.createElement(MiscProperties, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  }, React.createElement(TextOptionsProperty, {\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  })));\n};\n\nconst DialogFooter = ({\n  handleClose\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n\n  const GridItem = props => React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }, props.children);\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    alignItems: \"flex-start\",\n    justify: \"flex-end\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390\n    },\n    __self: this\n  }, \"cancel\")), React.createElement(GridItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393\n    },\n    __self: this\n  }, \"submit\")));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js"],"names":["React","useState","useContext","useEffect","Box","Dialog","IconButton","TextField","Button","InputAdornment","Grid","Typography","Select","MenuItem","InputLabel","FormControl","DeleteIcon","QuestionnaireContext","SettingsContext","NewQuestionContext","ToggleGridAreasButton","AddButtonLabelProperty","ButtonTextProperty","ColorProperty","ContentProperty","DataMethodProperty","DefaultDateProperty","DefaultExpansionsProperty","DefaultTextValueProperty","DensityProperty","HeightProperty","HiddenProperty","HintProperty","HoursFromProperty","HoursLabelProperty","HoursStepProperty","HoursToProperty","ImageProperty","LabelOptionsProperty","LabelProperty","MaxDateProperty","MaxExpansionsProperty","MaxLengthProperty","MaxProperty","MinDateProperty","MinProperty","MinutesLabelProperty","OtherwiseLabelProperty","OtherwiseTooltipProperty","PatternProperty","PlaceholderProperty","RadiusProperty","RemoveButtonLabelProperty","RequiredProperty","SectionEndProperty","SectionStartProperty","ShowOtherwiseProperty","StepProperty","TextOptionsProperty","TitleProperty","TodayProperty","TooltipProperty","WidthProperty","EditDialog","question","open","setOpen","settings","dispatch","newQuestion","newQuestionDispatch","type","handleSubmit","event","preventDefault","id","new","console","table","title","options","handleClose","padding","background","showGridAreas","DialogHeader","questions","GridItem","props","textAlign","opacity","children","TypeSelector","e","target","value","QuestionTitle","indexOf","DialogBody","MiscProperties","CustomGrid","show_otherwise","margin","DrawingSpecificVariables","DrawingGrid","TextFieldSpecificVariables","NumberSpecificVariables","RangeSpecificVariables","ExpandableSpecificVariables","TimeSpecificVariables","DateSpecificVariables","today","UnsubscribeSpecificVariables","DropdownSpecificVariables","DialogFooter"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Box,\n  Dialog,\n  IconButton,\n  TextField,\n  Button,\n  InputAdornment,\n  Grid,\n  Typography,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport {\n  AddButtonLabelProperty,\n  ButtonTextProperty,\n  ColorProperty, ContentProperty,\n  DataMethodProperty, DefaultDateProperty,\n  DefaultExpansionsProperty,\n  DefaultTextValueProperty,\n  DensityProperty,\n  HeightProperty,\n  HiddenProperty,\n  HintProperty,\n  HoursFromProperty,\n  HoursLabelProperty,\n  HoursStepProperty,\n  HoursToProperty,\n  ImageProperty, LabelOptionsProperty,\n  LabelProperty, MaxDateProperty,\n  MaxExpansionsProperty,\n  MaxLengthProperty,\n  MaxProperty, MinDateProperty,\n  MinProperty,\n  MinutesLabelProperty,\n  OtherwiseLabelProperty,\n  OtherwiseTooltipProperty,\n  PatternProperty, PlaceholderProperty,\n  RadiusProperty,\n  RemoveButtonLabelProperty,\n  RequiredProperty, SectionEndProperty, SectionStartProperty,\n  ShowOtherwiseProperty, StepProperty,\n  TextOptionsProperty,\n  TitleProperty,\n  TodayProperty,\n  TooltipProperty,\n  WidthProperty\n} from \"./QuestionnaireProperties\";\n\nconst EditDialog = ({ question, open, setOpen }) => {\n  const { settings } = useContext(SettingsContext);\n  const { dispatch } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    newQuestionDispatch({ type: \"SET_QUESTION\", question: { ...question } });\n  }, [open, newQuestionDispatch, question]);\n\n  // dispatch action to questionnaireReducer to update question\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n    console.table(question);\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { title: \"\", options: [] }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      {/* <ToggleGridAreasButton /> */}\n      <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n          style={{\n            padding: \"2em\",\n            background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n          }}\n        >\n          <DialogHeader question={question} />\n          <DialogBody/>\n          <DialogFooter handleClose={handleClose} />\n        </Grid>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  const GridItem = (props) => (\n    <Grid\n      item\n      xs={12}\n      style={{\n        textAlign: props.textAlign,\n        background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n        opacity: settings.showGridAreas ? 0.9 : 1.0\n      }}\n    >\n      {props.children}\n    </Grid>\n  );\n\n  const TypeSelector = () => (\n    <Select\n    autoWidth\n    labelId=\"type-select-label\"\n    value={newQuestion.type}\n    onChange={e =>\n      newQuestionDispatch({\n        type: \"SET_QUESTION\",\n        question: { ...newQuestion, type: e.target.value }\n      })\n    }\n    style={{ textAlign: \"left\" }}\n  >\n      {/*TODO: not everything is compatible for convert, so only show what's allowed.*/}\n    <MenuItem value=\"radio\">Radio</MenuItem>\n    <MenuItem value=\"checkbox\">Checkbox</MenuItem>\n    <MenuItem value=\"range\">Range</MenuItem>\n    <MenuItem value=\"likert\">Likert</MenuItem>\n\n  </Select>\n  );\n\n  const QuestionTitle = () => (\n    <Typography variant=\"h5\">\n      Edit Question {questions.indexOf(question) + 1}\n    </Typography>\n  );\n\n  return (\n    <GridItem textAlign=\"right\">\n      <FormControl>\n        <InputLabel id=\"type-select-label\">Type</InputLabel>\n        <TypeSelector/>\n      </FormControl>\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <GridItem textAlign=\"left\">\n          <QuestionTitle/>\n        </GridItem>\n      </Grid>\n    </GridItem>\n  );\n};\n\nconst DialogBody = () => {\n  const { settings } = useContext(SettingsContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // Grid for boolean items. These are switches, checkboxes, etc.\n\n\n  const MiscProperties = () => {\n    const CustomGrid = (props) =>\n      <Grid item xs={4}>\n        <h3>Misc.</h3>\n        <p><i>These items are available in <b>multiple</b> other question types.</i></p>\n        {props.children}\n      </Grid>;\n    return <CustomGrid>\n      <RequiredProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n      <ShowOtherwiseProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n      {newQuestion.show_otherwise ?\n        <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n          <OtherwiseLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n          <OtherwiseTooltipProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n        </Grid>\n        : null}\n      <HiddenProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n      <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n        <TooltipProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      </Grid>\n\n      <MinProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n      <MaxProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n\n      {/*todo: check if this property is valid for BOTH raw and unsubscribe.*/}\n      <ContentProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n      <PlaceholderProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n      <SectionStartProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n      <SectionEndProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    </CustomGrid>\n  };\n  const DrawingSpecificVariables = () => {\n    const DrawingGrid = (props) =>\n      <Grid item xs={4}>\n        <h3>Drawing-specific.</h3>\n        {props.children}\n      </Grid>;\n\n   return <DrawingGrid>\n      <WidthProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <HeightProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <ImageProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <ColorProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <RadiusProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <DensityProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    </DrawingGrid>\n  }\n  const TextFieldSpecificVariables = () => {\n    const CustomGrid = (props) =>\n      <Grid item xs={4}>\n        <h3>Textfield-specific.</h3>\n        {props.children}\n      </Grid>;\n    return <CustomGrid>\n      <DefaultTextValueProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <PatternProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <HintProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    </CustomGrid>\n  };\n  const NumberSpecificVariables = () => {\n    const CustomGrid = (props) =>\n      <Grid item xs={4}>\n        <h3>Number-specific.</h3>\n        {props.children}\n      </Grid>;\n    return <CustomGrid>\n      <MaxLengthProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    </CustomGrid>\n  };\n  const RangeSpecificVariables = () => {\n    const CustomGrid = (props) =>\n      <Grid item xs={4}>\n        <h3>Range-specific.</h3>\n        {props.children}\n      </Grid>;\n    return <CustomGrid>\n      <StepProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <LabelOptionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    </CustomGrid>\n  };\n  const ExpandableSpecificVariables = () => {\n    const CustomGrid = (props) =>\n      <Grid item xs={4}>\n        <h3>Expandable-specific.</h3>\n        {props.children}\n      </Grid>;\n    return <CustomGrid>\n      <AddButtonLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <RemoveButtonLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <DefaultExpansionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <MaxExpansionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    </CustomGrid>\n  };\n  const TimeSpecificVariables = () => {\n    const CustomGrid = (props) =>\n      <Grid item xs={4}>\n        <h3>Time-specific.</h3>\n        {props.children}\n      </Grid>;\n    return <CustomGrid>\n      <HoursFromProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <HoursToProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <HoursStepProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <HoursLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <MinutesLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    </CustomGrid>\n  };\n  const DateSpecificVariables = () => {\n    const CustomGrid = (props) =>\n      <Grid item xs={4}>\n        <h3>Date-specific.</h3>\n        {props.children}\n      </Grid>;\n    return <CustomGrid>\n      <TodayProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <DefaultDateProperty disabled={newQuestion.today} newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <MinDateProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <MaxDateProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n\n    </CustomGrid>\n  };\n  const UnsubscribeSpecificVariables = () => {\n    const CustomGrid = (props) =>\n      <Grid item xs={4}>\n        <h3>Unsubscribe-specific.</h3>\n        {props.children}\n      </Grid>;\n    return <CustomGrid>\n      <ButtonTextProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      <DataMethodProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    </CustomGrid>\n  };\n  const DropdownSpecificVariables = () => {\n    const CustomGrid = (props) =>\n      <Grid item xs={4}>\n        <h3>Dropdown-specific.</h3>\n        {props.children}\n      </Grid>;\n    return <CustomGrid>\n      <LabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    </CustomGrid>\n  };\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={4}>\n      <Grid\n        item\n        xs={12}\n        style={{\n          background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n        <TitleProperty\n          required\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n          style={{ margin: \"1em 0\" }}\n        />\n      </Grid>\n\n\n      <Grid item xs={12}>\n        <h5>All other properties (debug)</h5>\n        <Grid container direction=\"row\">\n          <MiscProperties/>\n          {/* <DateSpecificVariables/>\n          <DrawingSpecificVariables/>\n          <DropdownSpecificVariables/>\n          <ExpandableSpecificVariables/>\n          <NumberSpecificVariables/>\n          <RangeSpecificVariables/>\n          <TextFieldSpecificVariables/>\n          <TimeSpecificVariables/>\n          <UnsubscribeSpecificVariables/> */}\n        </Grid>\n      </Grid>\n\n      <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n        <TextOptionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DialogFooter = ({ handleClose }) => {\n  const { settings } = useContext(SettingsContext);\n\n  const GridItem = (props) => (\n    <Grid\n    item\n    xs\n    style={{\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    }}\n  >{props.children}</Grid>\n  );\n\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      alignItems=\"flex-start\"\n      justify=\"flex-end\"\n      style={{\n        padding: \"2em\",\n        background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n      }}\n    >\n      <GridItem>\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>cancel</Button>\n      </GridItem>\n      <GridItem>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">submit</Button>\n      </GridItem>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}