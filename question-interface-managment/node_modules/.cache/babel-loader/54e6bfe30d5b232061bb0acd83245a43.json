{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog2.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Button, Dialog, FormControl, Grid, GridItem, InputLabel, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport { PROPERTIES_BY_QUESTION_TYPE, SPECIAL_CONVERSION_CASES } from \"../utils\";\nimport Card from \"@material-ui/core/Card\";\nimport { IOptions as classes } from \"glob\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { borderColor } from \"@material-ui/system\";\nimport { WidthProperty } from \"./QuestionnaireProperties\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setQuestion, resetAll } from \"../features/questionProperties/questionSlice\";\nimport { setQuestionAtIndex } from \"../features/questions/questionsSlice\";\nimport { useState } from \"react\";\nimport TypeProperty from \"./properties/TypeProperty\";\n\nconst EditDialog2 = ({\n  question,\n  index,\n  open,\n  setOpen\n}) => {\n  const newQuestion = useSelector(state => state.question);\n  const dispatch = useDispatch(); // load question to editor state on dialog open\n\n  useEffect(() => {\n    dispatch(setQuestion(question));\n  }, []); // dispatch action to questionnaireReducer to update question\n\n  const handleSubmit = event => {\n    event.preventDefault(); // do post processing here\n\n    dispatch(setQuestionAtIndex({\n      index: index,\n      question: newQuestion\n    }));\n    dispatch(resetAll());\n  }; // cancel all and return to QuestionsPage\n\n\n  const handleClose = () => {\n    dispatch(resetAll());\n    setOpen(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      padding: \"1em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(DialogBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(DialogFooter, {\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }))));\n};\n\nexport default EditDialog2;\n\nconst DialogHeader = () => {\n  return React.createElement(GridItem, {\n    textAlign: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(TypeProperty, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }));\n};\n\nconst DialogBody = () => {\n  const type = useSelector(state => state.question.type);\n\n  const renderProperties = renderRequired => {\n    const elements = [];\n    PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][// deciding what properties should be rendered (what JSON element we should look at)\n    renderRequired ? \"requiredProperties\" : \"optionalProperties\"].map(property => elements.push(React.createElement(property, {})));\n    elements.forEach(element => console.log(element));\n    return elements;\n  };\n\n  const PropertyCategory = props => {\n    const style = props.renderRequired ? {\n      color: \"#FF9999\",\n      title: \"Required\"\n    } : {\n      color: \"#BABAF1\",\n      title: \"Optional\"\n    };\n    return React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        borderColor: style.color\n      },\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, style.title), renderProperties(props.renderRequired))));\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(PropertyCategory, {\n    renderRequired: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), React.createElement(PropertyCategory, {\n    renderRequired: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }))));\n};\n\nconst DialogFooter = ({\n  handleClose\n}) => {\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    alignItems: \"flex-start\",\n    justify: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"cancel\")), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"submit\")));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog2.js"],"names":["React","useContext","useEffect","Button","Dialog","FormControl","Grid","GridItem","InputLabel","MenuItem","Select","Typography","QuestionnaireContext","SettingsContext","NewQuestionContext","PROPERTIES_BY_QUESTION_TYPE","SPECIAL_CONVERSION_CASES","Card","IOptions","classes","CardContent","borderColor","WidthProperty","useDispatch","useSelector","setQuestion","resetAll","setQuestionAtIndex","useState","TypeProperty","EditDialog2","question","index","open","setOpen","newQuestion","state","dispatch","handleSubmit","event","preventDefault","handleClose","padding","DialogHeader","DialogBody","type","renderProperties","renderRequired","elements","toUpperCase","map","property","push","createElement","forEach","element","console","log","PropertyCategory","props","style","color","title","DialogFooter"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport {\n  Button,\n  Dialog,\n  FormControl,\n  Grid,\n  GridItem,\n  InputLabel,\n  MenuItem,\n  Select,\n  Typography,\n} from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport {\n  PROPERTIES_BY_QUESTION_TYPE,\n  SPECIAL_CONVERSION_CASES,\n} from \"../utils\";\nimport Card from \"@material-ui/core/Card\";\nimport { IOptions as classes } from \"glob\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { borderColor } from \"@material-ui/system\";\nimport { WidthProperty } from \"./QuestionnaireProperties\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setQuestion,\n  resetAll,\n} from \"../features/questionProperties/questionSlice\";\nimport { setQuestionAtIndex } from \"../features/questions/questionsSlice\";\nimport { useState } from \"react\";\nimport TypeProperty from \"./properties/TypeProperty\";\n\nconst EditDialog2 = ({ question, index, open, setOpen }) => {\n  const newQuestion = useSelector((state) => state.question);\n  const dispatch = useDispatch();\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    dispatch(setQuestion(question));\n  }, []);\n\n  // dispatch action to questionnaireReducer to update question\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // do post processing here\n    dispatch(setQuestionAtIndex({ index: index, question: newQuestion }));\n    dispatch(resetAll());\n  };\n\n  // cancel all and return to QuestionsPage\n  const handleClose = () => {\n    dispatch(resetAll());\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n        >\n          <DialogHeader />\n          <DialogBody />\n          <DialogFooter handleClose={handleClose} />\n        </Grid>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditDialog2;\n\nconst DialogHeader = () => {\n  return (\n    <GridItem textAlign=\"right\">\n      <TypeProperty />\n    </GridItem>\n  );\n};\n\nconst DialogBody = () => {\n  const type = useSelector(state => state.question.type);\n\n\n  const renderProperties = (renderRequired) => {\n    const elements = [];\n    PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\n      // deciding what properties should be rendered (what JSON element we should look at)\n      renderRequired ? \"requiredProperties\" : \"optionalProperties\"\n    ].map((property) =>\n      elements.push(\n        React.createElement(property, {})\n      )\n    );\n    elements.forEach((element) => console.log(element));\n    return elements;\n  };\n\n  const PropertyCategory = (props) => {\n    const style = props.renderRequired\n      ? { color: \"#FF9999\", title: \"Required\" }\n      : { color: \"#BABAF1\", title: \"Optional\" };\n\n    return (\n      <Grid item xs={12}>\n        <Card style={{ borderColor: style.color }} variant=\"outlined\">\n          <CardContent>\n            <Typography>{style.title}</Typography>\n            {renderProperties(props.renderRequired)}\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n      spacing={4}\n    >\n      <Grid\n        item\n        xs={12}\n      ></Grid>\n      <Grid item xs={12}>\n        <Grid container direction=\"row\" spacing={5}>\n          <PropertyCategory renderRequired />\n          <PropertyCategory renderRequired={false} />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DialogFooter = ({ handleClose }) => {\n  return (\n    <Grid container direction=\"row\" alignItems=\"flex-start\" justify=\"flex-end\">\n      <Grid item xs>\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>\n          cancel\n        </Button>\n      </Grid>\n      <Grid item xs>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          submit\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}