{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/Question.js\";\nimport React, { useContext, useState } from \"react\";\nimport { Box, Divider, ExpansionPanel, ExpansionPanelDetails, ExpansionPanelSummary, Grid, Typography } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport RemoveQuestionButton from \"./buttons/RemoveQuestionButton\";\nimport EditQuestionButton from \"./buttons/EditQuestionButton\";\nimport RadioCheckboxPreview from \"./previews/RadioCheckboxPreview\";\nimport LikertPreview from \"./previews/LikertPreview\";\nimport RangePreview from \"./previews/RangePreview\";\nimport SelectPreview from \"./previews/SelectPreview\";\nimport TextArea from \"./previews/TextArea\";\nimport NumberPreview from \"./previews/NumberPreview\";\nimport DatePickerPreview from \"./previews/DatePickerPreview\";\nimport TimePickerPreview from \"./previews/TimePickerPreview\";\nimport TextFieldPreview from \"./previews/TextFieldPreview\";\nimport DrawingPreview from \"./previews/DrawingPreview\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport \"./index.css\";\n\nconst Question = ({\n  index,\n  question,\n  ...props\n}) => {\n  const [open, setOpen] = useState(false);\n  return React.createElement(Draggable, {\n    key: question.id,\n    draggableId: question.id,\n    index: index,\n    isDragDisabled: open,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Box, Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: provided.draggableProps.style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(ExpansionPanel, Object.assign({\n    expanded: open\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), React.createElement(Summary, {\n    question: question,\n    onMouseDown: () => setOpen(!open),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Details, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }))));\n};\n\nconst style = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\nexport default Question;\n\nconst Summary = ({\n  question,\n  ...props\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  return React.createElement(ExpansionPanelSummary, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 1,\n    style: {\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"left\",\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, questions.indexOf(question) + 1)), React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    style: {\n      textAlign: \"left\",\n      wordWrap: \"break-word\",\n      wordBreak: \"break-word\",\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, question.title)), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"right\",\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(ExpandMoreIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }))));\n};\n\nconst Details = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  return React.createElement(ExpansionPanelDetails, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    spacing: 1,\n    style: {\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, question.type.toUpperCase())), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, (() => {\n    switch (question.type) {\n      case \"radio\":\n        return React.createElement(RadioCheckboxPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        });\n\n      case \"checkbox\":\n        return React.createElement(RadioCheckboxPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        });\n\n      case \"likert\":\n        return React.createElement(LikertPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        });\n\n      case \"range\":\n        return React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, React.createElement(RangePreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }));\n\n      case \"select\":\n        return React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, React.createElement(SelectPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }));\n\n      case \"textarea\":\n        return React.createElement(\"div\", {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, React.createElement(TextArea, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }));\n\n      case \"number\":\n        return React.createElement(NumberPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        });\n\n      case \"date\":\n        return React.createElement(DatePickerPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        });\n\n      case \"time\":\n        return React.createElement(TimePickerPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        });\n\n      case \"text field\":\n        return React.createElement(TextFieldPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        });\n\n      case \"draw\":\n        return React.createElement(\"div\", {\n          style: style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }, React.createElement(DrawingPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }));\n\n      default:\n        return React.createElement(RadioCheckboxPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        });\n    }\n  })()), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(RemoveQuestionButton, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }), React.createElement(EditQuestionButton, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }))));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/Question.js"],"names":["React","useContext","useState","Box","Divider","ExpansionPanel","ExpansionPanelDetails","ExpansionPanelSummary","Grid","Typography","ExpandMoreIcon","QuestionnaireContext","SettingsContext","RemoveQuestionButton","EditQuestionButton","RadioCheckboxPreview","LikertPreview","RangePreview","SelectPreview","TextArea","NumberPreview","DatePickerPreview","TimePickerPreview","TextFieldPreview","DrawingPreview","DragDropContext","Draggable","Droppable","Question","index","question","props","open","setOpen","id","provided","snapshot","innerRef","draggableProps","dragHandleProps","style","display","justifyContent","alignItems","Summary","settings","questions","background","showGridAreas","opacity","textAlign","indexOf","wordWrap","wordBreak","title","Details","type","toUpperCase"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport {\n  Box,\n  Divider,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  Grid,\n  Typography\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport RemoveQuestionButton from \"./buttons/RemoveQuestionButton\";\nimport EditQuestionButton from \"./buttons/EditQuestionButton\";\nimport RadioCheckboxPreview from \"./previews/RadioCheckboxPreview\";\nimport LikertPreview from \"./previews/LikertPreview\";\nimport RangePreview from \"./previews/RangePreview\";\nimport SelectPreview from \"./previews/SelectPreview\";\nimport TextArea from \"./previews/TextArea\";\nimport NumberPreview from \"./previews/NumberPreview\";\nimport DatePickerPreview from \"./previews/DatePickerPreview\";\nimport TimePickerPreview from \"./previews/TimePickerPreview\";\nimport TextFieldPreview from \"./previews/TextFieldPreview\";\nimport DrawingPreview from \"./previews/DrawingPreview\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport \"./index.css\";\n\nconst Question = ({ index, question, ...props }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Draggable\n    key={question.id}\n    draggableId={question.id}\n    index={index}\n    isDragDisabled={open}\n  >\n    {(provided, snapshot) => (\n      <Box\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        style={provided.draggableProps.style}\n      >\n        <ExpansionPanel expanded={open} {...props}>\n      <Summary question={question} onMouseDown={() => setOpen(!open)}/>\n      {/* <Summary onClick={() => setOpen(!open)} question={question} onMouseDown={() => setOpen(!open)}/> */}\n      <Divider />\n      <Details question={question} />\n    </ExpansionPanel>\n      </Box>\n    )}\n  </Draggable>\n    \n  );\n};\n\nconst style = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\n\nexport default Question;\n\nconst Summary = ({ question, ...props }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n\n  return (\n    <ExpansionPanelSummary {...props}>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={1}\n        style={{\n          background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n          opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n        }}\n      >\n        <Grid\n          item\n          xs\n          style={{\n            textAlign: \"left\",\n            background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          <Typography variant=\"h5\">\n            {questions.indexOf(question) + 1}\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          xs={8}\n          style={{\n            textAlign: \"left\",\n            wordWrap: \"break-word\",\n            wordBreak: \"break-word\",\n            background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          <Typography variant=\"h5\">{question.title}</Typography>\n        </Grid>\n        <Grid\n          item\n          xs\n          style={{\n            textAlign: \"right\",\n            background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          <ExpandMoreIcon />\n        </Grid>\n      </Grid>\n    </ExpansionPanelSummary>\n  );\n};\n\nconst Details = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n\n  return (\n    <ExpansionPanelDetails>\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"stretch\"\n        spacing={1}\n        style={{\n          background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n          opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n        }}\n      >\n        <Grid\n          item\n          xs\n          style={{\n            textAlign: \"center\",\n            background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          <Typography variant=\"caption\">\n            {/* {`${question.type} options preview`.toUpperCase()} */}\n            {question.type.toUpperCase()}\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          xs\n          style={{\n            textAlign: \"center\",\n            background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          {(() => {\n            switch (question.type) {\n              case \"radio\":\n                return <RadioCheckboxPreview question={question} />;\n              case \"checkbox\":\n                return <RadioCheckboxPreview question={question} />;\n              case \"likert\":\n                return <LikertPreview question={question} />;\n              case \"range\":\n                return (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      alignItems: \"center\"\n                    }}\n                  >\n                    <RangePreview question={question} />\n                  </div>\n                );\n              case \"select\":\n                return (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      alignItems: \"center\"\n                    }}\n                  >\n                    <SelectPreview question={question} />\n                  </div>\n                );\n              case \"textarea\":\n                return (\n                  <div style={style}>\n                    <TextArea question={question} />\n                  </div>\n                );\n              case \"number\":\n                return <NumberPreview question={question} />;\n              case \"date\":\n                return <DatePickerPreview question={question} />;\n              case \"time\":\n                return <TimePickerPreview question={question} />;\n              case \"text field\":\n                return <TextFieldPreview question={question} />;\n              case \"draw\":\n                return (\n                  <div style={style}>\n                    <DrawingPreview question={question} />\n                  </div>\n                );\n              default:\n                return <RadioCheckboxPreview question={question} />;\n            }\n          })()}\n        </Grid>\n        <Grid\n          item\n          xs\n          style={{\n            textAlign: \"center\",\n            background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n            opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n          }}\n        >\n          <RemoveQuestionButton question={question} />\n          <EditQuestionButton question={question} />\n        </Grid>\n      </Grid>\n    </ExpansionPanelDetails>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}