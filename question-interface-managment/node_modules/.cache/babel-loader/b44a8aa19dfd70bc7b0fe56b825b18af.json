{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js\";\nimport React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport { Container, Typography, Drawer, List, ListItem, ListItemText, Box, ListItemIcon } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport AddQuestionButton from \"./buttons/AddQuestionButton\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuid } from \"uuid\";\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport TuneIcon from '@material-ui/icons/Tune';\nimport LinearScaleIcon from '@material-ui/icons/LinearScale';\nimport Looks5TwoToneIcon from '@material-ui/icons/Looks5TwoTone';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport GestureIcon from '@material-ui/icons/Gesture';\n\nconst QuestionsPage = () => {\n  const {\n    questions,\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const onDragEnd = React.useCallback(result => {\n    const {\n      source,\n      destination\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    switch (source.droppableId) {\n      case \"BAG\":\n        dispatch({\n          type: \"REORDER\",\n          source: source,\n          destination: destination\n        });\n        break;\n\n      case \"SHOP\":\n        dispatch({\n          type: \"CLONE\",\n          source: source,\n          destination: destination\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  return React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    items: QUESTION_TYPES,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(Container, {\n    maxWidth: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(TopSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(BottomSection, {\n    items: questions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })));\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"2em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(ToggleGridAreasButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(StringifiedJSONCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }));\n};\n\nconst BottomSection = ({\n  items\n}) => {\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"1em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Questions\"), React.createElement(Droppable, {\n    droppableId: \"BAG\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Box, {\n    ref: provided.innerRef,\n    className: \"shopping-bag\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, questions.map((question, index) => React.createElement(Draggable, {\n    key: question.id,\n    draggableId: question.id,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: provided.draggableProps.style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(Question, {\n    key: uuidv1(),\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })))), provided.placeholder)), React.createElement(AddQuestionButton2, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }));\n}; // This method is needed for rendering clones of draggables\n\n\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"li\", Object.assign({}, provided.draggableProps, provided.dragHandleProps, {\n    ref: provided.innerRef,\n    style: provided.draggableProps.style,\n    className: snapshot.isDragging ? \"dragging\" : \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), item.label));\n};\n\nconst QUESTION_TYPES = [{\n  id: uuid(),\n  label: \"radio\",\n  icon: React.createElement(RadioButtonCheckedIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"checkbox\",\n  icon: React.createElement(CheckBoxIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"range\",\n  icon: React.createElement(TuneIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"likert\",\n  icon: React.createElement(LinearScaleIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"textarea\",\n  icon: React.createElement(TextFieldsIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"number\",\n  icon: React.createElement(Looks5TwoToneIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"date\",\n  icon: React.createElement(DateRangeIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"time\",\n  icon: React.createElement(ScheduleIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"textfield\",\n  icon: React.createElement(TextFormatIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"drawing\",\n  icon: React.createElement(GestureIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  })\n} // { id: uuid(), label: \"raw\" },\n// { id: uuid(), label: \"expandable\" },\n// { id: uuid(), label: \"unsubscribed\" },\n// { id: uuid(), label: \"dropdown\" },\n];\n\nconst Toolbar = ({\n  items\n}) => {\n  return React.createElement(Droppable, {\n    renderClone: getRenderItem(items, \"\"),\n    droppableId: \"SHOP\",\n    isDropDisabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Drawer, {\n    ref: provided.innerRef,\n    variant: \"permanent\",\n    anchor: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, items.map((item, index) => {\n    const shouldRenderClone = item.id === snapshot.draggingFromThisWith;\n    return React.createElement(React.Fragment, {\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, shouldRenderClone ? React.createElement(ListItem, {\n      button: true,\n      key: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })) : React.createElement(Draggable, {\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      key: item.label,\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(ListItem, {\n      button: true,\n      className: snapshot.isDragging ? \"dragging\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, item.icon), React.createElement(ListItemText, {\n      primary: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })))));\n  }), provided.placeholder)));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js"],"names":["React","useContext","v1","uuidv1","Container","Typography","Drawer","List","ListItem","ListItemText","Box","ListItemIcon","QuestionnaireContext","Question","AddQuestionButton","ToggleGridAreasButton","AddQuestionButton2","StringifiedJSONCard","DragDropContext","Draggable","Droppable","v4","uuid","RadioButtonCheckedIcon","CheckBoxIcon","TuneIcon","LinearScaleIcon","Looks5TwoToneIcon","TextFieldsIcon","DateRangeIcon","ScheduleIcon","TextFormatIcon","GestureIcon","QuestionsPage","questions","dispatch","onDragEnd","useCallback","result","source","destination","droppableId","type","QUESTION_TYPES","TopSection","textAlign","margin","BottomSection","items","provided","snapshot","innerRef","map","question","index","id","draggableProps","dragHandleProps","style","placeholder","getRenderItem","className","rubric","item","isDragging","label","icon","Toolbar","shouldRenderClone","draggingFromThisWith"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport {\n  Container,\n  Typography,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  Box,\n  ListItemIcon\n} from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport AddQuestionButton from \"./buttons/AddQuestionButton\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuid } from \"uuid\";\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport TuneIcon from '@material-ui/icons/Tune';\nimport LinearScaleIcon from '@material-ui/icons/LinearScale';\nimport Looks5TwoToneIcon from '@material-ui/icons/Looks5TwoTone';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport GestureIcon from '@material-ui/icons/Gesture';\n\nconst QuestionsPage = () => {\n  const { questions, dispatch } = useContext(QuestionnaireContext);\n  const onDragEnd = React.useCallback(result => {\n    const { source, destination } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    switch (source.droppableId) {\n      case \"BAG\":\n        dispatch({ type: \"REORDER\", source: source, destination: destination });\n        break;\n      case \"SHOP\":\n        dispatch({ type: \"CLONE\", source: source, destination: destination });\n        break;\n      default:\n        break;\n    }\n  }, []);\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Toolbar items={QUESTION_TYPES} />\n      <Container maxWidth=\"sm\">\n        <TopSection />\n        <BottomSection items={questions} />\n      </Container>\n    </DragDropContext>\n  );\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"2em auto\" }}>\n      {/* <AddQuestionButton /> */}\n      <ToggleGridAreasButton />\n      <StringifiedJSONCard />\n    </Container>\n  );\n};\n\nconst BottomSection = ({ items }) => {\n  const { questions } = useContext(QuestionnaireContext);\n\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"1em auto\" }}>\n      <Typography variant=\"h4\" style={{ margin: \"1em 0\" }}>\n        Questions\n      </Typography>\n      <Droppable droppableId=\"BAG\">\n        {(provided, snapshot) => (\n          <Box ref={provided.innerRef} className=\"shopping-bag\">\n            {questions.map((question, index) => (\n              <Draggable\n                key={question.id}\n                draggableId={question.id}\n                index={index}\n              >\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    style={provided.draggableProps.style}\n                  >\n                    <Question key={uuidv1()} question={question} />\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </Box>\n        )}\n      </Droppable>\n      <AddQuestionButton2 />\n    </Container>\n  );\n};\n\n// This method is needed for rendering clones of draggables\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return (\n    <React.Fragment>\n      <li\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        style={provided.draggableProps.style}\n        className={snapshot.isDragging ? \"dragging\" : \"\"}\n      >\n        {item.label}\n      </li>\n    </React.Fragment>\n  );\n};\n\nconst QUESTION_TYPES = [\n  { id: uuid(), label: \"radio\", icon: <RadioButtonCheckedIcon /> },\n  { id: uuid(), label: \"checkbox\", icon: <CheckBoxIcon />  },\n  { id: uuid(), label: \"range\", icon: <TuneIcon /> },\n  { id: uuid(), label: \"likert\", icon: <LinearScaleIcon /> },\n  { id: uuid(), label: \"textarea\", icon: <TextFieldsIcon /> },\n  { id: uuid(), label: \"number\", icon: <Looks5TwoToneIcon /> },\n  { id: uuid(), label: \"date\",  icon: <DateRangeIcon /> },\n  { id: uuid(), label: \"time\", icon: <ScheduleIcon /> },\n  { id: uuid(), label: \"textfield\", icon: <TextFormatIcon /> },\n  { id: uuid(), label: \"drawing\", icon: <GestureIcon /> }\n  // { id: uuid(), label: \"raw\" },\n  // { id: uuid(), label: \"expandable\" },\n  // { id: uuid(), label: \"unsubscribed\" },\n  // { id: uuid(), label: \"dropdown\" },\n];\n\nconst Toolbar = ({ items }) => {\n  return (\n    <Droppable\n      renderClone={getRenderItem(items, \"\")}\n      droppableId=\"SHOP\"\n      isDropDisabled={true}\n    >\n      {(provided, snapshot) => (\n        <Drawer ref={provided.innerRef} variant=\"permanent\" anchor=\"left\">\n          <List>\n            {items.map((item, index) => {\n              const shouldRenderClone =\n                item.id === snapshot.draggingFromThisWith;\n              return (\n                <React.Fragment key={item.id}>\n                  {shouldRenderClone ? (\n                    <ListItem button key={item.label}>\n                      <ListItemText primary={item.label} />\n                    </ListItem>\n                  ) : (\n                    <Draggable draggableId={item.id} index={index}>\n                      {(provided, snapshot) => (\n                        <div\n                          key={item.label}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                        >\n                          <ListItem\n                            button\n                            className={snapshot.isDragging ? \"dragging\" : \"\"}\n                          >\n                            <ListItemIcon>\n                              {item.icon}\n                            </ListItemIcon>\n                            <ListItemText primary={item.label} />\n                          </ListItem>\n                        </div>\n                      )}\n                    </Draggable>\n                  )}\n                </React.Fragment>\n              );\n            })}\n            {provided.placeholder}\n          </List>\n        </Drawer>\n      )}\n    </Droppable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}