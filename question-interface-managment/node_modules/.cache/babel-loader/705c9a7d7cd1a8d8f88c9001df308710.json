{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/buttons/EditQuestionButton.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Box, Dialog, DialogTitle, Tooltip, IconButton, DialogContent, TextField, DialogActions, Button, InputAdornment, Grid, Typography } from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../../contexts/QuestionnaireContext\";\n\nconst EditQuestionButton = ({\n  question\n}) => {\n  const [open, setOpen] = useState(false);\n  return React.createElement(React.Fragment, null, React.createElement(Tooltip, {\n    title: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: () => setOpen(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(EditIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }))), React.createElement(EditDialog, {\n    question: question,\n    open: open,\n    setOpen: setOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }));\n};\n\nexport default EditQuestionButton;\n\nconst EditDialog = ({\n  question,\n  open,\n  setOpen\n}) => {\n  const [title, setTitle] = useState(\"\");\n  const [options, setOptions] = useState([]);\n  const [optionAdded, setOptionAdded] = useState(false);\n  const {\n    questions,\n    dispatch\n  } = useContext(QuestionnaireContext); // load question to editor state on dialog open\n\n  useEffect(() => {\n    setTitle(question.title);\n    setOptions([...question.options]);\n  }, [open, question.options, question.title]); // dispatch action to questionnaireReducer to update question\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newQuestion = { ...question,\n      title: title,\n      options: options\n    };\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: newQuestion\n    });\n    setOpen(false);\n    setTitle(\"\");\n  }; // update correct option on text input changes\n\n\n  const handleChange = (index, event) => {\n    let newOptions = [...options];\n    newOptions[index] = event.target.value;\n    setOptions(newOptions);\n  };\n\n  const handleAddOptionClick = event => {\n    setOptions([...options, \"\"]);\n    setOptionAdded(true);\n  };\n\n  const handleRemoveOptionClick = (index, event) => {\n    let newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOptionAdded(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      padding: \"1em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Edit Question \", questions.indexOf(question) + 1), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoFocus: true,\n    required: true,\n    variant: \"outlined\",\n    autoComplete: \"off\",\n    margin: \"dense\",\n    id: \"title\",\n    label: \"Title\",\n    type: \"text\",\n    fullWidth: true,\n    value: title,\n    onChange: e => setTitle(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Box, {\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Options\"))), React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Box, {\n    style: {\n      textAlign: \"right\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleAddOptionClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"add option\")))), options.map((option, index) => React.createElement(TextField, {\n    autoFocus: optionAdded ? index === options.length - 1 ? true : false : false,\n    style: {\n      margin: \"0.2em 0\"\n    },\n    placeholder: \"option\",\n    type: \"text\",\n    fullWidth: true,\n    value: option,\n    onChange: e => handleChange(index, e),\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        edge: \"end\",\n        onClick: e => handleRemoveOptionClick(index, e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(DeleteIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"submit\"))));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/buttons/EditQuestionButton.js"],"names":["React","useState","useContext","useEffect","Box","Dialog","DialogTitle","Tooltip","IconButton","DialogContent","TextField","DialogActions","Button","InputAdornment","Grid","Typography","EditIcon","DeleteIcon","QuestionnaireContext","EditQuestionButton","question","open","setOpen","EditDialog","title","setTitle","options","setOptions","optionAdded","setOptionAdded","questions","dispatch","handleSubmit","event","preventDefault","newQuestion","type","id","new","handleChange","index","newOptions","target","value","handleAddOptionClick","handleRemoveOptionClick","splice","handleClose","padding","indexOf","e","margin","textAlign","map","option","length","endAdornment"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SACEC,GADF,EAEEC,MAFF,EAGEC,WAHF,EAIEC,OAJF,EAKEC,UALF,EAMEC,aANF,EAOEC,SAPF,EAQEC,aARF,EASEC,MATF,EAUEC,cAVF,EAWEC,IAXF,EAYEC,UAZF,QAaO,mBAbP;AAcA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,SAASC,oBAAT,QAAqC,qCAArC;;AAEA,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,KAAD,CAAhC;AAEA,SACE,0CACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAE,MAAMqB,OAAO,CAAC,IAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EAME,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEF,QAAtB;AAAgC,IAAA,IAAI,EAAEC,IAAtC;AAA4C,IAAA,OAAO,EAAEC,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAbD;;AAeA,eAAeH,kBAAf;;AAEA,MAAMI,UAAU,GAAG,CAAC;AAAEH,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAD,KAAiC;AAClD,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACyB,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC2B,WAAD,EAAcC,cAAd,IAAgC5B,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAE6B,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA0B7B,UAAU,CAACgB,oBAAD,CAA1C,CAJkD,CAMlD;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,QAAQ,CAACL,QAAQ,CAACI,KAAV,CAAR;AACAG,IAAAA,UAAU,CAAC,CAAC,GAAGP,QAAQ,CAACM,OAAb,CAAD,CAAV;AACD,GAHQ,EAGN,CAACL,IAAD,EAAOD,QAAQ,CAACM,OAAhB,EAAyBN,QAAQ,CAACI,KAAlC,CAHM,CAAT,CAPkD,CAYlD;;AACA,QAAMQ,YAAY,GAAGC,KAAK,IAAI;AAC5BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,WAAW,GAAG,EAAE,GAAGf,QAAL;AAAeI,MAAAA,KAAK,EAAEA,KAAtB;AAA6BE,MAAAA,OAAO,EAAEA;AAAtC,KAApB;AACAK,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,EAAE,EAAEjB,QAAQ,CAACiB,EAAxC;AAA4CC,MAAAA,GAAG,EAAEH;AAAjD,KAAD,CAAR;AACAb,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAG,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAND,CAbkD,CAqBlD;;;AACA,QAAMc,YAAY,GAAG,CAACC,KAAD,EAAQP,KAAR,KAAkB;AACrC,QAAIQ,UAAU,GAAG,CAAC,GAAGf,OAAJ,CAAjB;AACAe,IAAAA,UAAU,CAACD,KAAD,CAAV,GAAoBP,KAAK,CAACS,MAAN,CAAaC,KAAjC;AACAhB,IAAAA,UAAU,CAACc,UAAD,CAAV;AACD,GAJD;;AAMA,QAAMG,oBAAoB,GAAGX,KAAK,IAAI;AACpCN,IAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAa,EAAb,CAAD,CAAV;AACAG,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAHD;;AAKA,QAAMgB,uBAAuB,GAAG,CAACL,KAAD,EAAQP,KAAR,KAAkB;AAChD,QAAIQ,UAAU,GAAG,CAAC,GAAGf,OAAJ,CAAjB;AACAe,IAAAA,UAAU,CAACK,MAAX,CAAkBN,KAAlB,EAAyB,CAAzB;AACAb,IAAAA,UAAU,CAACc,UAAD,CAAV;AACD,GAJD;;AAMA,QAAMM,WAAW,GAAG,MAAM;AACxBzB,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAO,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAHD;;AAKA,SACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAER,IAAd;AAAoB,IAAA,OAAO,EAAE0B,WAA7B;AAA0C,IAAA,SAAS,MAAnD;AAAoD,IAAA,QAAQ,EAAC,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,QAAQ,EAAEf,YAAhB;AAA8B,IAAA,KAAK,EAAE;AAAEgB,MAAAA,OAAO,EAAE;AAAX,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiBlB,SAAS,CAACmB,OAAV,CAAkB7B,QAAlB,IAA8B,CAD/C,CADF,EAIE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,QAAQ,MAFV;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,YAAY,EAAC,KAJf;AAKE,IAAA,MAAM,EAAC,OALT;AAME,IAAA,EAAE,EAAC,OANL;AAOE,IAAA,KAAK,EAAC,OAPR;AAQE,IAAA,IAAI,EAAC,MARP;AASE,IAAA,SAAS,MATX;AAUE,IAAA,KAAK,EAAEI,KAVT;AAWE,IAAA,QAAQ,EAAE0B,CAAC,IAAIzB,QAAQ,CAACyB,CAAC,CAACR,MAAF,CAASC,KAAV,CAXzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAcE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,KAAK,EAAE;AAAEQ,MAAAA,MAAM,EAAE;AAAV,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF,CADF,EAME,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAE;AAAEA,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAER,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,CANF,CAdF,EA0BGlB,OAAO,CAAC2B,GAAR,CAAY,CAACC,MAAD,EAASd,KAAT,KACX,oBAAC,SAAD;AACE,IAAA,SAAS,EACPZ,WAAW,GACPY,KAAK,KAAKd,OAAO,CAAC6B,MAAR,GAAiB,CAA3B,GACE,IADF,GAEE,KAHK,GAIP,KANR;AAQE,IAAA,KAAK,EAAE;AAAEJ,MAAAA,MAAM,EAAE;AAAV,KART;AASE,IAAA,WAAW,EAAC,QATd;AAUE,IAAA,IAAI,EAAC,MAVP;AAWE,IAAA,SAAS,MAXX;AAYE,IAAA,KAAK,EAAEG,MAZT;AAaE,IAAA,QAAQ,EAAEJ,CAAC,IAAIX,YAAY,CAACC,KAAD,EAAQU,CAAR,CAb7B;AAcE,IAAA,UAAU,EAAE;AACVM,MAAAA,YAAY,EACV,oBAAC,cAAD;AAAgB,QAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAC,KADP;AAEE,QAAA,OAAO,EAAEN,CAAC,IAAIL,uBAAuB,CAACL,KAAD,EAAQU,CAAR,CAFvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AAFQ,KAdd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CA1BH,CAJF,EA4DE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,KAAK,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CA5DF,CADF,CADF;AAsED,CAlHD","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  Tooltip,\n  IconButton,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  InputAdornment,\n  Grid,\n  Typography\n} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../../contexts/QuestionnaireContext\";\n\nconst EditQuestionButton = ({ question }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Tooltip title=\"edit\">\n        <IconButton onClick={() => setOpen(true)}>\n          <EditIcon />\n        </IconButton>\n      </Tooltip>\n      <EditDialog question={question} open={open} setOpen={setOpen} />\n    </>\n  );\n};\n\nexport default EditQuestionButton;\n\nconst EditDialog = ({ question, open, setOpen }) => {\n  const [title, setTitle] = useState(\"\");\n  const [options, setOptions] = useState([]);\n  const [optionAdded, setOptionAdded] = useState(false);\n  const { questions, dispatch } = useContext(QuestionnaireContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    setTitle(question.title);\n    setOptions([...question.options]);\n  }, [open, question.options, question.title]);\n\n  // dispatch action to questionnaireReducer to update question\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newQuestion = { ...question, title: title, options: options };\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n    setOpen(false);\n    setTitle(\"\");\n  };\n\n  // update correct option on text input changes\n  const handleChange = (index, event) => {\n    let newOptions = [...options];\n    newOptions[index] = event.target.value;\n    setOptions(newOptions);\n  };\n\n  const handleAddOptionClick = event => {\n    setOptions([...options, \"\"]);\n    setOptionAdded(true);\n  };\n\n  const handleRemoveOptionClick = (index, event) => {\n    let newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOptionAdded(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n        <DialogTitle>\n          Edit Question {questions.indexOf(question) + 1}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            required\n            variant=\"outlined\"\n            autoComplete=\"off\"\n            margin=\"dense\"\n            id=\"title\"\n            label=\"Title\"\n            type=\"text\"\n            fullWidth\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n          />\n          <Grid container style={{ margin: \"1em 0\" }}>\n            <Grid item xs={6}>\n              <Box style={{ textAlign: \"left\" }}>\n                <Typography variant=\"h6\">Options</Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={6}>\n              <Box style={{ textAlign: \"right\" }}>\n                <Button onClick={handleAddOptionClick}>add option</Button>\n              </Box>\n            </Grid>\n          </Grid>\n          {options.map((option, index) => (\n            <TextField\n              autoFocus={\n                optionAdded\n                  ? index === options.length - 1\n                    ? true\n                    : false\n                  : false\n              }\n              style={{ margin: \"0.2em 0\" }}\n              placeholder=\"option\"\n              type=\"text\"\n              fullWidth\n              value={option}\n              onChange={e => handleChange(index, e)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      edge=\"end\"\n                      onClick={e => handleRemoveOptionClick(index, e)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </InputAdornment>\n                )\n              }}\n            />\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button type=\"submit\" color=\"primary\">\n            submit\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}