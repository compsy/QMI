{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { v4 as uuidv1 } from \"uuid\";\nimport { AppBar, Box, Container, CssBaseline, Divider, Drawer, Grid, List, ListItem, ListItemIcon, ListItemText, makeStyles, Paper, Toolbar, Typography } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport \"./index.css\";\nimport { QUESTION_TYPES } from \"./QuestionTypes\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nconst drawerWidth = 240;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  // appBar: {\n  //   width: `calc(100% - ${drawerWidth}px)`,\n  //   marginRight: drawerWidth,\n  // },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"white\",\n    alignItems: \"center\",\n    background: 'linear-gradient(45deg, #7c4dff 30%, #80deea 90%)'\n  },\n  drawer: {\n    // width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {// width: drawerWidth,\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    // background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    // #80deea\n    background: 'linear-gradient(45deg, #7c4dff 30%, #80deea 90%)',\n    // backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3)\n  }\n}));\n\nconst QuestionsPage = () => {\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const {\n    questions,\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const onDragEnd = React.useCallback(result => {\n    const {\n      source,\n      destination\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    settingsDispatch({\n      type: \"SET_DESTINATION_INDEX\",\n      destinationIndex: destination.index\n    });\n    console.log(settings.destinationIndex, destination.index);\n\n    switch (source.droppableId) {\n      case \"BAG\":\n        dispatch({\n          type: \"REORDER\",\n          source: source,\n          destination: destination\n        });\n        break;\n\n      case \"SHOP\":\n        dispatch({\n          type: \"CLONE\",\n          source: source,\n          destination: destination\n        });\n        console.log(destination);\n        console.log(questions[destination.index]);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  const classes = useStyles();\n  useEffect(() => {\n    const x = localStorage.getItem(\"qmi-data\");\n\n    if (x !== null) {\n      dispatch({\n        type: \"SET_QUESTIONS\",\n        questions: JSON.parse(x)\n      });\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"qmi-data\", JSON.stringify(questions));\n  }, [questions]);\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    className: classes.appBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    noWrap: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Questionnaire Editor\"))), React.createElement(Sidebar, {\n    items: QUESTION_TYPES,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(\"main\", {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    style: {\n      margin: \"0\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(TopSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(BottomSection, {\n    items: questions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  })))));\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"1em auto\"\n    },\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(StringifiedJSONCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }));\n};\n\nconst BottomSection = ({\n  items\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\"\n    },\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Questions\"), React.createElement(Droppable, {\n    droppableId: \"BAG\",\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Box, {\n    ref: provided.innerRef,\n    className: \"shopping-bag\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, questions.map((question, index) => React.createElement(Question, {\n    index: index,\n    key: uuidv1(),\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  })), provided.placeholder)));\n};\n\nfunction getStyle(style, snapshot) {\n  if (!snapshot.isDropAnimating) {\n    return style;\n  }\n\n  return { ...style,\n    // cannot be 0, but make it super tiny\n    transitionDuration: `0.00001s`\n  };\n} // This method is needed for rendering clones of draggables\n\n\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  const style = { //backgroundColor: snapshot.isDragging ? 'blue' : 'white',\n    // fontSize: 18,\n    ...provided.draggableProps.style\n  };\n  return React.createElement(Paper, Object.assign({\n    className: snapshot.isDragging ? \"dragging1\" : \"not-dragging1\"\n  }, provided.draggableProps, provided.dragHandleProps, {\n    ref: provided.innerRef // style={provided.draggableProps.style}\n    ,\n    style: getStyle(provided.draggableProps.style, snapshot) // style={{ padding: \"1em\", color: \"white\" }}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(ListItemIcon, {\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, item.icon), React.createElement(ListItemText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, item.label))));\n};\n\nconst Sidebar = ({\n  items\n}) => {\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const classes = useStyles();\n  return React.createElement(Droppable, {\n    renderClone: getRenderItem(items, \"\"),\n    droppableId: \"SHOP\",\n    isDropDisabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Drawer, {\n    className: classes.drawer,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    ref: provided.innerRef,\n    variant: \"permanent\",\n    anchor: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }), React.createElement(List, {\n    style: {\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, items.map((item, index) => {\n    const shouldRenderClone = item.id === snapshot.draggingFromThisWith;\n    return React.createElement(React.Fragment, {\n      style: {\n        textAlign: \"left\"\n      },\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, shouldRenderClone ? React.createElement(ListItem, {\n      button: true,\n      key: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, item.icon), React.createElement(ListItemText, {\n      primary: item.label,\n      style: {\n        textAlign: \"left\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    })) : React.createElement(Draggable, {\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(ListItem, Object.assign({\n      key: item.label,\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      button: true,\n      className: snapshot.isDragging ? \"dragging\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, item.icon), React.createElement(ListItemText, {\n      primary: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }))));\n  }), React.createElement(\"div\", {\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }), React.createElement(ListItem, {\n    button: true,\n    onClick: () => settingsDispatch({\n      type: \"TOGGLE_GRID_AREAS\"\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: \"toggle grid areas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  })), React.createElement(ListItem, {\n    button: true,\n    onClick: () => {\n      localStorage.clear();\n      window.location.reload(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: \"delete data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  })))));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js"],"names":["React","useContext","useEffect","v4","uuidv1","AppBar","Box","Container","CssBaseline","Divider","Drawer","Grid","List","ListItem","ListItemIcon","ListItemText","makeStyles","Paper","Toolbar","Typography","QuestionnaireContext","Question","StringifiedJSONCard","DragDropContext","Draggable","Droppable","QUESTION_TYPES","SettingsContext","drawerWidth","useStyles","theme","root","display","appBar","zIndex","drawer","color","alignItems","background","flexShrink","drawerPaper","toolbar","mixins","content","flexGrow","padding","spacing","QuestionsPage","settings","settingsDispatch","questions","dispatch","onDragEnd","useCallback","result","source","destination","type","destinationIndex","index","console","log","droppableId","classes","x","localStorage","getItem","JSON","parse","setItem","stringify","margin","showGridAreas","TopSection","textAlign","BottomSection","items","provided","snapshot","innerRef","map","question","placeholder","getStyle","style","isDropAnimating","transitionDuration","getRenderItem","className","rubric","item","draggableProps","isDragging","dragHandleProps","icon","label","Sidebar","paper","shouldRenderClone","id","draggingFromThisWith","clear","window","location","reload"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect} from \"react\";\nimport {v4 as uuidv1} from \"uuid\";\nimport {\n  AppBar,\n  Box,\n  Container,\n  CssBaseline,\n  Divider,\n  Drawer,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  Paper,\n  Toolbar,\n  Typography\n} from \"@material-ui/core\";\nimport {QuestionnaireContext} from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport {DragDropContext, Draggable, Droppable} from \"react-beautiful-dnd\";\nimport \"./index.css\";\nimport {QUESTION_TYPES} from \"./QuestionTypes\";\n\nimport {SettingsContext} from \"../contexts/SettingsContext\";\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n  },\n  // appBar: {\n  //   width: `calc(100% - ${drawerWidth}px)`,\n  //   marginRight: drawerWidth,\n  // },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"white\",\n    alignItems: \"center\",\n    background: 'linear-gradient(45deg, #7c4dff 30%, #80deea 90%)',\n  },\n  drawer: {\n    // width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    // width: drawerWidth,\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    // background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n// #80deea\n    background: 'linear-gradient(45deg, #7c4dff 30%, #80deea 90%)',\n    // backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3)\n  }\n}));\n\nconst QuestionsPage = () => {\n  const { settings, settingsDispatch } = useContext(SettingsContext);\n  const { questions, dispatch } = useContext(QuestionnaireContext);\n  const onDragEnd = React.useCallback(result => {\n    const { source, destination } = result;\n    if (!destination) {\n      return;\n    }\n    settingsDispatch({\n      type: \"SET_DESTINATION_INDEX\",\n      destinationIndex: destination.index\n    });\n    console.log(settings.destinationIndex, destination.index);\n    switch (source.droppableId) {\n      case \"BAG\":\n        dispatch({ type: \"REORDER\", source: source, destination: destination });\n        break;\n      case \"SHOP\":\n        dispatch({ type: \"CLONE\", source: source, destination: destination });\n        console.log(destination);\n        console.log(questions[destination.index]);\n        break;\n      default:\n        break;\n    }\n  }, []);\n  const classes = useStyles();\n  useEffect(() => {\n    const x = localStorage.getItem(\"qmi-data\");\n    if (x !== null) {\n      dispatch({ type: \"SET_QUESTIONS\", questions: JSON.parse(x)})\n    }\n  }, [])\n  useEffect(() => {\n    localStorage.setItem(\"qmi-data\", JSON.stringify(questions))\n  }, [questions])\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h5\" noWrap>\n              Questionnaire Editor\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Sidebar items={QUESTION_TYPES} />\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"stretch\"\n            style={{\n              margin: \"0\",\n              background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n            }}\n          >\n            {/* <Grid\n              container\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid\n                item\n                xs={6}\n                style={{\n                  background: settings.showGridAreas\n                    ? \"lightblue\"\n                    : \"transparent\"\n                }}\n              >\n              </Grid>\n              <Grid\n                item\n                xs={6}\n                style={{\n                  background: settings.showGridAreas\n                  ? \"lightgreen\"\n                  : \"transparent\"\n                }}\n              >\n              </Grid>\n            </Grid> */}\n            <TopSection />\n            <BottomSection items={questions} />\n          </Grid>\n        </main>\n      </DragDropContext>\n    </div>\n  );\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return (\n    <Container\n      style={{ textAlign: \"center\", margin: \"1em auto\" }}\n      maxWidth=\"md\"\n    >\n      {/* <AddQuestionButton /> */}\n      {/* <ToggleGridAreasButton /> */}\n      <StringifiedJSONCard />\n    </Container>\n  );\n};\n\nconst BottomSection = ({ items }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n\n  return (\n    <Container style={{ textAlign: \"center\" }} maxWidth=\"md\">\n      <Typography variant=\"h4\" style={{ margin: \"1em 0\" }}>\n        Questions\n      </Typography>\n      <Droppable droppableId=\"BAG\" style={{ textAlign: \"center\" }}>\n        {(provided, snapshot) => (\n          <Box ref={provided.innerRef} className=\"shopping-bag\">\n            {questions.map((question, index) => (\n              <Question index={index} key={uuidv1()} question={question} />\n            ))}\n            {provided.placeholder}\n          </Box>\n        )}\n      </Droppable>\n      {/* <AddQuestionButton2 /> */}\n    </Container>\n  );\n};\n\nfunction getStyle(style, snapshot) {\n  if (!snapshot.isDropAnimating) {\n    return style;\n  }\n  return {\n    ...style,\n    // cannot be 0, but make it super tiny\n    transitionDuration: `0.00001s`\n  };\n}\n\n// This method is needed for rendering clones of draggables\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  const style = {\n    //backgroundColor: snapshot.isDragging ? 'blue' : 'white',\n    // fontSize: 18,\n    ...provided.draggableProps.style\n  };\n  return (\n    <Paper\n      className={snapshot.isDragging ? \"dragging1\" : \"not-dragging1\"}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      // style={provided.draggableProps.style}\n      style={getStyle(provided.draggableProps.style, snapshot)}\n      // style={{ padding: \"1em\", color: \"white\" }}\n    >\n      <ListItem>\n        <ListItemIcon style={{ color: \"white\" }}>{item.icon}</ListItemIcon>\n        <ListItemText>\n          <Typography variant=\"body1\" style={{ color: \"white\" }}>\n            {item.label}\n          </Typography>\n        </ListItemText>\n      </ListItem>\n    </Paper>\n  );\n};\n\nconst Sidebar = ({ items }) => {\n  const { settings, settingsDispatch } = useContext(SettingsContext);\n  const classes = useStyles();\n\n  return (\n    <Droppable\n      renderClone={getRenderItem(items, \"\")}\n      droppableId=\"SHOP\"\n      isDropDisabled={true}\n    >\n      {(provided, snapshot) => (\n        <Drawer\n          className={classes.drawer}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n          ref={provided.innerRef}\n          variant=\"permanent\"\n          anchor=\"right\"\n        >\n          <div className={classes.toolbar} />\n          <List\n            style={{\n              background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n            }}\n          >\n            {items.map((item, index) => {\n              const shouldRenderClone =\n                item.id === snapshot.draggingFromThisWith;\n              return (\n                <React.Fragment style={{ textAlign: \"left\" }} key={item.id}>\n                  {shouldRenderClone ? (\n                    <ListItem button key={item.label}>\n                      <ListItemIcon>{item.icon}</ListItemIcon>\n                      <ListItemText\n                        primary={item.label}\n                        style={{ textAlign: \"left\" }}\n                      />\n                    </ListItem>\n                  ) : (\n                    <Draggable draggableId={item.id} index={index}>\n                      {(provided, snapshot) => (\n                        <ListItem\n                          key={item.label}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          button\n                          className={snapshot.isDragging ? \"dragging\" : \"\"}\n                        >\n                          <ListItemIcon>{item.icon}</ListItemIcon>\n                          <ListItemText primary={item.label} />\n                        </ListItem>\n                      )}\n                    </Draggable>\n                  )}\n                </React.Fragment>\n              );\n            })}\n            {/* {provided.placeholder} */}\n            <div className={classes.toolbar} />\n            <Divider />\n            <ListItem\n              button\n              onClick={() => settingsDispatch({ type: \"TOGGLE_GRID_AREAS\" })}\n            >\n              <ListItemText primary=\"toggle grid areas\" />\n            </ListItem>\n            <ListItem\n              button\n              onClick={() => {localStorage.clear();\n                          window.location.reload(true)}}\n              >\n              <ListItemText primary=\"delete data\"/>\n            </ListItem>\n          </List>\n        </Drawer>\n      )}\n    </Droppable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}