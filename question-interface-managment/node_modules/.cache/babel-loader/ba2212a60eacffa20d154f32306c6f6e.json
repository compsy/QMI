{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/NewEdit.jsx\";\nimport React, { useState } from \"react\";\nimport { List, arrayMove } from \"react-movable\";\nimport { Container } from \"@material-ui/core\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ButtonAppBar from \"./ButtonAppBar\";\nimport RadioTemplate from \"./templates/RadioTemplate\";\nimport CheckboxTemplate from \"./templates/CheckboxTemplate\";\n\nfunction NewEdit({\n  questions\n}) {\n  return React.createElement(React.Fragment, null, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(ButtonAppBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), React.createElement(ReorderableQuestions, {\n    questions: questions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(Fab, {\n    style: {\n      position: \"fixed\",\n      bottom: 50,\n      right: 50,\n      zIndex: 999\n    },\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(AddIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }))));\n}\n\nconst ReorderableQuestions = props => {\n  const [items, setItems] = useState(props.questions);\n  return React.createElement(Container, {\n    maxWidth: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(List, {\n    values: items,\n    onChange: ({\n      oldIndex,\n      newIndex\n    }) => setItems(arrayMove(items, oldIndex, newIndex)),\n    renderList: ({\n      children,\n      props,\n      isDragged\n    }) => React.createElement(\"ul\", Object.assign({}, props, {\n      style: {\n        padding: 0,\n        cursor: isDragged ? \"grabbing\" : undefined\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), children),\n    renderItem: ({\n      value,\n      props,\n      isDragged,\n      isSelected\n    }) => React.createElement(\"li\", Object.assign({}, props, {\n      style: { ...props.style,\n        padding: \"0 0\",\n        // padding: \"1.5em\",\n        margin: \"1em 0em\",\n        // margin: \"0.5em 0em\",\n        listStyleType: \"none\",\n        cursor: isDragged ? \"grabbing\" : \"grab\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), (() => {\n      switch (value.type) {\n        case \"radio\":\n          return React.createElement(RadioTemplate, {\n            question: value,\n            items: items,\n            setItems: setItems,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          });\n\n        case \"checkbox\":\n          return React.createElement(CheckboxTemplate, {\n            question: value,\n            items: items,\n            setItems: setItems,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          });\n\n        default:\n          return null;\n      }\n    })()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => console.log(JSON.stringify(items)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"click me (and check console)\"));\n};\n\nexport default NewEdit;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/NewEdit.jsx"],"names":["React","useState","List","arrayMove","Container","Fab","AddIcon","ButtonAppBar","RadioTemplate","CheckboxTemplate","NewEdit","questions","position","bottom","right","zIndex","ReorderableQuestions","props","items","setItems","oldIndex","newIndex","children","isDragged","padding","cursor","undefined","value","isSelected","style","margin","listStyleType","textAlign","type","console","log","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { List, arrayMove } from \"react-movable\";\nimport { Container } from \"@material-ui/core\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nimport ButtonAppBar from \"./ButtonAppBar\";\nimport RadioTemplate from \"./templates/RadioTemplate\";\nimport CheckboxTemplate from \"./templates/CheckboxTemplate\";\n\nfunction NewEdit({ questions }) {\n  return (\n    <>\n      <Container>\n        <ButtonAppBar />\n        <ReorderableQuestions questions={questions} />\n        <Fab\n          style={{ position: \"fixed\", bottom: 50, right: 50, zIndex: 999 }}\n          color=\"primary\"\n          aria-label=\"add\"\n        >\n          <AddIcon />\n        </Fab>\n      </Container>\n    </>\n  );\n}\n\nconst ReorderableQuestions = props => {\n  const [items, setItems] = useState(props.questions);\n\n  return (\n    <Container maxWidth=\"sm\">\n      <List\n        values={items}\n        onChange={({ oldIndex, newIndex }) =>\n          setItems(arrayMove(items, oldIndex, newIndex))\n        }\n        renderList={({ children, props, isDragged }) => (\n          <ul\n            {...props}\n            style={{ padding: 0, cursor: isDragged ? \"grabbing\" : undefined }}\n          >\n            {children}\n          </ul>\n        )}\n        renderItem={({ value, props, isDragged, isSelected }) => (\n          <li\n            {...props}\n            style={{\n              ...props.style,\n              padding: \"0 0\",\n              // padding: \"1.5em\",\n              margin: \"1em 0em\",\n              // margin: \"0.5em 0em\",\n              listStyleType: \"none\",\n              cursor: isDragged ? \"grabbing\" : \"grab\",\n              textAlign: \"center\"\n            }}\n          >\n            {(() => {\n              switch (value.type) {\n                case \"radio\":\n                  return (\n                    <RadioTemplate\n                      question={value}\n                      items={items}\n                      setItems={setItems}\n                    />\n                  );\n                case \"checkbox\":\n                  return (\n                    <CheckboxTemplate\n                      question={value}\n                      items={items}\n                      setItems={setItems}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })()}\n          </li>\n        )}\n      />\n      <button onClick={() => console.log(JSON.stringify(items))}>\n        click me (and check console)\n      </button>\n    </Container>\n  );\n};\n\nexport default NewEdit;\n"]},"metadata":{},"sourceType":"module"}