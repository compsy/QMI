{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/Question.js\";\nimport React, { useContext, useState } from \"react\";\nimport { Divider, ExpansionPanel, ExpansionPanelDetails, ExpansionPanelSummary, Grid, Typography } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport RemoveQuestionButton from \"./buttons/RemoveQuestionButton\";\nimport EditQuestionButton from \"./buttons/EditQuestionButton\";\nimport RadioCheckboxPreview from \"./previews/RadioCheckboxPreview\";\nimport LikertPreview from \"./previews/LikertPreview\";\nimport RangePreview from \"./previews/RangePreview\";\nimport NumberPreview from \"./previews/NumberPreview\";\nimport DatePickerPreview from \"./previews/DatePickerPreview\";\nimport TimePickerPreview from \"./previews/TimePickerPreview\";\nimport TextFieldPreview from \"./previews/TextFieldPreview\";\nimport DrawingPreview from \"./previews/DrawingPreview\";\n\nconst Question = ({\n  question\n}) => {\n  const [open, setOpen] = useState(false);\n  return React.createElement(ExpansionPanel, {\n    expanded: open,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Summary, {\n    onClick: () => setOpen(!open),\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(Details, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n};\n\nexport default Question;\n\nconst Summary = ({\n  question,\n  ...props\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  return React.createElement(ExpansionPanelSummary, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 1,\n    style: {\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"left\",\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, questions.indexOf(question) + 1)), React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    style: {\n      textAlign: \"left\",\n      wordWrap: \"break-word\",\n      wordBreak: \"break-word\",\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, question.title)), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"right\",\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(ExpandMoreIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }))));\n};\n\nconst Details = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  return React.createElement(ExpansionPanelDetails, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    spacing: 1,\n    style: {\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, question.type.toUpperCase())), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, (() => {\n    switch (question.type) {\n      case \"radio\":\n        return React.createElement(RadioCheckboxPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        });\n\n      case \"checkbox\":\n        return React.createElement(RadioCheckboxPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        });\n\n      case \"likert\":\n        return React.createElement(LikertPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        });\n\n      case \"range\":\n        return React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, React.createElement(RangePreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }));\n\n      case \"number\":\n        return React.createElement(NumberPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        });\n\n      case \"date\":\n        return React.createElement(DatePickerPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        });\n\n      case \"time\":\n        return React.createElement(TimePickerPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        });\n\n      case \"text field\":\n        return React.createElement(TextFieldPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        });\n\n      case \"draw\":\n        return React.createElement(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(DrawingPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }));\n\n      default:\n        return React.createElement(RadioCheckboxPreview, {\n          question: question,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        });\n    }\n  })()), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(RemoveQuestionButton, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }), React.createElement(EditQuestionButton, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }))));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/Question.js"],"names":["React","useContext","useState","Divider","ExpansionPanel","ExpansionPanelDetails","ExpansionPanelSummary","Grid","Typography","ExpandMoreIcon","QuestionnaireContext","SettingsContext","RemoveQuestionButton","EditQuestionButton","RadioCheckboxPreview","LikertPreview","RangePreview","NumberPreview","DatePickerPreview","TimePickerPreview","TextFieldPreview","DrawingPreview","Question","question","open","setOpen","Summary","props","settings","questions","background","showGridAreas","opacity","textAlign","indexOf","wordWrap","wordBreak","title","Details","type","toUpperCase","display","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from \"react\";\nimport {\n    Divider,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    Grid,\n    Typography\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport {QuestionnaireContext} from \"../contexts/QuestionnaireContext\";\nimport {SettingsContext} from \"../contexts/SettingsContext\";\nimport RemoveQuestionButton from \"./buttons/RemoveQuestionButton\";\nimport EditQuestionButton from \"./buttons/EditQuestionButton\";\nimport RadioCheckboxPreview from \"./previews/RadioCheckboxPreview\";\nimport LikertPreview from \"./previews/LikertPreview\";\nimport RangePreview from \"./previews/RangePreview\";\nimport NumberPreview from \"./previews/NumberPreview\";\nimport DatePickerPreview from \"./previews/DatePickerPreview\";\nimport TimePickerPreview from \"./previews/TimePickerPreview\";\nimport TextFieldPreview from \"./previews/TextFieldPreview\";\nimport DrawingPreview from \"./previews/DrawingPreview\";\n\nconst Question = ({question}) => {\n    const [open, setOpen] = useState(false);\n\n    return (\n        <ExpansionPanel expanded={open}>\n            <Summary onClick={() => setOpen(!open)} question={question} />\n            <Divider />\n            <Details question={question} />\n        </ExpansionPanel>\n    );\n};\n\nexport default Question;\n\nconst Summary = ({ question, ...props }) => {\n    const { settings } = useContext(SettingsContext);\n    const { questions } = useContext(QuestionnaireContext);\n\n    return (\n        <ExpansionPanelSummary {...props}>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={1}\n                style={{\n                    background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n                    opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n                }}\n            >\n                <Grid\n                    item\n                    xs\n                    style={{\n                        textAlign: \"left\",\n                        background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n                        opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n                    }}\n                >\n                    <Typography variant=\"h5\">\n                        {questions.indexOf(question) + 1}\n                    </Typography>\n                </Grid>\n                <Grid\n                    item\n                    xs={8}\n                    style={{\n                        textAlign: \"left\",\n                        wordWrap: \"break-word\",\n                        wordBreak: \"break-word\",\n                        background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n                        opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n                    }}\n                >\n                    <Typography variant=\"h5\">{question.title}</Typography>\n                </Grid>\n                <Grid\n                    item\n                    xs\n                    style={{\n                        textAlign: \"right\",\n                        background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n                        opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n                    }}\n                >\n                    <ExpandMoreIcon />\n                </Grid>\n            </Grid>\n        </ExpansionPanelSummary>\n    );\n};\n\nconst Details = ({ question }) => {\n    const { settings } = useContext(SettingsContext);\n\n    return (\n        <ExpansionPanelDetails>\n            <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"stretch\"\n                spacing={1}\n                style={{\n                    background: settings.showGridAreas ? \"lightgrey\" : \"transparent\",\n                    opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n                }}\n            >\n                <Grid\n                    item\n                    xs\n                    style={{\n                        textAlign: \"center\",\n                        background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n                        opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n                    }}\n                >\n                    <Typography variant=\"caption\">\n                        {/* {`${question.type} options preview`.toUpperCase()} */}\n                        {question.type.toUpperCase()}\n                    </Typography>\n                </Grid>\n                <Grid\n                    item\n                    xs\n                    style={{\n                        textAlign: \"center\",\n                        background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n                        opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n                    }}\n                >\n                    {(() => {\n                        switch (question.type) {\n                            case \"radio\":\n                                return <RadioCheckboxPreview question={question}/>;\n                            case \"checkbox\":\n                                return <RadioCheckboxPreview question={question}/>;\n                            case \"likert\":\n                                return <LikertPreview question={question}/>;\n                            case \"range\":\n                                return <div\n                                    style={{\n                                        display: \"flex\",\n                                        justifyContent: \"center\",\n                                        alignItems: \"center\",\n                                    }}\n                                ><RangePreview question={question}/></div>;\n                            case \"number\":\n                                return <NumberPreview question={question}/>;\n                            case \"date\":\n                                return <DatePickerPreview question={question}/>;\n                            case \"time\":\n                                return <TimePickerPreview question={question}/>;\n                            case \"text field\":\n                                return <TextFieldPreview question={question}/>;\n                            case \"draw\":\n                                return <div\n                                        style={{\n                                            display: \"flex\",\n                                            justifyContent: \"center\",\n                                            alignItems: \"center\",\n                                        }}\n                                ><DrawingPreview question={question}/></div>;\n                            default:\n                                return <RadioCheckboxPreview question={question}/>;\n                        }\n                    })()}\n                </Grid>\n                <Grid\n                    item\n                    xs\n                    style={{\n                        textAlign: \"center\",\n                        background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n                        opacity: settings.showGridAreas ? \"0.8\" : \"1.0\"\n                    }}\n                >\n                    <RemoveQuestionButton question={question} />\n                    <EditQuestionButton question={question} />\n                </Grid>\n            </Grid>\n        </ExpansionPanelDetails>\n    );\n};"]},"metadata":{},"sourceType":"module"}