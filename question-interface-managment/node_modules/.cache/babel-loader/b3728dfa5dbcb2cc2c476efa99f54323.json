{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js\";\nimport React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport { Container, Typography, Drawer, List, ListItem, ListItemText, Box } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport AddQuestionButton from \"./buttons/AddQuestionButton\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuid } from \"uuid\";\n\nconst reorder = (list, startIndex, endIndex) => {\n  const [removed] = list.splice(startIndex, 1);\n  list.splice(endIndex, 0, removed);\n  return list;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  const item = source[droppableSource.index];\n  destination.splice(droppableDestination.index, 0, {\n    id: uuid(),\n    type: item.label,\n    title: `untitled ${item.label}`,\n    options: [\"option1\", \"option2\", \"option3\", \"option4\"]\n  });\n  return destination;\n};\n\nconst QuestionsPage = () => {\n  const [shoppingBagItems, setShoppingBagItems] = React.useState([]);\n  const onDragEnd = React.useCallback(result => {\n    const {\n      source,\n      destination\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    switch (source.droppableId) {\n      case destination.droppableId:\n        setShoppingBagItems(state => reorder(state, source.index, destination.index));\n        break;\n\n      case \"SHOP\":\n        setShoppingBagItems(state => copy(QUESTION_TYPES, state, source, destination));\n        break;\n\n      default:\n        break;\n    }\n  }, [setShoppingBagItems]);\n  return React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    items: QUESTION_TYPES,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Container, {\n    maxWidth: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(TopSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(BottomSection, {\n    items: shoppingBagItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })));\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"2em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(ToggleGridAreasButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }));\n};\n\nconst BottomSection = ({\n  items\n}) => {\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"1em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Questions\"), React.createElement(Droppable, {\n    droppableId: \"BAG\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Box, {\n    ref: provided.innerRef,\n    className: \"shopping-bag\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, items.map((question, index) => React.createElement(Draggable, {\n    key: question.id,\n    draggableId: question.id,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: provided.draggableProps.style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(Question, {\n    key: uuidv1(),\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })))), provided.placeholder)), React.createElement(AddQuestionButton2, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }));\n}; // This method is needed for rendering clones of draggables\n\n\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"li\", Object.assign({}, provided.draggableProps, provided.dragHandleProps, {\n    ref: provided.innerRef,\n    style: provided.draggableProps.style,\n    className: snapshot.isDragging ? \"dragging\" : \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), item.label));\n};\n\nconst QUESTION_TYPES = [{\n  id: uuid(),\n  label: \"checkbox\"\n}, {\n  id: uuid(),\n  label: \"radio\"\n}, {\n  id: uuid(),\n  label: \"likert\"\n}, {\n  id: uuid(),\n  label: \"range\"\n}, {\n  id: uuid(),\n  label: \"raw\"\n}, {\n  id: uuid(),\n  label: \"textarea\"\n}, {\n  id: uuid(),\n  label: \"textfield\"\n}, {\n  id: uuid(),\n  label: \"number\"\n}, {\n  id: uuid(),\n  label: \"expandable\"\n}, {\n  id: uuid(),\n  label: \"time\"\n}, {\n  id: uuid(),\n  label: \"date\"\n}, {\n  id: uuid(),\n  label: \"unsubscribed\"\n}, {\n  id: uuid(),\n  label: \"dropdown\"\n}, {\n  id: uuid(),\n  label: \"drawing\"\n}];\n\nconst Toolbar = ({\n  items\n}) => {\n  return React.createElement(Droppable, {\n    renderClone: getRenderItem(items, \"\"),\n    droppableId: \"SHOP\",\n    isDropDisabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Drawer, {\n    ref: provided.innerRef,\n    variant: \"permanent\",\n    anchor: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, items.map((item, index) => {\n    const shouldRenderClone = item.id === snapshot.draggingFromThisWith;\n    return React.createElement(React.Fragment, {\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, shouldRenderClone ? React.createElement(ListItem, {\n      button: true,\n      key: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })) : React.createElement(Draggable, {\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      key: item.label,\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(ListItem, {\n      button: true,\n      className: snapshot.isDragging ? \"dragging\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })))));\n  }))));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js"],"names":["React","useContext","v1","uuidv1","Container","Typography","Drawer","List","ListItem","ListItemText","Box","QuestionnaireContext","Question","AddQuestionButton","ToggleGridAreasButton","AddQuestionButton2","StringifiedJSONCard","DragDropContext","Draggable","Droppable","v4","uuid","reorder","list","startIndex","endIndex","removed","splice","copy","source","destination","droppableSource","droppableDestination","item","index","id","type","label","title","options","QuestionsPage","shoppingBagItems","setShoppingBagItems","useState","onDragEnd","useCallback","result","droppableId","state","QUESTION_TYPES","TopSection","textAlign","margin","BottomSection","items","questions","provided","snapshot","innerRef","map","question","draggableProps","dragHandleProps","style","placeholder","getRenderItem","className","rubric","isDragging","Toolbar","shouldRenderClone","draggingFromThisWith"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport {\n  Container,\n  Typography,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  Box\n} from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport AddQuestionButton from \"./buttons/AddQuestionButton\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuid } from \"uuid\";\n\nconst reorder = (list, startIndex, endIndex) => {\n  const [removed] = list.splice(startIndex, 1);\n  list.splice(endIndex, 0, removed);\n  return list;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  const item = source[droppableSource.index];\n  destination.splice(droppableDestination.index, 0, {\n    id: uuid(),\n    type: item.label,\n    title: `untitled ${item.label}`,\n    options: [\"option1\", \"option2\", \"option3\", \"option4\"]\n  });\n  return destination;\n};\n\nconst QuestionsPage = () => {\n  const [shoppingBagItems, setShoppingBagItems] = React.useState([]);\n  const onDragEnd = React.useCallback(\n    result => {\n      const { source, destination } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      switch (source.droppableId) {\n        case destination.droppableId:\n          setShoppingBagItems(state =>\n            reorder(state, source.index, destination.index)\n          );\n          break;\n        case \"SHOP\":\n          setShoppingBagItems(state =>\n            copy(QUESTION_TYPES, state, source, destination)\n          );\n          break;\n        default:\n          break;\n      }\n    },\n    [setShoppingBagItems]\n  );\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Toolbar items={QUESTION_TYPES} />\n      <Container maxWidth=\"sm\">\n        <TopSection />\n        <BottomSection items={shoppingBagItems} />\n      </Container>\n    </DragDropContext>\n  );\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"2em auto\" }}>\n      {/* <AddQuestionButton /> */}\n      <ToggleGridAreasButton />\n      {/* <StringifiedJSONCard /> */}\n    </Container>\n  );\n};\n\nconst BottomSection = ({ items }) => {\n  const { questions } = useContext(QuestionnaireContext);\n\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"1em auto\" }}>\n      <Typography variant=\"h4\" style={{ margin: \"1em 0\" }}>\n        Questions\n      </Typography>\n      <Droppable droppableId=\"BAG\">\n        {(provided, snapshot) => (\n          <Box ref={provided.innerRef} className=\"shopping-bag\">\n            {items.map((question, index) => (\n              <Draggable\n                key={question.id}\n                draggableId={question.id}\n                index={index}\n              >\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    style={provided.draggableProps.style}\n                  >\n                    <Question key={uuidv1()} question={question} />\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </Box>\n        )}\n      </Droppable>\n      <AddQuestionButton2 />\n    </Container>\n  );\n};\n\n// This method is needed for rendering clones of draggables\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return (\n    <React.Fragment>\n      <li\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        style={provided.draggableProps.style}\n        className={snapshot.isDragging ? \"dragging\" : \"\"}\n      >\n        {item.label}\n      </li>\n    </React.Fragment>\n  );\n};\n\nconst QUESTION_TYPES = [\n  { id: uuid(), label: \"checkbox\" },\n  { id: uuid(), label: \"radio\" },\n  { id: uuid(), label: \"likert\" },\n  { id: uuid(), label: \"range\" },\n  { id: uuid(), label: \"raw\" },\n  { id: uuid(), label: \"textarea\" },\n  { id: uuid(), label: \"textfield\" },\n  { id: uuid(), label: \"number\" },\n  { id: uuid(), label: \"expandable\" },\n  { id: uuid(), label: \"time\" },\n  { id: uuid(), label: \"date\" },\n  { id: uuid(), label: \"unsubscribed\" },\n  { id: uuid(), label: \"dropdown\" },\n  { id: uuid(), label: \"drawing\" }\n];\n\nconst Toolbar = ({ items }) => {\n  return (\n    <Droppable\n      renderClone={getRenderItem(items, \"\")}\n      droppableId=\"SHOP\"\n      isDropDisabled={true}\n    >\n      {(provided, snapshot) => (\n        <Drawer ref={provided.innerRef} variant=\"permanent\" anchor=\"left\">\n          <List>\n            {items.map((item, index) => {\n              const shouldRenderClone =\n                item.id === snapshot.draggingFromThisWith;\n              return (\n                <React.Fragment key={item.id}>\n                  {shouldRenderClone ? (\n                    <ListItem button key={item.label}>\n                      <ListItemText primary={item.label} />\n                    </ListItem>\n                  ) : (\n                    <Draggable draggableId={item.id} index={index}>\n                      {(provided, snapshot) => (\n                        <div key={item.label}\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}>\n                          \n                        <ListItem\n                          button\n                          \n                          className={snapshot.isDragging ? \"dragging\" : \"\"}\n                        >\n                          <ListItemText primary={item.label} />\n                        </ListItem>\n                        </div>\n                      )}\n                    </Draggable>\n                  )}\n                </React.Fragment>\n              );\n            })}\n          </List>\n        </Drawer>\n      )}\n    </Droppable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}