{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/properties/TextArrayTemplate.js\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectProperty, setTextArrayField, setTextArrayElement, setProperty, removeOption } from \"../../features/questionProperties/questionSlice\";\nimport { TextField, InputAdornment, IconButton, Button, Box, Menu, MenuItem, makeStyles, FormControl, InputLabel, FilledInput, Paper, Slide, Grid, Typography, Tooltip, FormControlLabel, Switch } from \"@material-ui/core\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport { CLEAN_SUPER_OPTION } from \"../../utils\"; // import store from \"../../app/store\";\n\nimport { useContext } from \"react\";\nimport { QuestionnaireContext } from \"../../contexts/QuestionnaireContext\";\nconst useStyles = makeStyles(theme => ({\n  boxy: {\n    borderRadius: 0\n  },\n  paper: {\n    height: \"250px\",\n    overflow: \"auto\",\n    wordWrap: \"break-word\",\n    wordBreak: \"break-word\"\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    height: \"50px\"\n  },\n  noneBox: {\n    width: \"100%\",\n    height: \"100%\"\n  },\n  menuItem: {\n    outline: \"none\"\n  }\n}));\nexport const TextArrayProperty = ({\n  name,\n  propertyName\n}) => {\n  const property = useSelector(selectProperty(propertyName));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (property === undefined) {\n      dispatch(setProperty({\n        property: propertyName,\n        value: []\n      }));\n    }\n  }, [property]);\n\n  const handleAddOptionClick = () => {\n    dispatch(setProperty({\n      property: propertyName,\n      value: [...property, \"\"]\n    }));\n  };\n\n  const classes = useStyles();\n  return React.createElement(React.Fragment, null, React.createElement(Paper, {\n    elevation: 0,\n    variant: \"outlined\",\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, property.length > 0 ? property.map((_, index) => React.createElement(EachOptioni, {\n    index: index,\n    name: name,\n    propertyName: propertyName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  })) : React.createElement(Grid, {\n    className: classes.noneBox,\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    style: {\n      userSelect: \"none\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, `no ${propertyName} provided`)))), React.createElement(Box, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(AddOptionButton, {\n    onClick: handleAddOptionClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })));\n};\n\nfunction EachOptioni({\n  index,\n  name,\n  propertyName\n}) {\n  const type = useSelector(selectProperty(\"type\"));\n  const option = useSelector(state => state.question[propertyName][index]);\n  const dispatch = useDispatch(); // makes sure the options are in object format (unless range type)\n\n  useEffect(() => {\n    if (type !== \"range\" && typeof option === \"string\") {\n      dispatch(setTextArrayElement({\n        property: propertyName,\n        index: index,\n        value: { ...CLEAN_SUPER_OPTION,\n          title: option\n        }\n      }));\n    }\n  }, [option]);\n\n  const handleChange = (index, event) => {\n    if (type !== \"range\") {\n      dispatch(setTextArrayElement({\n        property: propertyName,\n        index: index,\n        value: { ...option,\n          title: event.target.value\n        }\n      }));\n    } else {\n      dispatch(setTextArrayField({\n        property: propertyName,\n        index: index,\n        value: event.target.value\n      }));\n    }\n  };\n\n  const handleRemoveOptionClick = index => dispatch(removeOption({\n    property: propertyName,\n    index: index\n  }));\n\n  const classes = useStyles();\n  return (// <Slide in direction=\"right\">\n    React.createElement(FormControl, {\n      fullWidth: true,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      variant: \"filled\",\n      style: {\n        userSelect: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, type === \"range\" ? `Label ${index + 1}` : `Option ${index + 1}`), React.createElement(FilledInput // required\n    , {\n      className: classes.boxy,\n      autoFocus: true,\n      autoComplete: \"off\",\n      type: \"text\",\n      id: `option-${index + 1}`,\n      placeholder: type === \"range\" ? \"Enter range label here..\" : \"Enter option title here..\",\n      value: (type === \"range\" ? option : option[\"title\"]) || \"\",\n      onChange: e => handleChange(index, e),\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, type !== \"range\" && React.createElement(React.Fragment, null, React.createElement(IconButton, {\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(VisibilityOffIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })), React.createElement(EachOptionMenu, {\n        propertyName: propertyName,\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        size: \"small\",\n        onClick: () => handleRemoveOptionClick(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(DeleteIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })) // </Slide>\n\n  );\n}\n\nconst AddOptionButton = props => {\n  const type = useSelector(selectProperty(\"type\"));\n  const classes = useStyles();\n  return React.createElement(Tooltip, {\n    title: type === \"range\" ? \"add a label\" : \"add an option\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(Button, Object.assign({\n    disableElevation: true,\n    variant: \"contained\",\n    fullWidth: true,\n    color: \"primary\",\n    className: classes.button\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }), React.createElement(AddIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  })));\n};\n\nconst EachOptionMenu = ({\n  propertyName,\n  index\n}) => {\n  // MENU STUFF\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleMenuClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  }; // ----------\n\n\n  const option = useSelector(state => state.question[propertyName][index]);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  return React.createElement(React.Fragment, null, React.createElement(IconButton, {\n    size: \"small\",\n    onClick: handleMenuClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, React.createElement(MoreHorizIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  })), React.createElement(Menu, {\n    id: \"simple-menu\",\n    keepMounted: true,\n    anchorEl: anchorEl,\n    open: Boolean(anchorEl),\n    onClose: handleMenuClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    className: classes.menuItem,\n    button: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    variant: \"filled\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, \"Numeric value\"), React.createElement(FilledInput, {\n    required: true,\n    autoFocus: true,\n    autoComplete: \"off\",\n    type: \"number\",\n    placeholder: \"Enter an integer (or a float)..\",\n    value: option[\"numeric_value\"] || \"\",\n    onChange: e => dispatch(setTextArrayElement({\n      property: propertyName,\n      index: index,\n      value: { ...option,\n        numeric_value: Number(e.target.value)\n      }\n    })),\n    endAdornment: React.createElement(InputAdornment, {\n      position: \"end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      color: \"primary\" // id={`tooltip-switch`}\n      // checked={open}\n      // onClick={handleClick}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }))), React.createElement(MenuItem, {\n    className: classes.menuItem,\n    button: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    variant: \"filled\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, \"Option tooltip\"), React.createElement(FilledInput, {\n    required: true,\n    autoFocus: true,\n    autoComplete: \"off\",\n    type: \"text\",\n    placeholder: \"Enter option tooltip text here..\",\n    value: option[\"tooltip\"] || \"\",\n    onChange: e => dispatch(setTextArrayElement({\n      property: propertyName,\n      index: index,\n      value: { ...option,\n        tooltip: e.target.value\n      }\n    })),\n    endAdornment: React.createElement(InputAdornment, {\n      position: \"end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      color: \"primary\" // id={`tooltip-switch`}\n      // checked={open}\n      // onClick={handleClick}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }))), React.createElement(MenuItem, {\n    className: classes.menuItem,\n    button: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, React.createElement(FormControlLabel, {\n    style: {\n      userSelect: \"none\"\n    },\n    label: \"Stop subscription\",\n    control: React.createElement(Switch, {\n      checked: option[\"stop_subscription\"] || false,\n      color: \"primary\",\n      onChange: e => dispatch(setTextArrayElement({\n        property: propertyName,\n        index: index,\n        value: { ...option,\n          stop_subscription: e.target.checked\n        }\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  }))));\n};\n\nconst EachOptionShows = () => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  }; // Access store to get hidden: false questions\n  // const shown = store.getState();\n\n\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  const hidden = questions.filter(q => q.hidden === true);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    size: \"small\",\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  }, React.createElement(VisibilityIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362\n    },\n    __self: this\n  })), React.createElement(Menu, {\n    id: \"simple-menu\",\n    anchorEl: anchorEl,\n    keepMounted: true,\n    open: Boolean(anchorEl),\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364\n    },\n    __self: this\n  }, hidden && hidden.map((item, i) => {\n    return React.createElement(MenuItem, {\n      button: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, `Question v${i + 1}: ${item.title && item.title}`);\n  })));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/properties/TextArrayTemplate.js"],"names":["React","useEffect","useSelector","useDispatch","selectProperty","setTextArrayField","setTextArrayElement","setProperty","removeOption","TextField","InputAdornment","IconButton","Button","Box","Menu","MenuItem","makeStyles","FormControl","InputLabel","FilledInput","Paper","Slide","Grid","Typography","Tooltip","FormControlLabel","Switch","MoreHorizIcon","DeleteIcon","AddIcon","VisibilityIcon","VisibilityOffIcon","CLEAN_SUPER_OPTION","useContext","QuestionnaireContext","useStyles","theme","boxy","borderRadius","paper","height","overflow","wordWrap","wordBreak","button","marginTop","spacing","noneBox","width","menuItem","outline","TextArrayProperty","name","propertyName","property","dispatch","undefined","value","handleAddOptionClick","classes","length","map","_","index","userSelect","EachOptioni","type","option","state","question","title","handleChange","event","target","handleRemoveOptionClick","e","AddOptionButton","props","EachOptionMenu","anchorEl","setAnchorEl","useState","handleMenuClick","currentTarget","handleMenuClose","Boolean","numeric_value","Number","tooltip","stop_subscription","checked","EachOptionShows","handleClick","handleClose","questions","hidden","filter","q","item","i"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectProperty,\n  setTextArrayField,\n  setTextArrayElement,\n  setProperty,\n  removeOption,\n} from \"../../features/questionProperties/questionSlice\";\nimport {\n  TextField,\n  InputAdornment,\n  IconButton,\n  Button,\n  Box,\n  Menu,\n  MenuItem,\n  makeStyles,\n  FormControl,\n  InputLabel,\n  FilledInput,\n  Paper,\n  Slide,\n  Grid,\n  Typography,\n  Tooltip,\n  FormControlLabel,\n  Switch,\n} from \"@material-ui/core\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport { CLEAN_SUPER_OPTION } from \"../../utils\";\n// import store from \"../../app/store\";\nimport { useContext } from \"react\";\nimport { QuestionnaireContext } from \"../../contexts/QuestionnaireContext\";\n\nconst useStyles = makeStyles((theme) => ({\n  boxy: {\n    borderRadius: 0,\n  },\n  paper: {\n    height: \"250px\",\n    overflow: \"auto\",\n    wordWrap: \"break-word\",\n    wordBreak: \"break-word\",\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    height: \"50px\",\n  },\n  noneBox: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  menuItem: {\n    outline: \"none\",\n  },\n}));\n\nexport const TextArrayProperty = ({ name, propertyName }) => {\n  const property = useSelector(selectProperty(propertyName));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (property === undefined) {\n      dispatch(setProperty({ property: propertyName, value: [] }));\n    }\n  }, [property]);\n\n  const handleAddOptionClick = () => {\n    dispatch(\n      setProperty({\n        property: propertyName,\n        value: [...property, \"\"],\n      })\n    );\n  };\n\n  const classes = useStyles();\n  return (\n    <>\n      <Paper elevation={0} variant=\"outlined\" className={classes.paper}>\n        {property.length > 0 ? (\n          property.map((_, index) => (\n            <EachOptioni\n              index={index}\n              name={name}\n              propertyName={propertyName}\n            />\n          ))\n        ) : (\n          <Grid\n            className={classes.noneBox}\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item>\n              <Typography\n                variant=\"body1\"\n                style={{ userSelect: \"none\" }}\n              >{`no ${propertyName} provided`}</Typography>\n            </Grid>\n          </Grid>\n        )}\n      </Paper>\n      <Box textAlign=\"center\">\n        <AddOptionButton onClick={handleAddOptionClick} />\n      </Box>\n    </>\n  );\n};\n\nfunction EachOptioni({ index, name, propertyName }) {\n  const type = useSelector(selectProperty(\"type\"));\n  const option = useSelector((state) => state.question[propertyName][index]);\n  const dispatch = useDispatch();\n\n  // makes sure the options are in object format (unless range type)\n  useEffect(() => {\n    if (type !== \"range\" && typeof option === \"string\") {\n      dispatch(\n        setTextArrayElement({\n          property: propertyName,\n          index: index,\n          value: { ...CLEAN_SUPER_OPTION, title: option },\n        })\n      );\n    }\n  }, [option]);\n\n  const handleChange = (index, event) => {\n    if (type !== \"range\") {\n      dispatch(\n        setTextArrayElement({\n          property: propertyName,\n          index: index,\n          value: { ...option, title: event.target.value },\n        })\n      );\n    } else {\n      dispatch(\n        setTextArrayField({\n          property: propertyName,\n          index: index,\n          value: event.target.value,\n        })\n      );\n    }\n  };\n\n  const handleRemoveOptionClick = (index) =>\n    dispatch(removeOption({ property: propertyName, index: index }));\n\n  const classes = useStyles();\n  return (\n    // <Slide in direction=\"right\">\n    <FormControl fullWidth required>\n      <InputLabel variant=\"filled\" style={{ userSelect: \"none\" }}>\n        {type === \"range\" ? `Label ${index + 1}` : `Option ${index + 1}`}\n      </InputLabel>\n      <FilledInput\n        // required\n        className={classes.boxy}\n        autoFocus\n        autoComplete=\"off\"\n        type=\"text\"\n        id={`option-${index + 1}`}\n        placeholder={\n          type === \"range\"\n            ? \"Enter range label here..\"\n            : \"Enter option title here..\"\n        }\n        value={(type === \"range\" ? option : option[\"title\"]) || \"\"}\n        onChange={(e) => handleChange(index, e)}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            {type !== \"range\" && (\n              <>\n                {/* <EachOptionShows /> */}\n                <IconButton size=\"small\">\n                  <VisibilityOffIcon />\n                </IconButton>\n                <EachOptionMenu propertyName={propertyName} index={index} />\n              </>\n            )}\n            <IconButton\n              size=\"small\"\n              onClick={() => handleRemoveOptionClick(index)}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n    </FormControl>\n    // </Slide>\n  );\n}\n\nconst AddOptionButton = (props) => {\n  const type = useSelector(selectProperty(\"type\"));\n  const classes = useStyles();\n  return (\n    <Tooltip title={type === \"range\" ? \"add a label\" : \"add an option\"}>\n      <Button\n        disableElevation\n        variant=\"contained\"\n        fullWidth\n        color=\"primary\"\n        className={classes.button}\n        {...props}\n      >\n        <AddIcon />\n      </Button>\n    </Tooltip>\n  );\n};\n\nconst EachOptionMenu = ({ propertyName, index }) => {\n  // MENU STUFF\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const handleMenuClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n  // ----------\n\n  const option = useSelector((state) => state.question[propertyName][index]);\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <IconButton size=\"small\" onClick={handleMenuClick}>\n        <MoreHorizIcon />\n      </IconButton>\n      <Menu\n        id=\"simple-menu\"\n        keepMounted\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n      >\n        {/* switch case without break for options */}\n        <MenuItem className={classes.menuItem} button={false}>\n          <FormControl fullWidth>\n            <InputLabel variant=\"filled\">Numeric value</InputLabel>\n            <FilledInput\n              required\n              autoFocus\n              autoComplete=\"off\"\n              type=\"number\"\n              placeholder=\"Enter an integer (or a float)..\"\n              value={option[\"numeric_value\"] || \"\"}\n              onChange={(e) =>\n                dispatch(\n                  setTextArrayElement({\n                    property: propertyName,\n                    index: index,\n                    value: { ...option, numeric_value: Number(e.target.value) },\n                  })\n                )\n              }\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <Switch\n                    color=\"primary\"\n                    // id={`tooltip-switch`}\n                    // checked={open}\n                    // onClick={handleClick}\n                  />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n        </MenuItem>\n        <MenuItem className={classes.menuItem} button={false}>\n          <FormControl fullWidth>\n            <InputLabel variant=\"filled\">Option tooltip</InputLabel>\n            <FilledInput\n              required\n              autoFocus\n              autoComplete=\"off\"\n              type=\"text\"\n              placeholder=\"Enter option tooltip text here..\"\n              value={option[\"tooltip\"] || \"\"}\n              onChange={(e) =>\n                dispatch(\n                  setTextArrayElement({\n                    property: propertyName,\n                    index: index,\n                    value: { ...option, tooltip: e.target.value },\n                  })\n                )\n              }\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <Switch\n                    color=\"primary\"\n                    // id={`tooltip-switch`}\n                    // checked={open}\n                    // onClick={handleClick}\n                  />\n                </InputAdornment>\n              }\n            />\n          </FormControl>\n        </MenuItem>\n        <MenuItem className={classes.menuItem} button={false}>\n          <FormControlLabel\n            style={{ userSelect: \"none\" }}\n            label=\"Stop subscription\"\n            control={\n              <Switch\n                checked={option[\"stop_subscription\"] || false}\n                color=\"primary\"\n                onChange={(e) =>\n                  dispatch(\n                    setTextArrayElement({\n                      property: propertyName,\n                      index: index,\n                      value: { ...option, stop_subscription: e.target.checked },\n                    })\n                  )\n                }\n              />\n            }\n          />\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nconst EachOptionShows = () => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  // Access store to get hidden: false questions\n  // const shown = store.getState();\n  const { questions } = useContext(QuestionnaireContext);\n  const hidden = questions.filter((q) => q.hidden === true);\n\n  return (\n    <div>\n      <IconButton size=\"small\" onClick={handleClick}>\n        <VisibilityIcon />\n      </IconButton>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {/* <MenuItem onClick={handleClose}>Profile</MenuItem> */}\n        {hidden && hidden.map((item, i) => {\n          return (\n            <MenuItem button={false}>\n              {`Question v${i + 1}: ${item.title && item.title}`}\n            </MenuItem>\n          );\n        })}\n      </Menu>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}