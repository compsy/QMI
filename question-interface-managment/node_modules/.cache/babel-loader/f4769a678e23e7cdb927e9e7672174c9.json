{"ast":null,"code":"const postprocessCheckbox = question => {\n  // const preprocessedOptions = () => {\n  //   return question.options;\n  // };\n  const processedOptionsCheckbox = () => {\n    return question.options.map(q => {\n      return { ...q,\n        numeric_value: undefined\n      };\n    });\n  }; // prettier-ignore\n\n\n  return {\n    // ...CLEAN_SUPER_QUESTION,\n    id: question.id,\n    type: question.type,\n    // required\n    title: question.title !== undefined ? question.title : \"untitled checkbox\",\n    options: question.options !== undefined ? question.type === \"checkbox\" ? processedOptionsCheckbox() : question.options : [],\n    // optional\n    tooltip: question.tooltip !== undefined ? question.tooltip : undefined,\n    required: question.required !== undefined ? question.required : undefined,\n    hidden: question.hidden !== undefined ? question.hidden : undefined,\n    section_start: question.section_start !== undefined ? question.section_start : undefined,\n    section_end: question.section_end !== undefined ? question.section_end : undefined,\n    show_otherwise: question.show_otherwise !== undefined ? question.show_otherwise : undefined,\n    otherwise_label: question.otherwise_label !== undefined ? question.otherwise_label : undefined,\n    otherwise_tooltip: question.otherwise_tooltip !== undefined ? question.otherwise_tooltip : undefined\n  };\n};\n\nconst postprocessMap = {\n  checkbox: postprocessCheckbox,\n  radio: postprocessCheckbox\n};\nexport const postprocessQuestion = question => {\n  return postprocessMap[question.type](question);\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/properties/utils.js"],"names":["postprocessCheckbox","question","processedOptionsCheckbox","options","map","q","numeric_value","undefined","id","type","title","tooltip","required","hidden","section_start","section_end","show_otherwise","otherwise_label","otherwise_tooltip","postprocessMap","checkbox","radio","postprocessQuestion"],"mappings":"AAAA,MAAMA,mBAAmB,GAAIC,QAAD,IAAc;AACxC;AACA;AACA;AAEA,QAAMC,wBAAwB,GAAG,MAAM;AACrC,WAAOD,QAAQ,CAACE,OAAT,CAAiBC,GAAjB,CAAsBC,CAAD,IAAO;AACjC,aAAO,EACL,GAAGA,CADE;AAELC,QAAAA,aAAa,EAAEC;AAFV,OAAP;AAID,KALM,CAAP;AAMD,GAPD,CALwC,CAaxC;;;AACA,SAAO;AACL;AACAC,IAAAA,EAAE,EAAEP,QAAQ,CAACO,EAFR;AAGLC,IAAAA,IAAI,EAAER,QAAQ,CAACQ,IAHV;AAIL;AACAC,IAAAA,KAAK,EAAET,QAAQ,CAACS,KAAT,KAAmBH,SAAnB,GAA+BN,QAAQ,CAACS,KAAxC,GAAgD,mBALlD;AAMLP,IAAAA,OAAO,EAAEF,QAAQ,CAACE,OAAT,KAAqBI,SAArB,GAAiCN,QAAQ,CAACQ,IAAT,KAAkB,UAAlB,GAA+BP,wBAAwB,EAAvD,GAA4DD,QAAQ,CAACE,OAAtG,GAAgH,EANpH;AAOL;AACAQ,IAAAA,OAAO,EAAEV,QAAQ,CAACU,OAAT,KAAqBJ,SAArB,GAAiCN,QAAQ,CAACU,OAA1C,GAAoDJ,SARxD;AASLK,IAAAA,QAAQ,EAAEX,QAAQ,CAACW,QAAT,KAAsBL,SAAtB,GAAkCN,QAAQ,CAACW,QAA3C,GAAsDL,SAT3D;AAULM,IAAAA,MAAM,EAAEZ,QAAQ,CAACY,MAAT,KAAoBN,SAApB,GAAgCN,QAAQ,CAACY,MAAzC,GAAkDN,SAVrD;AAWLO,IAAAA,aAAa,EAAEb,QAAQ,CAACa,aAAT,KAA2BP,SAA3B,GAAuCN,QAAQ,CAACa,aAAhD,GAAgEP,SAX1E;AAYLQ,IAAAA,WAAW,EAAEd,QAAQ,CAACc,WAAT,KAAyBR,SAAzB,GAAqCN,QAAQ,CAACc,WAA9C,GAA4DR,SAZpE;AAaLS,IAAAA,cAAc,EAAEf,QAAQ,CAACe,cAAT,KAA4BT,SAA5B,GAAwCN,QAAQ,CAACe,cAAjD,GAAkET,SAb7E;AAcLU,IAAAA,eAAe,EAAEhB,QAAQ,CAACgB,eAAT,KAA6BV,SAA7B,GAAyCN,QAAQ,CAACgB,eAAlD,GAAoEV,SAdhF;AAeLW,IAAAA,iBAAiB,EAAEjB,QAAQ,CAACiB,iBAAT,KAA+BX,SAA/B,GAA2CN,QAAQ,CAACiB,iBAApD,GAAwEX;AAftF,GAAP;AAiBD,CA/BD;;AAiCA,MAAMY,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAEpB,mBADW;AAErBqB,EAAAA,KAAK,EAAErB;AAFc,CAAvB;AAKA,OAAO,MAAMsB,mBAAmB,GAAIrB,QAAD,IAAc;AAC/C,SAAOkB,cAAc,CAAClB,QAAQ,CAACQ,IAAV,CAAd,CAA8BR,QAA9B,CAAP;AACD,CAFM","sourcesContent":["const postprocessCheckbox = (question) => {\n  // const preprocessedOptions = () => {\n  //   return question.options;\n  // };\n\n  const processedOptionsCheckbox = () => {\n    return question.options.map((q) => {\n      return {\n        ...q,\n        numeric_value: undefined,\n      };\n    });\n  };\n  // prettier-ignore\n  return {\n    // ...CLEAN_SUPER_QUESTION,\n    id: question.id,\n    type: question.type,\n    // required\n    title: question.title !== undefined ? question.title : \"untitled checkbox\",\n    options: question.options !== undefined ? question.type === \"checkbox\" ? processedOptionsCheckbox() : question.options : [],\n    // optional\n    tooltip: question.tooltip !== undefined ? question.tooltip : undefined,\n    required: question.required !== undefined ? question.required : undefined,\n    hidden: question.hidden !== undefined ? question.hidden : undefined,\n    section_start: question.section_start !== undefined ? question.section_start : undefined,\n    section_end: question.section_end !== undefined ? question.section_end : undefined,\n    show_otherwise: question.show_otherwise !== undefined ? question.show_otherwise : undefined,\n    otherwise_label: question.otherwise_label !== undefined ? question.otherwise_label : undefined,\n    otherwise_tooltip: question.otherwise_tooltip !== undefined ? question.otherwise_tooltip : undefined,\n  };\n};\n\nconst postprocessMap = {\n  checkbox: postprocessCheckbox,\n  radio: postprocessCheckbox,\n};\n\nexport const postprocessQuestion = (question) => {\n  return postprocessMap[question.type](question);\n};"]},"metadata":{},"sourceType":"module"}