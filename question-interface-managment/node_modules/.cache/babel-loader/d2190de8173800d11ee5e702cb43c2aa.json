{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Box, Dialog, DialogTitle, Tooltip, IconButton, DialogContent, TextField, DialogActions, Button, InputAdornment, Grid, Typography, Select, MenuItem, InputLabel, FormControl, makeStyles } from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"./contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"./contexts/SettingsContext\";\nimport NewQuestionContextProvider, { NewQuestionContext } from \"./contexts/NewQuestionContext\";\nimport ToggleGridAreasButton from \"./ToggleGridAreasButton\";\n\nconst EditDialog = ({\n  question,\n  open,\n  setOpen\n}) => {\n  const [type, setType] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [options, setOptions] = useState([]);\n  const [optionAdded, setOptionAdded] = useState(false);\n  const {\n    questions,\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // load question to editor state on dialog open\n\n  useEffect(() => {\n    // setType(question.type);\n    // setTitle(question.title);\n    // setOptions([...question.options]);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...question\n      }\n    });\n  }, [open]); // dispatch action to questionnaireReducer to update question\n\n  const handleSubmit = event => {\n    event.preventDefault(); // const newQuestion = {\n    //   ...question,\n    //   title: title,\n    //   type: type,\n    //   options: options\n    // };\n\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: newQuestion\n    });\n    setOpen(false); // setTitle(\"\");\n\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: {\n        title: \"\",\n        options: []\n      }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOptionAdded(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(ToggleGridAreasButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      padding: \"1em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(DialogBody, {\n    optionAdded: optionAdded,\n    setOptionAdded: setOptionAdded,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(DialogFooter, {\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }))));\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext);\n  return React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: \"right\",\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"type-select-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Type\"), React.createElement(Select, {\n    autoWidth: true,\n    labelId: \"type-select-label\",\n    value: newQuestion.type,\n    onChange: e => newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        type: e.target.value\n      }\n    }),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"Radio\"), React.createElement(MenuItem, {\n    value: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Checkbox\"), React.createElement(MenuItem, {\n    value: \"range\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Range\"), React.createElement(MenuItem, {\n    value: \"likert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Likert\"))), React.createElement(Grid, {\n    container: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: \"left\",\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Question \", questions.indexOf(question) + 1))));\n};\n\nconst DialogBody = ({\n  optionAdded,\n  setOptionAdded\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // update correct option on text input changes\n\n  const handleChange = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions[index] = event.target.value; // setOptions(newOptions);\n\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: newOptions\n      }\n    });\n  };\n\n  const handleAddOptionClick = event => {\n    // setOptions([...options, \"\"]);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: [...newQuestion.options, \"\"]\n      }\n    });\n    setOptionAdded(true);\n  };\n\n  const handleRemoveOptionClick = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions.splice(index, 1); // setOptions(newOptions);\n\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: newOptions\n      }\n    });\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoFocus: true,\n    required: true,\n    autoComplete: \"off\",\n    margin: \"dense\",\n    id: \"title\",\n    label: \"Title\",\n    type: \"text\",\n    fullWidth: true,\n    value: newQuestion.title,\n    onChange: e => newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        title: e.target.value\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: \"center\",\n      margin: \"1em 0 0 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleAddOptionClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"add \", newQuestion.type === \"range\" ? \"label\" : \"option\")), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, React.createElement(Box, {\n    fullWidth: true // height=\"200px\"\n    ,\n    height: \"200px\",\n    overflow: \"scroll\",\n    style: {\n      margin: \"0\",\n      overflowX: \"hidden\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, newQuestion.options.map((option, index) => React.createElement(TextField, {\n    autoFocus: optionAdded ? index === newQuestion.options.length - 1 ? true : false : false,\n    style: {\n      margin: \"0.2em 0\"\n    },\n    placeholder: newQuestion.type === \"range\" ? \"label\" : \"option\",\n    type: \"text\",\n    fullWidth: true,\n    value: option,\n    onChange: e => handleChange(index, e),\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        margin: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        edge: \"end\",\n        onClick: e => handleRemoveOptionClick(index, e),\n        style: {\n          margin: \"0\",\n          padding: \"0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(DeleteIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      })))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  })))));\n};\n\nconst DialogFooter = ({\n  handleClose\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  return React.createElement(React.Fragment, null, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, \"submit\")), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, \"cancel\")));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js"],"names":["React","useState","useContext","useEffect","Box","Dialog","DialogTitle","Tooltip","IconButton","DialogContent","TextField","DialogActions","Button","InputAdornment","Grid","Typography","Select","MenuItem","InputLabel","FormControl","makeStyles","EditIcon","DeleteIcon","QuestionnaireContext","SettingsContext","NewQuestionContextProvider","NewQuestionContext","ToggleGridAreasButton","EditDialog","question","open","setOpen","type","setType","title","setTitle","options","setOptions","optionAdded","setOptionAdded","questions","dispatch","settings","newQuestion","newQuestionDispatch","handleSubmit","event","preventDefault","id","new","handleClose","padding","background","showGridAreas","DialogHeader","textAlign","opacity","e","target","value","indexOf","DialogBody","handleChange","index","newOptions","handleAddOptionClick","handleRemoveOptionClick","splice","margin","overflowX","map","option","length","endAdornment","DialogFooter"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  Tooltip,\n  IconButton,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  InputAdornment,\n  Grid,\n  Typography,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  makeStyles\n} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"./contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"./contexts/SettingsContext\";\nimport NewQuestionContextProvider, {\n  NewQuestionContext\n} from \"./contexts/NewQuestionContext\";\nimport ToggleGridAreasButton from \"./ToggleGridAreasButton\";\n\nconst EditDialog = ({ question, open, setOpen }) => {\n  const [type, setType] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [options, setOptions] = useState([]);\n  const [optionAdded, setOptionAdded] = useState(false);\n  const { questions, dispatch } = useContext(QuestionnaireContext);\n  const { settings } = useContext(SettingsContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    // setType(question.type);\n    // setTitle(question.title);\n    // setOptions([...question.options]);\n    newQuestionDispatch({ type: \"SET_QUESTION\", question: { ...question } });\n  }, [open]);\n\n  // dispatch action to questionnaireReducer to update question\n  const handleSubmit = event => {\n    event.preventDefault();\n    // const newQuestion = {\n    //   ...question,\n    //   title: title,\n    //   type: type,\n    //   options: options\n    // };\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n    setOpen(false);\n    // setTitle(\"\");\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { title: \"\", options: [] }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOptionAdded(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      <ToggleGridAreasButton />\n      <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n          style={{\n            padding: \"2em\",\n            background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n          }}\n        >\n          <DialogHeader question={question} />\n          <DialogBody\n            optionAdded={optionAdded}\n            setOptionAdded={setOptionAdded}\n          />\n          <DialogFooter handleClose={handleClose} />\n        </Grid>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  return (\n    <Grid\n      item\n      xs={12}\n      style={{\n        textAlign: \"right\",\n        background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n        opacity: settings.showGridAreas ? 0.9 : 1.0\n      }}\n    >\n      <FormControl>\n        <InputLabel id=\"type-select-label\">Type</InputLabel>\n        <Select\n          autoWidth\n          labelId=\"type-select-label\"\n          value={newQuestion.type}\n          onChange={e =>\n            newQuestionDispatch({\n              type: \"SET_QUESTION\",\n              question: { ...newQuestion, type: e.target.value }\n            })\n          }\n          style={{ textAlign: \"left\" }}\n        >\n          <MenuItem value=\"radio\">Radio</MenuItem>\n          <MenuItem value=\"checkbox\">Checkbox</MenuItem>\n          <MenuItem value=\"range\">Range</MenuItem>\n          <MenuItem value=\"likert\">Likert</MenuItem>\n        </Select>\n      </FormControl>\n      <Grid container=\"row\" justify=\"center\" alignItems=\"center\">\n        <Grid\n          item\n          xs={12}\n          style={{\n            textAlign: \"left\",\n            background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n            opacity: settings.showGridAreas ? 0.9 : 1.0\n          }}\n        >\n          <Typography variant=\"h6\">\n            Question {questions.indexOf(question) + 1}\n          </Typography>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DialogBody = ({ optionAdded, setOptionAdded }) => {\n  const { settings } = useContext(SettingsContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // update correct option on text input changes\n  const handleChange = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions[index] = event.target.value;\n    // setOptions(newOptions);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: newOptions }\n    });\n  };\n\n  const handleAddOptionClick = event => {\n    // setOptions([...options, \"\"]);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: [...newQuestion.options, \"\"] }\n    });\n    setOptionAdded(true);\n  };\n\n  const handleRemoveOptionClick = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions.splice(index, 1);\n    // setOptions(newOptions);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: newOptions }\n    });\n  };\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n      <Grid\n        item\n        xs={12}\n        style={{\n          background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n        <TextField\n          autoFocus\n          required\n          autoComplete=\"off\"\n          margin=\"dense\"\n          id=\"title\"\n          label=\"Title\"\n          type=\"text\"\n          fullWidth\n          value={newQuestion.title}\n          onChange={e =>\n            newQuestionDispatch({\n              type: \"SET_QUESTION\",\n              question: { ...newQuestion, title: e.target.value }\n            })\n          }\n        />\n      </Grid>\n      <Grid item xs={12} style={{ textAlign: \"center\", margin: \"1em 0 0 0\" }}>\n        <Button onClick={handleAddOptionClick}>\n          add {newQuestion.type === \"range\" ? \"label\" : \"option\"}\n        </Button>\n      </Grid>\n      <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n        <Box\n          fullWidth\n          // height=\"200px\"\n          height=\"200px\"\n          overflow=\"scroll\"\n          style={{ margin: \"0\", overflowX: \"hidden\" }}\n        >\n          {newQuestion.options.map((option, index) => (\n            <TextField\n              autoFocus={\n                optionAdded\n                  ? index === newQuestion.options.length - 1\n                    ? true\n                    : false\n                  : false\n              }\n              style={{ margin: \"0.2em 0\" }}\n              placeholder={newQuestion.type === \"range\" ? \"label\" : \"option\"}\n              type=\"text\"\n              fullWidth\n              value={option}\n              onChange={e => handleChange(index, e)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\" margin=\"0\">\n                    <IconButton\n                      edge=\"end\"\n                      onClick={e => handleRemoveOptionClick(index, e)}\n                      style={{ margin: \"0\", padding: \"0\" }}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </InputAdornment>\n                )\n              }}\n            />\n          ))}\n        </Box>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DialogFooter = ({ handleClose }) => {\n  const { settings } = useContext(SettingsContext);\n\n  return (\n    <>\n      <Grid\n        item\n        xs\n        style={{\n          textAlign: \"center\",\n          background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n        <Button type=\"submit\">submit</Button>\n      </Grid>\n      <Grid\n        item\n        xs\n        style={{\n          textAlign: \"center\",\n          background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n        <Button onClick={handleClose}>cancel</Button>\n      </Grid>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}