{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/buttons/EditQuestionButton.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Box, Dialog, DialogTitle, Tooltip, IconButton, DialogContent, TextField, DialogActions, Button, InputAdornment, Grid, Typography } from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../../contexts/QuestionnaireContext\";\nimport NewQuestionContextProvider, { NewQuestionContext } from \"../../contexts/NewQuestionContext\";\nimport EditDialog from \"../BetaEditDialog\";\n\nconst EditQuestionButton = ({\n  question\n}) => {\n  const [open, setOpen] = useState(false);\n  return React.createElement(React.Fragment, null, React.createElement(Tooltip, {\n    title: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: () => setOpen(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(EditIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }))), React.createElement(NewQuestionContextProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(EditDialog, {\n    question: question,\n    open: open,\n    setOpen: setOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })));\n};\n\nexport default EditQuestionButton; // const EditDialog = ({ question, open, setOpen }) => {\n//   const [optionAdded, setOptionAdded] = useState(false);\n//   const { questions, dispatch } = useContext(QuestionnaireContext);\n//   const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n//   // load question to editor state on dialog open\n//   useEffect(() => {\n//     newQuestionDispatch({ type: \"SET_QUESTION\", question: question });\n//   }, [open, newQuestionDispatch, question]);\n//   // dispatch action to questionnaireReducer to update question\n//   const handleSubmit = event => {\n//     event.preventDefault();\n//     dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n//     setOpen(false);\n//     newQuestionDispatch({ type: \"SET_QUESTION\", question: {title: \"\", options: []} })\n//   };\n//   // update correct option on text input changes\n//   const handleChange = (index, event) => {\n//     let newOptions = [...newQuestion.options];\n//     newOptions[index] = event.target.value;\n//     newQuestionDispatch({\n//       type: \"SET_QUESTION\",\n//       question: { ...newQuestion, options: newOptions }\n//     });\n//   };\n//   const handleAddOptionClick = event => {\n//     newQuestionDispatch({\n//       type: \"SET_QUESTION\",\n//       question: { ...newQuestion, options: [...newQuestion.options, \"\"] }\n//     });\n//     setOptionAdded(true);\n//   };\n//   const handleRemoveOptionClick = (index, event) => {\n//     let newOptions = [...newQuestion.options];\n//     newOptions.splice(index, 1);\n//     newQuestionDispatch({\n//       type: \"SET_QUESTION\",\n//       question: { ...newQuestion, options: newOptions }\n//     });\n//   };\n//   const handleClose = () => {\n//     setOpen(false);\n//     setOptionAdded(false);\n//   };\n//   return (\n//     <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n//       <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n//         <DialogTitle>\n//           Edit Question {questions.indexOf(question) + 1}\n//         </DialogTitle>\n//         <DialogContent>\n//           <TextField\n//             autoFocus\n//             required\n//             variant=\"outlined\"\n//             autoComplete=\"off\"\n//             margin=\"dense\"\n//             id=\"title\"\n//             label=\"Title\"\n//             type=\"text\"\n//             fullWidth\n//             value={newQuestion.title}\n//             onChange={e =>\n//               newQuestionDispatch({\n//                 type: \"SET_QUESTION\",\n//                 question: { ...newQuestion, title: e.target.value }\n//               })\n//             }\n//           />\n//           <Grid container style={{ margin: \"1em 0\" }}>\n//             <Grid item xs={6}>\n//               <Box style={{ textAlign: \"left\" }}>\n//                 <Typography variant=\"h6\">Options</Typography>\n//               </Box>\n//             </Grid>\n//             <Grid item xs={6}>\n//               <Box style={{ textAlign: \"right\" }}>\n//                 <Button onClick={handleAddOptionClick}>add option</Button>\n//               </Box>\n//             </Grid>\n//           </Grid>\n//           {newQuestion.options.map((option, index) => (\n//             <TextField\n//               autoFocus={\n//                 optionAdded\n//                   ? index === newQuestion.options.length - 1\n//                     ? true\n//                     : false\n//                   : false\n//               }\n//               style={{ margin: \"0.2em 0\" }}\n//               placeholder=\"option\"\n//               type=\"text\"\n//               fullWidth\n//               value={option}\n//               onChange={e => handleChange(index, e)}\n//               InputProps={{\n//                 endAdornment: (\n//                   <InputAdornment position=\"end\">\n//                     <IconButton\n//                       edge=\"end\"\n//                       onClick={e => handleRemoveOptionClick(index, e)}\n//                     >\n//                       <DeleteIcon />\n//                     </IconButton>\n//                   </InputAdornment>\n//                 )\n//               }}\n//             />\n//           ))}\n//         </DialogContent>\n//         <DialogActions>\n//           <Button type=\"submit\" color=\"primary\">\n//             submit\n//           </Button>\n//         </DialogActions>\n//       </form>\n//     </Dialog>\n//   );\n// };","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/buttons/EditQuestionButton.js"],"names":["React","useState","useContext","useEffect","Box","Dialog","DialogTitle","Tooltip","IconButton","DialogContent","TextField","DialogActions","Button","InputAdornment","Grid","Typography","EditIcon","DeleteIcon","QuestionnaireContext","NewQuestionContextProvider","NewQuestionContext","EditDialog","EditQuestionButton","question","open","setOpen"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SACEC,GADF,EAEEC,MAFF,EAGEC,WAHF,EAIEC,OAJF,EAKEC,UALF,EAMEC,aANF,EAOEC,SAPF,EAQEC,aARF,EASEC,MATF,EAUEC,cAVF,EAWEC,IAXF,EAYEC,UAZF,QAaO,mBAbP;AAcA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,SAASC,oBAAT,QAAqC,qCAArC;AACA,OAAOC,0BAAP,IACEC,kBADF,QAEO,mCAFP;AAGA,OAAOC,UAAP,MAAuB,mBAAvB;;AAEA,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBxB,QAAQ,CAAC,KAAD,CAAhC;AAEA,SACE,0CACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAE,MAAMwB,OAAO,CAAC,IAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,EAME,oBAAC,0BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAEF,QAAtB;AAAgC,IAAA,IAAI,EAAEC,IAAtC;AAA4C,IAAA,OAAO,EAAEC,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CANF,CADF;AAYD,CAfD;;AAiBA,eAAeH,kBAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  Tooltip,\n  IconButton,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  InputAdornment,\n  Grid,\n  Typography\n} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../../contexts/QuestionnaireContext\";\nimport NewQuestionContextProvider, {\n  NewQuestionContext\n} from \"../../contexts/NewQuestionContext\";\nimport EditDialog from \"../BetaEditDialog\";\n\nconst EditQuestionButton = ({ question }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Tooltip title=\"edit\">\n        <IconButton onClick={() => setOpen(true)}>\n          <EditIcon />\n        </IconButton>\n      </Tooltip>\n      <NewQuestionContextProvider>\n        <EditDialog question={question} open={open} setOpen={setOpen} />\n      </NewQuestionContextProvider>\n    </>\n  );\n};\n\nexport default EditQuestionButton;\n\n// const EditDialog = ({ question, open, setOpen }) => {\n//   const [optionAdded, setOptionAdded] = useState(false);\n//   const { questions, dispatch } = useContext(QuestionnaireContext);\n//   const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n//   // load question to editor state on dialog open\n//   useEffect(() => {\n//     newQuestionDispatch({ type: \"SET_QUESTION\", question: question });\n//   }, [open, newQuestionDispatch, question]);\n\n//   // dispatch action to questionnaireReducer to update question\n//   const handleSubmit = event => {\n//     event.preventDefault();\n//     dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n//     setOpen(false);\n//     newQuestionDispatch({ type: \"SET_QUESTION\", question: {title: \"\", options: []} })\n//   };\n\n//   // update correct option on text input changes\n//   const handleChange = (index, event) => {\n//     let newOptions = [...newQuestion.options];\n//     newOptions[index] = event.target.value;\n//     newQuestionDispatch({\n//       type: \"SET_QUESTION\",\n//       question: { ...newQuestion, options: newOptions }\n//     });\n//   };\n\n//   const handleAddOptionClick = event => {\n//     newQuestionDispatch({\n//       type: \"SET_QUESTION\",\n//       question: { ...newQuestion, options: [...newQuestion.options, \"\"] }\n//     });\n//     setOptionAdded(true);\n//   };\n\n//   const handleRemoveOptionClick = (index, event) => {\n//     let newOptions = [...newQuestion.options];\n//     newOptions.splice(index, 1);\n//     newQuestionDispatch({\n//       type: \"SET_QUESTION\",\n//       question: { ...newQuestion, options: newOptions }\n//     });\n//   };\n\n//   const handleClose = () => {\n//     setOpen(false);\n//     setOptionAdded(false);\n//   };\n\n//   return (\n//     <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n//       <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n//         <DialogTitle>\n//           Edit Question {questions.indexOf(question) + 1}\n//         </DialogTitle>\n//         <DialogContent>\n//           <TextField\n//             autoFocus\n//             required\n//             variant=\"outlined\"\n//             autoComplete=\"off\"\n//             margin=\"dense\"\n//             id=\"title\"\n//             label=\"Title\"\n//             type=\"text\"\n//             fullWidth\n//             value={newQuestion.title}\n//             onChange={e =>\n//               newQuestionDispatch({\n//                 type: \"SET_QUESTION\",\n//                 question: { ...newQuestion, title: e.target.value }\n//               })\n//             }\n//           />\n//           <Grid container style={{ margin: \"1em 0\" }}>\n//             <Grid item xs={6}>\n//               <Box style={{ textAlign: \"left\" }}>\n//                 <Typography variant=\"h6\">Options</Typography>\n//               </Box>\n//             </Grid>\n//             <Grid item xs={6}>\n//               <Box style={{ textAlign: \"right\" }}>\n//                 <Button onClick={handleAddOptionClick}>add option</Button>\n//               </Box>\n//             </Grid>\n//           </Grid>\n//           {newQuestion.options.map((option, index) => (\n//             <TextField\n//               autoFocus={\n//                 optionAdded\n//                   ? index === newQuestion.options.length - 1\n//                     ? true\n//                     : false\n//                   : false\n//               }\n//               style={{ margin: \"0.2em 0\" }}\n//               placeholder=\"option\"\n//               type=\"text\"\n//               fullWidth\n//               value={option}\n//               onChange={e => handleChange(index, e)}\n//               InputProps={{\n//                 endAdornment: (\n//                   <InputAdornment position=\"end\">\n//                     <IconButton\n//                       edge=\"end\"\n//                       onClick={e => handleRemoveOptionClick(index, e)}\n//                     >\n//                       <DeleteIcon />\n//                     </IconButton>\n//                   </InputAdornment>\n//                 )\n//               }}\n//             />\n//           ))}\n//         </DialogContent>\n//         <DialogActions>\n//           <Button type=\"submit\" color=\"primary\">\n//             submit\n//           </Button>\n//         </DialogActions>\n//       </form>\n//     </Dialog>\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}