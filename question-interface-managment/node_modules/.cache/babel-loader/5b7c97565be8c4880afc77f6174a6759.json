{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionnaireProperties.js\";\nimport React, { useContext, useState } from \"react\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { DialogContent, FormControlLabel, IconButton, InputAdornment } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\n\nconst TextProperty = ({\n  newQuestion,\n  newQuestionDispatch,\n  name,\n  propertyName,\n  ...props\n}) => {\n  const handleChange = event => {\n    newQuestion[propertyName] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion\n      }\n    });\n  };\n\n  return React.createElement(TextField, Object.assign({\n    autoFocus: true,\n    required: true,\n    variant: \"outlined\",\n    autoComplete: \"off\",\n    margin: \"dense\",\n    type: \"text\",\n    fullWidth: true,\n    id: \"outlined-basic\",\n    value: newQuestion[propertyName],\n    onChange: handleChange,\n    label: name\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n};\n\nexport const TitleProperty = ({\n  newQuestion,\n  newQuestionDispatch,\n  ...props\n}) => {\n  return React.createElement(TextProperty, Object.assign({\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    propertyName: \"title\",\n    name: \"Title\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n};\n\nconst ArrayProperty = ({\n  newQuestion,\n  newQuestionDispatch,\n  name,\n  propertyName,\n  type\n}) => {\n  const handleChange = event => {\n    newQuestion[propertyName] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion\n      }\n    });\n  };\n\n  return React.createElement(TextField, {\n    autoFocus: true,\n    required: true,\n    variant: \"outlined\",\n    autoComplete: \"off\",\n    margin: \"dense\",\n    type: \"text\",\n    fullWidth: true,\n    id: \"outlined-basic\",\n    value: newQuestion[propertyName],\n    onChange: handleChange,\n    label: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  });\n};\n\nexport const TextOptionsProperty = ({\n  newQuestion,\n  newQuestionDispatch\n}) => {\n  const [optionAdded, setOptionAdded] = useState(false);\n\n  const handleChange = (index, event) => {\n    newQuestion.options[index] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion\n      }\n    });\n  };\n\n  const handleAddOptionClick = event => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: [...newQuestion.options, \"\"]\n      }\n    });\n    setOptionAdded(true);\n  };\n\n  const handleRemoveOptionClick = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions.splice(index, 1);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: newOptions\n      }\n    });\n  };\n\n  const renderOptions = () => newQuestion.options.map((option, index) => React.createElement(TextField, {\n    autoFocus: optionAdded ? index === newQuestion.options.length - 1 : false,\n    style: {\n      background: \"white\",\n      margin: \"0.2em 0\"\n    },\n    placeholder: newQuestion.type === \"range\" ? \"label\" : \"option\",\n    type: \"text\",\n    fullWidth: true,\n    value: option,\n    onChange: e => handleChange(index, e),\n    InputProps: getInputProps(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }));\n\n  const getInputProps = index => ({\n    endAdornment: React.createElement(InputAdornment, {\n      position: \"end\",\n      margin: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      edge: \"end\",\n      onClick: e => handleRemoveOptionClick(index, e),\n      style: {\n        margin: \"0\",\n        padding: \"0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(DeleteIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })))\n  });\n\n  return React.createElement(React.Fragment, null, React.createElement(Button, {\n    onClick: handleAddOptionClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"add \", newQuestion.type === \"range\" ? \"label\" : \"option\"), React.createElement(Box, {\n    fullWidth: true // height=\"200px\"\n    ,\n    height: \"200px\",\n    overflow: \"scroll\",\n    style: {\n      margin: \"0\",\n      overflowX: \"hidden\",\n      background: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, renderOptions()));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionnaireProperties.js"],"names":["React","useContext","useState","Switch","DialogContent","FormControlLabel","IconButton","InputAdornment","TextField","DeleteIcon","Button","Box","TextProperty","newQuestion","newQuestionDispatch","name","propertyName","props","handleChange","event","target","value","type","question","TitleProperty","ArrayProperty","TextOptionsProperty","optionAdded","setOptionAdded","index","options","handleAddOptionClick","handleRemoveOptionClick","newOptions","splice","renderOptions","map","option","length","background","margin","e","getInputProps","endAdornment","padding","overflowX"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from \"react\";\nimport Switch from \"@material-ui/core/Switch\";\nimport {DialogContent, FormControlLabel, IconButton, InputAdornment} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\n\n\nconst TextProperty = ({\n  newQuestion,\n  newQuestionDispatch,\n  name,\n  propertyName,\n  ...props\n}) => {\n\n  const handleChange = event => {\n    newQuestion[propertyName] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion }\n    });\n  };\n\n  return (\n    <TextField\n      autoFocus\n      required\n      variant=\"outlined\"\n      autoComplete=\"off\"\n      margin=\"dense\"\n      type=\"text\"\n      fullWidth\n      id={\"outlined-basic\"}\n      value={newQuestion[propertyName]}\n      onChange={handleChange}\n      label={name}\n      {...props}\n    />\n  );\n};\n\nexport const TitleProperty = ({ newQuestion, newQuestionDispatch, ...props }) => {\n  return (\n    <TextProperty\n      newQuestion={newQuestion}\n      newQuestionDispatch={newQuestionDispatch}\n      propertyName={\"title\"}\n      name={\"Title\"}\n      {...props}\n    />\n  );\n}\n\nconst ArrayProperty = ({newQuestion, newQuestionDispatch, name, propertyName, type}) => {\n  const handleChange = event => {\n    newQuestion[propertyName] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion}\n    });\n  };\n\n\n  return <TextField\n    autoFocus\n    required\n    variant=\"outlined\"\n    autoComplete=\"off\"\n    margin=\"dense\"\n    type=\"text\"\n    fullWidth\n    id={\"outlined-basic\"}\n    value={newQuestion[propertyName]}\n    onChange={handleChange}\n    label={name}\n  />\n};\n\n\nexport const TextOptionsProperty = ({newQuestion, newQuestionDispatch}) => {\n  const [optionAdded, setOptionAdded] = useState(false);\n\n  const handleChange = (index, event) => {\n    newQuestion.options[index] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion}\n    });\n  };\n\n  const handleAddOptionClick = event => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: [...newQuestion.options, \"\"] }\n    });\n    setOptionAdded(true);\n  }\n\n  const handleRemoveOptionClick = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions.splice(index, 1);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: newOptions }\n    });\n  };\n\n  const renderOptions = () => newQuestion.options.map((option, index) => (\n    <TextField\n      autoFocus={optionAdded ? index === newQuestion.options.length - 1 : false}\n      style={{ background: \"white\", margin: \"0.2em 0\" }}\n      placeholder={newQuestion.type === \"range\" ? \"label\" : \"option\"}\n      type=\"text\"\n      fullWidth\n      value={option}\n      onChange={e => handleChange(index, e)}\n      InputProps={getInputProps(index)}\n    />\n  ))\n\n  const getInputProps = (index) => ({\n    endAdornment: (\n      <InputAdornment position=\"end\" margin=\"0\">\n        <IconButton\n          edge=\"end\"\n          onClick={e => handleRemoveOptionClick(index, e)}\n          style={{margin: \"0\", padding: \"0\"}}\n        >\n          <DeleteIcon/>\n        </IconButton>\n      </InputAdornment>\n    )\n  });\n\n  return <>\n    <Button onClick={handleAddOptionClick}>\n      add {newQuestion.type === \"range\" ? \"label\" : \"option\"}\n    </Button>\n    <Box\n      fullWidth\n      // height=\"200px\"\n      height=\"200px\"\n      overflow=\"scroll\"\n      style={{ margin: \"0\", overflowX: \"hidden\",background: \"white\" }}\n    >\n      {renderOptions()}\n    </Box>\n  </>\n}\n\n\n"]},"metadata":{},"sourceType":"module"}