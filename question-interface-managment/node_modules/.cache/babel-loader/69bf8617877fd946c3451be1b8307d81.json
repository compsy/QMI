{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/templates/CheckboxTemplate.jsx\";\nimport React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst CheckboxEditDialog = ({\n  question,\n  items,\n  setItems\n}) => {\n  const [title, setTitle] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleClose = () => {\n    setTitle(\"\");\n    setOpen(false);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newItem = { ...question,\n      title: title\n    };\n    const newItems = items.map(item => item.id == newItem.id ? newItem : item);\n    setItems(newItems);\n    handleClose();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: () => setOpen(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"edit\"), React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"edit this question\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"edit this question and when done press save or cancel\"), React.createElement(TextField, {\n    autoComplete: \"off\",\n    value: title,\n    onChange: event => setTitle(event.currentTarget.value),\n    autoFocus: true,\n    variant: \"outlined\",\n    margin: \"dense\",\n    id: \"title\",\n    label: \"title\",\n    fullWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"save\"), React.createElement(Button, {\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"cancel\")))));\n};\n\nconst CheckboxRemoveDialog = ({\n  question,\n  items,\n  setItems\n}) => {\n  const [open, setOpen] = useState(false);\n\n  const handleRemoveClick = event => {\n    const newItems = items.filter(item => item.id != question.id);\n    setItems(newItems);\n    setOpen(false);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"secondary\",\n    onClick: () => setOpen(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"remove\"), React.createElement(Dialog, {\n    open: open,\n    onClose: () => setOpen(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Remove Confirmation\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Remove this question?\")), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"secondary\",\n    onClick: handleRemoveClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"remove\"), React.createElement(Button, {\n    onClick: () => setOpen(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"cancel\"))));\n};\n\nconst CheckboxTemplate = ({\n  question,\n  items,\n  setItems\n}) => {\n  const options = question.options.map(option => React.createElement(FormControlLabel, {\n    disabled: true,\n    label: option,\n    control: React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }));\n  return React.createElement(Card, {\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, items.indexOf(question))), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"caption\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, question.type))), React.createElement(\"div\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, question.title)), React.createElement(\"div\", {\n    className: \"options\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    component: \"fieldset\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, options)))), React.createElement(CardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(CheckboxEditDialog, {\n    question: question,\n    items: items,\n    setItems: setItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), React.createElement(CheckboxRemoveDialog, {\n    question: question,\n    items: items,\n    setItems: setItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })));\n};\n\nexport default CheckboxTemplate;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/templates/CheckboxTemplate.jsx"],"names":["React","useState","Card","CardContent","CardActions","Typography","FormControl","FormControlLabel","FormGroup","Checkbox","Button","Dialog","DialogTitle","DialogContent","DialogActions","DialogContentText","TextField","CheckboxEditDialog","question","items","setItems","title","setTitle","open","setOpen","handleClose","handleSubmit","event","preventDefault","newItem","newItems","map","item","id","currentTarget","value","CheckboxRemoveDialog","handleRemoveClick","filter","CheckboxTemplate","options","option","indexOf","type"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst CheckboxEditDialog = ({ question, items, setItems }) => {\n  const [title, setTitle] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleClose = () => {\n    setTitle(\"\");\n    setOpen(false);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newItem = { ...question, title: title };\n    const newItems = items.map(item =>\n      item.id == newItem.id ? newItem : item\n    );\n    setItems(newItems);\n    handleClose();\n  };\n\n  return (\n    <div>\n      <Button color=\"primary\" onClick={() => setOpen(true)}>\n        edit\n      </Button>\n      <Dialog open={open} onClose={handleClose}>\n        <form onSubmit={handleSubmit}>\n          <DialogTitle>edit this question</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              edit this question and when done press save or cancel\n            </DialogContentText>\n            <TextField\n              autoComplete=\"off\"\n              value={title}\n              onChange={event => setTitle(event.currentTarget.value)}\n              autoFocus\n              variant=\"outlined\"\n              margin=\"dense\"\n              id=\"title\"\n              label=\"title\"\n              fullWidth\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button color=\"primary\" type=\"submit\">\n              save\n            </Button>\n            <Button onClick={handleClose}>cancel</Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </div>\n  );\n};\n\nconst CheckboxRemoveDialog = ({ question, items, setItems }) => {\n  const [open, setOpen] = useState(false);\n\n  const handleRemoveClick = event => {\n    const newItems = items.filter(item => item.id != question.id);\n    setItems(newItems);\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button color=\"secondary\" onClick={() => setOpen(true)}>\n        remove\n      </Button>\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <DialogTitle>Remove Confirmation</DialogTitle>\n        <DialogContent>\n          <DialogContentText>Remove this question?</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"secondary\" onClick={handleRemoveClick}>\n            remove\n          </Button>\n          <Button onClick={() => setOpen(false)}>cancel</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nconst CheckboxTemplate = ({ question, items, setItems }) => {\n  const options = question.options.map(option => (\n    <FormControlLabel disabled label={option} control={<Checkbox />} />\n  ));\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <div className=\"header\">\n          <span>\n            <Typography variant=\"h6\">{items.indexOf(question)}</Typography>\n          </span>\n          <span>\n            <Typography variant=\"caption\">{question.type}</Typography>\n          </span>\n        </div>\n        <div className=\"title\">\n          <Typography variant=\"h5\">{question.title}</Typography>\n        </div>\n        <div className=\"options\">\n          <FormControl component=\"fieldset\">\n            <FormGroup>{options}</FormGroup>\n          </FormControl>\n        </div>\n      </CardContent>\n      <CardActions>\n        <CheckboxEditDialog\n          question={question}\n          items={items}\n          setItems={setItems}\n        />\n        <CheckboxRemoveDialog\n          question={question}\n          items={items}\n          setItems={setItems}\n        />\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default CheckboxTemplate;\n"]},"metadata":{},"sourceType":"module"}