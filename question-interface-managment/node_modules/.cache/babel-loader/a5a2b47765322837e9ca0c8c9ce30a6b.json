{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/EditDialog.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Button, Dialog, FormControl, Grid, InputLabel, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport { PROPERTIES_BY_QUESTION_TYPE, SPECIAL_CONVERSION_CASES } from \"./QuestionTypes\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst EditDialog = ({\n  question,\n  open,\n  setOpen\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // load question to editor state on dialog open\n\n  useEffect(() => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...question\n      }\n    });\n  }, [open, newQuestionDispatch, question]); // dispatch action to questionnaireReducer to update question\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    /*\n    * TODO: add verification function to check if all required properties are set.\n    * */\n\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: newQuestion\n    });\n    console.table(question);\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: {\n        title: \"\",\n        options: []\n      }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      padding: \"1em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(DialogBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(DialogFooter, {\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }))));\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext);\n\n  const GridItem = props => React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: props.textAlign,\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, props.children);\n\n  const changeType = newType => {\n    // handling special conversions\n    if (newQuestion.type in SPECIAL_CONVERSION_CASES && newType in SPECIAL_CONVERSION_CASES[newQuestion.type]) {\n      // array containing special conversions\n      const specialConversions = SPECIAL_CONVERSION_CASES[newQuestion.type][newType];\n      console.table(specialConversions);\n      specialConversions.map(specialConversion => {\n        const property = specialConversion.property;\n        const conversionFunction = specialConversion.conversionFunction;\n        console.log(property);\n        console.log(conversionFunction);\n        newQuestion[property] = conversionFunction(newQuestion[property]);\n      });\n    }\n\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        type: newType\n      }\n    });\n  };\n\n  const TypeSelector = () => React.createElement(Select, {\n    autoWidth: true,\n    labelId: \"type-select-label\",\n    value: newQuestion.type,\n    onChange: e => changeType(e.target.value),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Radio\"), React.createElement(MenuItem, {\n    value: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Checkbox\"), React.createElement(MenuItem, {\n    value: \"range\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Range\"), React.createElement(MenuItem, {\n    value: \"likert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Likert\"));\n\n  const QuestionTitle = () => React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Edit Question \", questions.indexOf(question) + 1);\n\n  return React.createElement(GridItem, {\n    textAlign: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"type-select-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Type\"), React.createElement(TypeSelector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(QuestionTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }))));\n};\n\nconst DialogBody = () => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext);\n\n  const renderProperties = renderRequired => {\n    const elements = [];\n    PROPERTIES_BY_QUESTION_TYPE[newQuestion.type.toUpperCase()] // deciding what properties should be rendered (what JSON element we should look at)\n    [renderRequired ? \"requiredProperties\" : \"optionalProperties\"].map(property => elements.push(React.createElement(property, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch\n    })));\n    elements.forEach(element => console.log(element));\n    return elements;\n  };\n\n  const PropertyCategory = props => {\n    const style = props.renderRequired ? {\n      color: \"#FF9999\",\n      title: \"Required\"\n    } : {\n      color: \"#BABAF1\",\n      title: \"Optional\"\n    };\n    return React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        borderColor: style.color\n      },\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, style.title), renderProperties(props.renderRequired))));\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(PropertyCategory, {\n    renderRequired: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }), React.createElement(PropertyCategory, {\n    renderRequired: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }))));\n};\n\nconst DialogFooter = ({\n  handleClose\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n\n  const GridItem = props => React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, props.children);\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    alignItems: \"flex-start\",\n    justify: \"flex-end\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, \"cancel\")), React.createElement(GridItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, \"submit\")));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/EditDialog.js"],"names":["React","useContext","useEffect","Button","Dialog","FormControl","Grid","InputLabel","MenuItem","Select","Typography","QuestionnaireContext","SettingsContext","NewQuestionContext","PROPERTIES_BY_QUESTION_TYPE","SPECIAL_CONVERSION_CASES","Card","CardContent","EditDialog","question","open","setOpen","settings","dispatch","newQuestion","newQuestionDispatch","type","handleSubmit","event","preventDefault","id","new","console","table","title","options","handleClose","padding","background","showGridAreas","DialogHeader","questions","GridItem","props","textAlign","opacity","children","changeType","newType","specialConversions","map","specialConversion","property","conversionFunction","log","TypeSelector","e","target","value","QuestionTitle","indexOf","DialogBody","renderProperties","renderRequired","elements","toUpperCase","push","createElement","forEach","element","PropertyCategory","style","color","borderColor","DialogFooter"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect} from \"react\";\nimport {Button, Dialog, FormControl, Grid, InputLabel, MenuItem, Select, Typography} from \"@material-ui/core\";\nimport {QuestionnaireContext} from \"../contexts/QuestionnaireContext\";\nimport {SettingsContext} from \"../contexts/SettingsContext\";\nimport {NewQuestionContext} from \"../contexts/NewQuestionContext\";\nimport {PROPERTIES_BY_QUESTION_TYPE, SPECIAL_CONVERSION_CASES} from \"./QuestionTypes\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst EditDialog = ({ question, open, setOpen }) => {\n  const { settings } = useContext(SettingsContext);\n  const { dispatch } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    newQuestionDispatch({ type: \"SET_QUESTION\", question: { ...question } });\n  }, [open, newQuestionDispatch, question]);\n\n  // dispatch action to questionnaireReducer to update question\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    /*\n    * TODO: add verification function to check if all required properties are set.\n    * */\n\n\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n    console.table(question);\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { title: \"\", options: [] }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      {/* <ToggleGridAreasButton /> */}\n      <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n          style={{\n            padding: \"2em\",\n            background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n          }}\n        >\n          <DialogHeader question={question} />\n          <DialogBody/>\n          <DialogFooter handleClose={handleClose} />\n        </Grid>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  const GridItem = (props) => (\n    <Grid\n      item\n      xs={12}\n      style={{\n        textAlign: props.textAlign,\n        background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n        opacity: settings.showGridAreas ? 0.9 : 1.0\n      }}\n    >\n      {props.children}\n    </Grid>\n  );\n\n  const changeType = (newType) => {\n    // handling special conversions\n    if(newQuestion.type in SPECIAL_CONVERSION_CASES && newType in SPECIAL_CONVERSION_CASES[newQuestion.type]) {\n      // array containing special conversions\n      const specialConversions = SPECIAL_CONVERSION_CASES[newQuestion.type][newType];\n\n      console.table(specialConversions);\n\n      specialConversions.map((specialConversion) => {\n        const property = specialConversion.property;\n        const conversionFunction = specialConversion.conversionFunction;\n        console.log(property);\n        console.log(conversionFunction);\n        newQuestion[property] =\n          conversionFunction(newQuestion[property]);\n      });\n    }\n\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, type: newType }\n    });\n  };\n\n  const TypeSelector = () => (\n    <Select\n    autoWidth\n    labelId=\"type-select-label\"\n    value={newQuestion.type}\n    onChange={e => changeType(e.target.value)}\n    style={{ textAlign: \"left\" }}\n  >\n      {/*TODO: not everything is compatible for convert, so only show what's allowed.*/}\n    <MenuItem value=\"radio\">Radio</MenuItem>\n    <MenuItem value=\"checkbox\">Checkbox</MenuItem>\n    <MenuItem value=\"range\">Range</MenuItem>\n    <MenuItem value=\"likert\">Likert</MenuItem>\n\n  </Select>\n  );\n\n  const QuestionTitle = () => (\n    <Typography variant=\"h5\">\n      Edit Question {questions.indexOf(question) + 1}\n    </Typography>\n  );\n\n  return (\n    <GridItem textAlign=\"right\">\n      <FormControl>\n        <InputLabel id=\"type-select-label\">Type</InputLabel>\n        <TypeSelector/>\n      </FormControl>\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <GridItem textAlign=\"left\">\n          <QuestionTitle/>\n        </GridItem>\n      </Grid>\n    </GridItem>\n  );\n};\n\nconst DialogBody = () => {\n  const { settings } = useContext(SettingsContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  const renderProperties = (renderRequired) => {\n    const elements = [];\n    PROPERTIES_BY_QUESTION_TYPE[newQuestion.type.toUpperCase()]\n      // deciding what properties should be rendered (what JSON element we should look at)\n      [(renderRequired ? \"requiredProperties\" : \"optionalProperties\")].map(property =>\n      elements.push(React.createElement(property,\n        {newQuestion: newQuestion, newQuestionDispatch: newQuestionDispatch})));\n    elements.forEach(element => console.log(element));\n    return elements;\n  };\n\n\n  const PropertyCategory = (props) => {\n    const style = (props.renderRequired ?\n      {color: \"#FF9999\", title:\"Required\"} : {color: \"#BABAF1\", title:\"Optional\"});\n\n    return<Grid item xs={12}>\n        <Card style={{borderColor: style.color}} variant=\"outlined\">\n          <CardContent>\n            <Typography>\n              {style.title}\n            </Typography>\n            {renderProperties(props.renderRequired)}\n          </CardContent>\n        </Card>\n      </Grid>};\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={4}>\n      <Grid\n        item\n        xs={12}\n        style={{\n          background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n      </Grid>\n      <Grid item xs={12}>\n        <Grid container direction=\"row\"  spacing={5}>\n          <PropertyCategory renderRequired/>\n          <PropertyCategory renderRequired={false}/>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DialogFooter = ({ handleClose }) => {\n  const { settings } = useContext(SettingsContext);\n\n  const GridItem = (props) => (\n    <Grid\n    item\n    xs\n    style={{\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    }}\n  >{props.children}</Grid>\n  );\n\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      alignItems=\"flex-start\"\n      justify=\"flex-end\"\n      style={{\n        padding: \"2em\",\n        background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n      }}\n    >\n      <GridItem>\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>cancel</Button>\n      </GridItem>\n      <GridItem>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">submit</Button>\n      </GridItem>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}