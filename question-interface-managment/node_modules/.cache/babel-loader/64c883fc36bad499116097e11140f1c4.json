{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionnaireProperties.js\";\nimport React, { useContext, useState } from \"react\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { DialogContent, FormControlLabel, IconButton, InputAdornment } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst TextProperty = ({\n  newQuestion,\n  newQuestionDispatch,\n  name,\n  propertyName,\n  ...props\n}) => {\n  const handleChange = event => {\n    newQuestion[propertyName] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion\n      }\n    });\n  };\n\n  return React.createElement(TextField, Object.assign({\n    autoFocus: true,\n    required: true,\n    variant: \"outlined\",\n    autoComplete: \"off\",\n    margin: \"dense\",\n    type: \"text\",\n    fullWidth: true,\n    id: \"outlined-basic\",\n    value: newQuestion[propertyName],\n    onChange: handleChange,\n    label: name\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n};\n\nexport const TitleProperty = ({\n  newQuestion,\n  newQuestionDispatch,\n  ...props\n}) => {\n  return React.createElement(TextProperty, Object.assign({\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    propertyName: \"title\",\n    name: \"Title\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionnaireProperties.js"],"names":["React","useContext","useState","Switch","DialogContent","FormControlLabel","IconButton","InputAdornment","TextField","DeleteIcon","TextProperty","newQuestion","newQuestionDispatch","name","propertyName","props","handleChange","event","target","value","type","question","TitleProperty"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SACEC,aADF,EAEEC,gBAFF,EAGEC,UAHF,EAIEC,cAJF,QAKO,mBALP;AAMA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AACpBC,EAAAA,WADoB;AAEpBC,EAAAA,mBAFoB;AAGpBC,EAAAA,IAHoB;AAIpBC,EAAAA,YAJoB;AAKpB,KAAGC;AALiB,CAAD,KAMf;AACJ,QAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5BN,IAAAA,WAAW,CAACG,YAAD,CAAX,GAA4BG,KAAK,CAACC,MAAN,CAAaC,KAAzC;AACAP,IAAAA,mBAAmB,CAAC;AAClBQ,MAAAA,IAAI,EAAE,cADY;AAElBC,MAAAA,QAAQ,EAAE,EAAE,GAAGV;AAAL;AAFQ,KAAD,CAAnB;AAID,GAND;;AAQA,SACE,oBAAC,SAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,QAAQ,MAFV;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,YAAY,EAAC,KAJf;AAKE,IAAA,MAAM,EAAC,OALT;AAME,IAAA,IAAI,EAAC,MANP;AAOE,IAAA,SAAS,MAPX;AAQE,IAAA,EAAE,EAAE,gBARN;AASE,IAAA,KAAK,EAAEA,WAAW,CAACG,YAAD,CATpB;AAUE,IAAA,QAAQ,EAAEE,YAVZ;AAWE,IAAA,KAAK,EAAEH;AAXT,KAYME,KAZN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAgBD,CA/BD;;AAgCA,OAAO,MAAMO,aAAa,GAAG,CAAC;AAAEX,EAAAA,WAAF;AAAeC,EAAAA,mBAAf;AAAoC,KAAGG;AAAvC,CAAD,KAAoD;AAC/E,SACE,oBAAC,YAAD;AACE,IAAA,WAAW,EAAEJ,WADf;AAEE,IAAA,mBAAmB,EAAEC,mBAFvB;AAGE,IAAA,YAAY,EAAE,OAHhB;AAIE,IAAA,IAAI,EAAE;AAJR,KAKMG,KALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AASD,CAVM","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport Switch from \"@material-ui/core/Switch\";\nimport {\n  DialogContent,\n  FormControlLabel,\n  IconButton,\n  InputAdornment\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst TextProperty = ({\n  newQuestion,\n  newQuestionDispatch,\n  name,\n  propertyName,\n  ...props\n}) => {\n  const handleChange = event => {\n    newQuestion[propertyName] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion }\n    });\n  };\n\n  return (\n    <TextField\n      autoFocus\n      required\n      variant=\"outlined\"\n      autoComplete=\"off\"\n      margin=\"dense\"\n      type=\"text\"\n      fullWidth\n      id={\"outlined-basic\"}\n      value={newQuestion[propertyName]}\n      onChange={handleChange}\n      label={name}\n      {...props}\n    />\n  );\n};\nexport const TitleProperty = ({ newQuestion, newQuestionDispatch, ...props }) => {\n  return (\n    <TextProperty\n      newQuestion={newQuestion}\n      newQuestionDispatch={newQuestionDispatch}\n      propertyName={\"title\"}\n      name={\"Title\"}\n      {...props}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}