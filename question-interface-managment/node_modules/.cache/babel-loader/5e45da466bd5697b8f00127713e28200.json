{"ast":null,"code":"import uuid from \"uuid/v1\";\n\nconst reorder = (list, startIndex, endIndex) => {\n  const newList1 = list.slice(startIndex + 1, list.length);\n  const [removed] = list.splice(startIndex, 1);\n  list.splice(endIndex, 0, removed);\n  return list;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  const item = source[droppableSource.index];\n  destination.splice(droppableDestination.index, 0, {\n    id: uuid(),\n    type: item.label,\n    title: `untitled ${item.label}`,\n    options: [\"option1\", \"option2\", \"option3\", \"option4\"]\n  });\n  return destination;\n};\n\nconst QUESTION_TYPES = [{\n  id: uuid(),\n  label: \"checkbox\"\n}, {\n  id: uuid(),\n  label: \"radio\"\n}, {\n  id: uuid(),\n  label: \"likert\"\n}, {\n  id: uuid(),\n  label: \"range\"\n}, {\n  id: uuid(),\n  label: \"raw\"\n}, {\n  id: uuid(),\n  label: \"textarea\"\n}, {\n  id: uuid(),\n  label: \"textfield\"\n}, {\n  id: uuid(),\n  label: \"number\"\n}, {\n  id: uuid(),\n  label: \"expandable\"\n}, {\n  id: uuid(),\n  label: \"time\"\n}, {\n  id: uuid(),\n  label: \"date\"\n}, {\n  id: uuid(),\n  label: \"unsubscribed\"\n}, {\n  id: uuid(),\n  label: \"dropdown\"\n}, {\n  id: uuid(),\n  label: \"drawing\"\n}];\nexport const questionnaireReducer = (state, action) => {\n  switch (action.type) {\n    case \"REORDER\":\n      return reorder(state, action.source.index, action.destination.index);\n\n    case \"CLONE\":\n      return copy(QUESTION_TYPES, state, action.source, action.destination);\n\n    case \"SET_QUESTIONS\":\n      return action.questions;\n\n    case \"ADD_QUESTION\":\n      const uniq = uuid();\n      return [...state, {\n        id: uniq,\n        type: action.questionType.toLowerCase(),\n        title: \"untitled \" + action.questionType,\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      }];\n\n    case \"REMOVE_QUESTION\":\n      return state.filter(question => question.id !== action.id);\n\n    case \"UPDATE_QUESTION\":\n      return state.map(question => question.id === action.id ? action.new : question);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/reducers/questionnaireReducer.js"],"names":["uuid","reorder","list","startIndex","endIndex","newList1","slice","length","removed","splice","copy","source","destination","droppableSource","droppableDestination","item","index","id","type","label","title","options","QUESTION_TYPES","questionnaireReducer","state","action","questions","uniq","questionType","toLowerCase","filter","question","map","new"],"mappings":"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","sourcesContent":["import uuid from \"uuid/v1\";\n\nconst reorder = (list, startIndex, endIndex) => {\n  const newList1 = list.slice(startIndex + 1, list.length )\n  const [removed] = list.splice(startIndex, 1);\n  list.splice(endIndex, 0, removed);\n  return list;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  const item = source[droppableSource.index];\n  destination.splice(droppableDestination.index, 0, {\n    id: uuid(),\n    type: item.label,\n    title: `untitled ${item.label}`,\n    options: [\"option1\", \"option2\", \"option3\", \"option4\"]\n  });\n  return destination;\n};\n\nconst QUESTION_TYPES = [\n  { id: uuid(), label: \"checkbox\" },\n  { id: uuid(), label: \"radio\" },\n  { id: uuid(), label: \"likert\" },\n  { id: uuid(), label: \"range\" },\n  { id: uuid(), label: \"raw\" },\n  { id: uuid(), label: \"textarea\" },\n  { id: uuid(), label: \"textfield\" },\n  { id: uuid(), label: \"number\" },\n  { id: uuid(), label: \"expandable\" },\n  { id: uuid(), label: \"time\" },\n  { id: uuid(), label: \"date\" },\n  { id: uuid(), label: \"unsubscribed\" },\n  { id: uuid(), label: \"dropdown\" },\n  { id: uuid(), label: \"drawing\" }\n];\n\nexport const questionnaireReducer = (state, action) => {\n  switch (action.type) {\n    case \"REORDER\":\n      return reorder(state, action.source.index, action.destination.index);\n    case \"CLONE\":\n      return copy(QUESTION_TYPES, state, action.source, action.destination);\n    case \"SET_QUESTIONS\":\n      return action.questions;\n    case \"ADD_QUESTION\":\n      const uniq = uuid();\n      return [\n        ...state,\n        {\n          id: uniq,\n          type: action.questionType.toLowerCase(),\n          title: \"untitled \" + action.questionType,\n          options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n        }\n      ];\n    case \"REMOVE_QUESTION\":\n      return state.filter(question => question.id !== action.id);\n    case \"UPDATE_QUESTION\":\n      return state.map(question =>\n        question.id === action.id ? action.new : question\n      );\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}