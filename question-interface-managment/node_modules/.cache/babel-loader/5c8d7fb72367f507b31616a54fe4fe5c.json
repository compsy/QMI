{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/properties/TextArrayTemplate.js\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectProperty, setTextArrayField, setProperty, removeOption } from \"../../features/questionProperties/questionSlice\";\nimport { TextField, InputAdornment, IconButton, Button, Box, Menu, MenuItem, makeStyles, FormControl, InputLabel, FilledInput } from \"@material-ui/core\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nconst useStyles = makeStyles(theme => ({\n  boxy: {\n    borderRadius: 0\n  }\n}));\nexport const TextArrayProperty = ({\n  name,\n  propertyName\n}) => {\n  const property = useSelector(selectProperty(propertyName));\n  const dispatch = useDispatch();\n\n  const handleAddOptionClick = () => {\n    dispatch(setProperty({\n      property: propertyName,\n      value: [...property, \"\"]\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, name), React.createElement(Button, {\n    onClick: handleAddOptionClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"add \", name), React.createElement(Box, {\n    fullWidth: true,\n    height: \"200px\",\n    overflow: \"scroll\",\n    style: {\n      margin: \"0\",\n      overflowX: \"hidden\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, property.map((_, index) => React.createElement(EachOptioni, {\n    index: index,\n    name: name,\n    propertyName: propertyName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }))));\n};\n\nfunction EachOptioni({\n  index,\n  name,\n  propertyName\n}) {\n  const option = useSelector(state => state.question.options[index]);\n  const dispatch = useDispatch();\n\n  const handleChange = (index, event) => {\n    dispatch(setTextArrayField({\n      property: propertyName,\n      index: index,\n      value: event.target.value\n    }));\n  };\n\n  const handleRemoveOptionClick = index => dispatch(removeOption(index)); // MENU STUFF\n\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleMenuClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  }; // ----------\n\n\n  const getInputProps = index => ({\n    endAdornment: React.createElement(InputAdornment, {\n      position: \"end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      size: \"small\",\n      onClick: handleMenuClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(MoreHorizIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })), React.createElement(Menu, {\n      id: \"simple-menu\",\n      keepMounted: true,\n      anchorEl: anchorEl,\n      open: Boolean(anchorEl),\n      onClose: handleMenuClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      button: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      variant: \"filled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Option tooltip\"), React.createElement(FilledInput, {\n      required: true,\n      className: classes.boxy,\n      autoFocus: true,\n      autoComplete: \"off\",\n      type: \"text\",\n      id: `option-${index + 1}-tooltip`,\n      placeholder: \"Enter option tooltip text here..\",\n      value: option,\n      onChange: handleChange,\n      endAdornment: React.createElement(React.Fragment, null, React.createElement(MoreSettingsButton, {\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }))), React.createElement(MenuItem, {\n      onClick: handleMenuClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"My account\"), React.createElement(MenuItem, {\n      onClick: handleMenuClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Logout\")), React.createElement(IconButton, {\n      size: \"small\",\n      onClick: () => handleRemoveOptionClick(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(DeleteIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })))\n  });\n\n  const classes = useStyles();\n  return React.createElement(TextField, {\n    required: true,\n    key: index,\n    fullWidth: true,\n    type: \"text\",\n    style: {\n      margin: \"0.2em 0\"\n    },\n    placeholder: name,\n    value: option || \"\",\n    onChange: e => handleChange(index, e),\n    InputProps: getInputProps(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/properties/TextArrayTemplate.js"],"names":["React","useSelector","useDispatch","selectProperty","setTextArrayField","setProperty","removeOption","TextField","InputAdornment","IconButton","Button","Box","Menu","MenuItem","makeStyles","FormControl","InputLabel","FilledInput","MoreHorizIcon","DeleteIcon","useStyles","theme","boxy","borderRadius","TextArrayProperty","name","propertyName","property","dispatch","handleAddOptionClick","value","margin","overflowX","map","_","index","EachOptioni","option","state","question","options","handleChange","event","target","handleRemoveOptionClick","anchorEl","setAnchorEl","useState","handleMenuClick","currentTarget","handleMenuClose","getInputProps","endAdornment","Boolean","classes","e"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectProperty,\n  setTextArrayField,\n  setProperty,\n  removeOption,\n} from \"../../features/questionProperties/questionSlice\";\nimport {\n  TextField,\n  InputAdornment,\n  IconButton,\n  Button,\n  Box,\n  Menu,\n  MenuItem,\n  makeStyles,\n  FormControl,\n  InputLabel,\n  FilledInput,\n} from \"@material-ui/core\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles((theme) => ({\n  boxy: {\n    borderRadius: 0,\n  },\n}));\n\nexport const TextArrayProperty = ({ name, propertyName }) => {\n  const property = useSelector(selectProperty(propertyName));\n  const dispatch = useDispatch();\n\n  const handleAddOptionClick = () => {\n    dispatch(\n      setProperty({\n        property: propertyName,\n        value: [...property, \"\"],\n      })\n    );\n  };\n\n  return (\n    <>\n      <h4>{name}</h4>\n      <Button onClick={handleAddOptionClick}>add {name}</Button>\n      <Box\n        fullWidth\n        height=\"200px\"\n        overflow=\"scroll\"\n        style={{ margin: \"0\", overflowX: \"hidden\" }}\n      >\n        {property.map((_, index) => (\n          <EachOptioni index={index} name={name} propertyName={propertyName} />\n        ))}\n      </Box>\n    </>\n  );\n};\n\nfunction EachOptioni({ index, name, propertyName }) {\n  const option = useSelector((state) => state.question.options[index]);\n  const dispatch = useDispatch();\n\n  const handleChange = (index, event) => {\n    dispatch(\n      setTextArrayField({\n        property: propertyName,\n        index: index,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const handleRemoveOptionClick = (index) => dispatch(removeOption(index));\n\n  // MENU STUFF\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleMenuClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  // ----------\n\n  const getInputProps = (index) => ({\n    endAdornment: (\n      <InputAdornment position=\"end\">\n        <IconButton size=\"small\" onClick={handleMenuClick}>\n          <MoreHorizIcon />\n        </IconButton>\n        <Menu\n          id=\"simple-menu\"\n          keepMounted\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleMenuClose}\n        >\n          {/* switch case without break for options */}\n          <MenuItem button={false}>\n            <FormControl fullWidth>\n              <InputLabel variant=\"filled\">Option tooltip</InputLabel>\n              <FilledInput\n                required\n                className={classes.boxy}\n                autoFocus\n                autoComplete=\"off\"\n                type=\"text\"\n                id={`option-${index + 1}-tooltip`}\n                placeholder=\"Enter option tooltip text here..\"\n                value={option}\n                onChange={handleChange}\n                endAdornment={\n                  <>\n                    <MoreSettingsButton index={index} />\n                    {/* <RemoveOptionButton index={index} /> */}\n                  </>\n                }\n              />\n            </FormControl>\n          </MenuItem>\n          <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n          <MenuItem onClick={handleMenuClose}>Logout</MenuItem>\n        </Menu>\n        <IconButton size=\"small\" onClick={() => handleRemoveOptionClick(index)}>\n          <DeleteIcon />\n        </IconButton>\n      </InputAdornment>\n    ),\n  });\n\n  const classes = useStyles();\n  return (\n    <TextField\n      required\n      key={index}\n      fullWidth\n      type=\"text\"\n      style={{ margin: \"0.2em 0\" }}\n      placeholder={name}\n      value={option || \"\"}\n      onChange={(e) => handleChange(index, e)}\n      InputProps={getInputProps(index)}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}