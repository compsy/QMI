{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionTypes.js\";\nimport React from 'react';\nimport { v4 as uuid } from \"uuid\";\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport TuneIcon from '@material-ui/icons/Tune';\nimport LinearScaleIcon from '@material-ui/icons/LinearScale';\nimport Looks5TwoToneIcon from '@material-ui/icons/Looks5TwoTone';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport GestureIcon from '@material-ui/icons/Gesture';\nimport SelectIcon from '@material-ui/icons/ViewList';\nimport { AddButtonLabelProperty, ButtonTextProperty, ColorProperty, ContentProperty, DefaultDateProperty, DefaultExpansionsProperty, DefaultTextValueProperty, DensityProperty, HeightProperty, HiddenProperty, HintProperty, HoursFromProperty, HoursLabelProperty, HoursStepProperty, HoursToProperty, ImageProperty, LabelOptionsProperty, LabelProperty, LinksToExpandableProperty, MaxDateProperty, MaxExpansionsProperty, MaxLengthProperty, MaxProperty, MinDateProperty, MinProperty, MinutesLabelProperty, OtherwiseProperty, PatternProperty, PlaceholderProperty, PrioritizedTextOptionsProperty, RadiusProperty, RemoveButtonLabelProperty, RequiredProperty, SectionEndProperty, SectionStartProperty, StepProperty, TextOptionsProperty, TitleProperty, TodayProperty, TooltipProperty, WidthProperty } from \"./QuestionnaireProperties\";\nexport const QUESTION_TYPES = [{\n  id: uuid(),\n  label: \"radio\",\n  icon: React.createElement(RadioButtonCheckedIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"checkbox\",\n  icon: React.createElement(CheckBoxIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"range\",\n  icon: React.createElement(TuneIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"likert\",\n  icon: React.createElement(LinearScaleIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"textarea\",\n  icon: React.createElement(TextFieldsIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"number\",\n  icon: React.createElement(Looks5TwoToneIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"date\",\n  icon: React.createElement(DateRangeIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"time\",\n  icon: React.createElement(ScheduleIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"textfield\",\n  icon: React.createElement(TextFormatIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })\n}, {\n  id: uuid(),\n  label: \"draw\",\n  icon: React.createElement(GestureIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })\n}, // { id: uuid(), label: \"raw\" },\n// { id: uuid(), label: \"expandable\" },\n// { id: uuid(), label: \"unsubscribed\" },\n{\n  id: uuid(),\n  label: \"dropdown\",\n  icon: React.createElement(SelectIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })\n}]; // todo: add ShowAfterProperty, this one is allowed for every type.\n\nexport const PROPERTIES_BY_QUESTION_TYPE = {\n  CHECKBOX: [RequiredProperty, HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, TextOptionsProperty, OtherwiseProperty],\n  RADIO: [RequiredProperty, HiddenProperty, TitleProperty,, SectionStartProperty, SectionEndProperty, TooltipProperty, TextOptionsProperty, OtherwiseProperty],\n  LIKERT: [HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, PrioritizedTextOptionsProperty],\n  RANGE: [HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, MinProperty, MaxProperty, StepProperty, LabelOptionsProperty],\n  RAW: [SectionStartProperty, SectionEndProperty, ContentProperty],\n  TEXTAREA: [HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, PlaceholderProperty],\n  TEXTFIELD: [HiddenProperty, SectionStartProperty, TitleProperty, TooltipProperty, SectionEndProperty, PlaceholderProperty, DefaultTextValueProperty, PatternProperty, HintProperty],\n  NUMBER: [RequiredProperty, HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, MinProperty, MaxProperty, PlaceholderProperty, MaxLengthProperty, LinksToExpandableProperty],\n  EXPANDABLE: [SectionStartProperty, AddButtonLabelProperty, RemoveButtonLabelProperty, DefaultExpansionsProperty, MaxExpansionsProperty],\n  TIME: [TitleProperty, HoursFromProperty, HoursToProperty, HoursStepProperty, HoursLabelProperty, MinutesLabelProperty],\n  DATE: [RequiredProperty, HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, MinDateProperty, MaxDateProperty, PlaceholderProperty, TodayProperty, DefaultDateProperty],\n  UNSUBSCRIBE: [TitleProperty, ContentProperty, ButtonTextProperty],\n  DROPDOWN: [HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, PrioritizedTextOptionsProperty, LabelProperty],\n  DRAWING: [HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, WidthProperty, HeightProperty, ImageProperty, ColorProperty, RadiusProperty, DensityProperty]\n};\n/*\n* Because of the slight difference in storing options between radio/checkboxes and likert/dropdown, a conversion\n* needs to be done. This function adds a numeric_value (index by default) to the elements of a given textOptions.\n*\n* parameter: textOptions: an array of strings\n* returns: an array of JSON containing the converted options.\n* */\n\nexport function TextOptionsToPrioritizedTextOptions(textOptions) {\n  return textOptions.map((option, index) => ({\n    title: option,\n    numeric_value: index\n  }));\n}\n/*\n* The opposite to the function above. This converts a JSON array of prioritized text to a simple string array\n* containing the titles of those (previously) prioritized options.\n* */\n\nexport function PrioritizedTextOptionsToTextOptions(prioritizedTextOptions) {\n  return prioritizedTextOptions.map(json => json.title);\n}\n/*\n* A map containing special conversion cases.\n* As explained in TextOptionsToPrioritizedTextOptions, some properties in question types share the same name\n* but are differently defined per type. This map stores those exception as follows:\n*\n* - Identified by the current type (uppercase)\n* - JSON containing each type that, if the current type will be converted to this, has special conversion cases.\n* - specialConversions: an array holding the actual conversion data:\n*     - property: the property to be converted\n*     - conversionFunction: the function that handles the special conversion.\n* */\n\nconst TEXT_OPTION_TO_PRIORITIZED_CASE = {\n  likert: [{\n    property: 'options',\n    conversionFunction: TextOptionsToPrioritizedTextOptions\n  }],\n  dropdown: [{\n    property: 'options',\n    conversionFunction: TextOptionsToPrioritizedTextOptions\n  }]\n};\nconst PRIORITIZED_TO_TEXT_OPTION_CASE = {\n  radio: [{\n    property: 'options',\n    conversionFunction: PrioritizedTextOptionsToTextOptions\n  }],\n  checkbox: [{\n    property: 'options',\n    conversionFunction: PrioritizedTextOptionsToTextOptions\n  }]\n};\nexport const SPECIAL_CONVERSION_CASES = {\n  radio: TEXT_OPTION_TO_PRIORITIZED_CASE,\n  checkbox: TEXT_OPTION_TO_PRIORITIZED_CASE,\n  likert: PRIORITIZED_TO_TEXT_OPTION_CASE,\n  dropdown: PRIORITIZED_TO_TEXT_OPTION_CASE // todo: add special case: min/max for numeric and date\n\n};\n/*\nconst MiscProperties = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Misc.</h3>\n      <p><i>These items are available in <b>multiple</b> other question types.</i></p>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <RequiredProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <ShowOtherwiseProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    {newQuestion.show_otherwise ?\n      <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n        <OtherwiseLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n        <OtherwiseTooltipProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      </Grid>\n      : null}\n    <HiddenProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n      <TooltipProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    </Grid>\n\n    <MinProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <MaxProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n\n    {}\n    <ContentProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <PlaceholderProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <SectionStartProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <SectionEndProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n  </CustomGrid>\n};\nconst DrawingSpecificVariables = () => {\n  const DrawingGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Drawing-specific.</h3>\n      {props.children}\n    </Grid>;\n\n  return <DrawingGrid>\n    <WidthProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <HeightProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <ImageProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <ColorProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <RadiusProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <DensityProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </DrawingGrid>\n}\nconst TextFieldSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Textfield-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <DefaultTextValueProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <PatternProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <HintProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst NumberSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Number-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <MaxLengthProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <LinksToExpandableProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst RangeSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Range-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <StepProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <LabelOptionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst ExpandableSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Expandable-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <AddButtonLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <RemoveButtonLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <DefaultExpansionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <MaxExpansionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst TimeSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Time-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <HoursFromProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <HoursToProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <HoursStepProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <HoursLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <MinutesLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst DateSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Date-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <TodayProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <DefaultDateProperty disabled={newQuestion.today} newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <MinDateProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <MaxDateProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n\n  </CustomGrid>\n};\nconst UnsubscribeSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Unsubscribe-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <ButtonTextProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <DataMethodProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst DropdownSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Dropdown-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <LabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\n*/","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionTypes.js"],"names":["React","v4","uuid","RadioButtonCheckedIcon","CheckBoxIcon","TuneIcon","LinearScaleIcon","Looks5TwoToneIcon","TextFieldsIcon","DateRangeIcon","ScheduleIcon","TextFormatIcon","GestureIcon","SelectIcon","AddButtonLabelProperty","ButtonTextProperty","ColorProperty","ContentProperty","DefaultDateProperty","DefaultExpansionsProperty","DefaultTextValueProperty","DensityProperty","HeightProperty","HiddenProperty","HintProperty","HoursFromProperty","HoursLabelProperty","HoursStepProperty","HoursToProperty","ImageProperty","LabelOptionsProperty","LabelProperty","LinksToExpandableProperty","MaxDateProperty","MaxExpansionsProperty","MaxLengthProperty","MaxProperty","MinDateProperty","MinProperty","MinutesLabelProperty","OtherwiseProperty","PatternProperty","PlaceholderProperty","PrioritizedTextOptionsProperty","RadiusProperty","RemoveButtonLabelProperty","RequiredProperty","SectionEndProperty","SectionStartProperty","StepProperty","TextOptionsProperty","TitleProperty","TodayProperty","TooltipProperty","WidthProperty","QUESTION_TYPES","id","label","icon","PROPERTIES_BY_QUESTION_TYPE","CHECKBOX","RADIO","LIKERT","RANGE","RAW","TEXTAREA","TEXTFIELD","NUMBER","EXPANDABLE","TIME","DATE","UNSUBSCRIBE","DROPDOWN","DRAWING","TextOptionsToPrioritizedTextOptions","textOptions","map","option","index","title","numeric_value","PrioritizedTextOptionsToTextOptions","prioritizedTextOptions","json","TEXT_OPTION_TO_PRIORITIZED_CASE","likert","property","conversionFunction","dropdown","PRIORITIZED_TO_TEXT_OPTION_CASE","radio","checkbox","SPECIAL_CONVERSION_CASES"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {v4 as uuid} from \"uuid\";\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport TuneIcon from '@material-ui/icons/Tune';\nimport LinearScaleIcon from '@material-ui/icons/LinearScale';\nimport Looks5TwoToneIcon from '@material-ui/icons/Looks5TwoTone';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport GestureIcon from '@material-ui/icons/Gesture';\nimport SelectIcon from '@material-ui/icons/ViewList';\nimport {\n  AddButtonLabelProperty,\n  ButtonTextProperty,\n  ColorProperty,\n  ContentProperty,\n  DefaultDateProperty,\n  DefaultExpansionsProperty,\n  DefaultTextValueProperty,\n  DensityProperty,\n  HeightProperty,\n  HiddenProperty,\n  HintProperty,\n  HoursFromProperty,\n  HoursLabelProperty,\n  HoursStepProperty,\n  HoursToProperty,\n  ImageProperty,\n  LabelOptionsProperty,\n  LabelProperty,\n  LinksToExpandableProperty,\n  MaxDateProperty,\n  MaxExpansionsProperty,\n  MaxLengthProperty,\n  MaxProperty,\n  MinDateProperty,\n  MinProperty,\n  MinutesLabelProperty,\n  OtherwiseProperty,\n  PatternProperty,\n  PlaceholderProperty,\n  PrioritizedTextOptionsProperty,\n  RadiusProperty,\n  RemoveButtonLabelProperty,\n  RequiredProperty,\n  SectionEndProperty,\n  SectionStartProperty,\n  StepProperty,\n  TextOptionsProperty,\n  TitleProperty,\n  TodayProperty,\n  TooltipProperty,\n  WidthProperty\n} from \"./QuestionnaireProperties\";\n\nexport const QUESTION_TYPES = [\n  {id: uuid(), label: \"radio\", icon: <RadioButtonCheckedIcon/>},\n  {id: uuid(), label: \"checkbox\", icon: <CheckBoxIcon/>},\n  {id: uuid(), label: \"range\", icon: <TuneIcon/>},\n  {id: uuid(), label: \"likert\", icon: <LinearScaleIcon/>},\n  {id: uuid(), label: \"textarea\", icon: <TextFieldsIcon/>},\n  {id: uuid(), label: \"number\", icon: <Looks5TwoToneIcon/>},\n  {id: uuid(), label: \"date\", icon: <DateRangeIcon/>},\n  {id: uuid(), label: \"time\", icon: <ScheduleIcon/>},\n  {id: uuid(), label: \"textfield\", icon: <TextFormatIcon/>},\n  {id: uuid(), label: \"draw\", icon: <GestureIcon/>},\n  // { id: uuid(), label: \"raw\" },\n  // { id: uuid(), label: \"expandable\" },\n  // { id: uuid(), label: \"unsubscribed\" },\n  {id: uuid(), label: \"dropdown\", icon: <SelectIcon/>}\n];\n\n// todo: add ShowAfterProperty, this one is allowed for every type.\nexport const PROPERTIES_BY_QUESTION_TYPE = {\n  CHECKBOX: [RequiredProperty, HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty,\n              TooltipProperty, TextOptionsProperty, OtherwiseProperty],\n\n  RADIO: [ RequiredProperty, HiddenProperty, TitleProperty,, SectionStartProperty, SectionEndProperty,\n    TooltipProperty, TextOptionsProperty, OtherwiseProperty],\n\n  LIKERT: [HiddenProperty ,TitleProperty, SectionStartProperty, SectionEndProperty,\n    TooltipProperty, PrioritizedTextOptionsProperty],\n\n  RANGE: [HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty,\n    TooltipProperty, MinProperty, MaxProperty, StepProperty, LabelOptionsProperty],\n\n  RAW: [SectionStartProperty, SectionEndProperty, ContentProperty],\n\n  TEXTAREA: [HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, PlaceholderProperty],\n\n  TEXTFIELD: [HiddenProperty, SectionStartProperty, TitleProperty, TooltipProperty, SectionEndProperty, PlaceholderProperty,\n    DefaultTextValueProperty, PatternProperty, HintProperty],\n\n  NUMBER: [RequiredProperty, HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty,\n  MinProperty, MaxProperty, PlaceholderProperty, MaxLengthProperty, LinksToExpandableProperty],\n\n  EXPANDABLE: [SectionStartProperty, AddButtonLabelProperty, RemoveButtonLabelProperty, DefaultExpansionsProperty,\n  MaxExpansionsProperty],\n\n  TIME: [TitleProperty, HoursFromProperty, HoursToProperty, HoursStepProperty, HoursLabelProperty, MinutesLabelProperty],\n\n  DATE: [RequiredProperty, HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty,\n  MinDateProperty, MaxDateProperty, PlaceholderProperty, TodayProperty, DefaultDateProperty],\n\n  UNSUBSCRIBE: [TitleProperty, ContentProperty, ButtonTextProperty],\n\n  DROPDOWN: [HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, PrioritizedTextOptionsProperty,\n  LabelProperty],\n\n  DRAWING: [HiddenProperty, TitleProperty, SectionStartProperty, SectionEndProperty, TooltipProperty, WidthProperty, HeightProperty,\n  ImageProperty, ColorProperty, RadiusProperty, DensityProperty]\n};\n\n\n\n/*\n* Because of the slight difference in storing options between radio/checkboxes and likert/dropdown, a conversion\n* needs to be done. This function adds a numeric_value (index by default) to the elements of a given textOptions.\n*\n* parameter: textOptions: an array of strings\n* returns: an array of JSON containing the converted options.\n* */\nexport function TextOptionsToPrioritizedTextOptions(textOptions){\n  return textOptions.map((option, index) => ({title: option, numeric_value: index}));\n}\n/*\n* The opposite to the function above. This converts a JSON array of prioritized text to a simple string array\n* containing the titles of those (previously) prioritized options.\n* */\nexport function PrioritizedTextOptionsToTextOptions(prioritizedTextOptions){\n  return prioritizedTextOptions.map((json) => json.title);\n}\n\n/*\n* A map containing special conversion cases.\n* As explained in TextOptionsToPrioritizedTextOptions, some properties in question types share the same name\n* but are differently defined per type. This map stores those exception as follows:\n*\n* - Identified by the current type (uppercase)\n* - JSON containing each type that, if the current type will be converted to this, has special conversion cases.\n* - specialConversions: an array holding the actual conversion data:\n*     - property: the property to be converted\n*     - conversionFunction: the function that handles the special conversion.\n* */\n\nconst TEXT_OPTION_TO_PRIORITIZED_CASE =  {\n  likert: [{property: 'options', conversionFunction: TextOptionsToPrioritizedTextOptions}],\n  dropdown: [{property: 'options', conversionFunction: TextOptionsToPrioritizedTextOptions}],\n};\n\nconst PRIORITIZED_TO_TEXT_OPTION_CASE =  {\n  radio: [{property: 'options', conversionFunction: PrioritizedTextOptionsToTextOptions}],\n  checkbox: [{property: 'options', conversionFunction: PrioritizedTextOptionsToTextOptions}],\n};\n\nexport const SPECIAL_CONVERSION_CASES = {\n  radio: TEXT_OPTION_TO_PRIORITIZED_CASE,\n  checkbox: TEXT_OPTION_TO_PRIORITIZED_CASE,\n  likert: PRIORITIZED_TO_TEXT_OPTION_CASE,\n  dropdown: PRIORITIZED_TO_TEXT_OPTION_CASE\n\n  // todo: add special case: min/max for numeric and date\n};\n\n\n\n/*\nconst MiscProperties = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Misc.</h3>\n      <p><i>These items are available in <b>multiple</b> other question types.</i></p>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <RequiredProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <ShowOtherwiseProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    {newQuestion.show_otherwise ?\n      <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n        <OtherwiseLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n        <OtherwiseTooltipProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      </Grid>\n      : null}\n    <HiddenProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n      <TooltipProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    </Grid>\n\n    <MinProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <MaxProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n\n    {}\n    <ContentProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <PlaceholderProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <SectionStartProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n    <SectionEndProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n  </CustomGrid>\n};\nconst DrawingSpecificVariables = () => {\n  const DrawingGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Drawing-specific.</h3>\n      {props.children}\n    </Grid>;\n\n  return <DrawingGrid>\n    <WidthProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <HeightProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <ImageProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <ColorProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <RadiusProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <DensityProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </DrawingGrid>\n}\nconst TextFieldSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Textfield-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <DefaultTextValueProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <PatternProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <HintProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst NumberSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Number-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <MaxLengthProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <LinksToExpandableProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst RangeSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Range-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <StepProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <LabelOptionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst ExpandableSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Expandable-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <AddButtonLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <RemoveButtonLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <DefaultExpansionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <MaxExpansionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst TimeSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Time-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <HoursFromProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <HoursToProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <HoursStepProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <HoursLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <MinutesLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst DateSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Date-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <TodayProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <DefaultDateProperty disabled={newQuestion.today} newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <MinDateProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <MaxDateProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n\n  </CustomGrid>\n};\nconst UnsubscribeSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Unsubscribe-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <ButtonTextProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n    <DataMethodProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\nconst DropdownSpecificVariables = () => {\n  const CustomGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Dropdown-specific.</h3>\n      {props.children}\n    </Grid>;\n  return <CustomGrid>\n    <LabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n  </CustomGrid>\n};\n*/\n"]},"metadata":{},"sourceType":"module"}