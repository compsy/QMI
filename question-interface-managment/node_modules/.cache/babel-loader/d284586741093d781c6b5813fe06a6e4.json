{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Box, Dialog, IconButton, TextField, Button, InputAdornment, Grid, Typography, Select, MenuItem, InputLabel, FormControl } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport { AddButtonLabelProperty, ButtonTextProperty, ColorProperty, ContentProperty, DataMethodProperty, DefaultDateProperty, DefaultExpansionsProperty, DefaultTextValueProperty, DensityProperty, HeightProperty, HiddenProperty, HintProperty, HoursFromProperty, HoursLabelProperty, HoursStepProperty, HoursToProperty, ImageProperty, LabelOptionsProperty, LabelProperty, MaxDateProperty, MaxExpansionsProperty, MaxLengthProperty, MaxProperty, MinDateProperty, MinProperty, MinutesLabelProperty, OtherwiseLabelProperty, OtherwiseTooltipProperty, PatternProperty, PlaceholderProperty, RadiusProperty, RemoveButtonLabelProperty, RequiredProperty, SectionEndProperty, SectionStartProperty, ShowOtherwiseProperty, StepProperty, TextOptionsProperty, TitleProperty, TodayProperty, TooltipProperty, WidthProperty } from \"./QuestionnaireProperties\";\n\nconst EditDialog = ({\n  question,\n  open,\n  setOpen\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // load question to editor state on dialog open\n\n  useEffect(() => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...question\n      }\n    });\n  }, [open, newQuestionDispatch, question]); // dispatch action to questionnaireReducer to update question\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: newQuestion\n    });\n    console.table(question);\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: {\n        title: \"\",\n        options: []\n      }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      padding: \"1em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(DialogBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(DialogFooter, {\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }))));\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext);\n\n  const GridItem = props => React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: props.textAlign,\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, props.children);\n\n  const TypeSelector = () => React.createElement(Select, {\n    autoWidth: true,\n    labelId: \"type-select-label\",\n    value: newQuestion.type,\n    onChange: e => newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        type: e.target.value\n      }\n    }),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Radio\"), React.createElement(MenuItem, {\n    value: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Checkbox\"), React.createElement(MenuItem, {\n    value: \"range\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Range\"), React.createElement(MenuItem, {\n    value: \"likert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Likert\"));\n\n  const QuestionTitle = () => React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Edit Question \", questions.indexOf(question) + 1);\n\n  return React.createElement(GridItem, {\n    textAlign: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"type-select-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"Type\"), React.createElement(TypeSelector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(QuestionTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }))));\n};\n\nconst DialogBody = () => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // Grid for boolean items. These are switches, checkboxes, etc.\n\n  const MiscProperties = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Misc.\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"These items are available in \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"multiple\"), \" other question types.\")), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(RequiredProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(ShowOtherwiseProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), newQuestion.show_otherwise ? React.createElement(Grid, {\n      item: true,\n      xs: true,\n      style: {\n        textAlign: \"center\",\n        margin: \"1em 0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(OtherwiseLabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(OtherwiseTooltipProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })) : null, React.createElement(HiddenProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      item: true,\n      xs: true,\n      style: {\n        textAlign: \"center\",\n        margin: \"1em 0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(TooltipProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    })), React.createElement(MinProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), React.createElement(MaxProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(ContentProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(PlaceholderProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(SectionStartProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(SectionEndProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }));\n  };\n\n  const DrawingSpecificVariables = () => {\n    const DrawingGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Drawing-specific.\"), props.children);\n\n    return React.createElement(DrawingGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(WidthProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }), React.createElement(HeightProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }), React.createElement(ImageProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(ColorProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }), React.createElement(RadiusProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(DensityProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }));\n  };\n\n  const TextFieldSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Textfield-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(DefaultTextValueProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), React.createElement(PatternProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), React.createElement(HintProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }));\n  };\n\n  const NumberSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"Number-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(MaxLengthProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }));\n  };\n\n  const RangeSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Range-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(StepProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }));\n  };\n\n  const ExpandableSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, \"Expandable-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(AddButtonLabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(RemoveButtonLabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(DefaultExpansionsProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), React.createElement(MaxExpansionsProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }));\n  };\n\n  const TimeSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, \"Time-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(HoursFromProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }), React.createElement(HoursToProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(HoursStepProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }), React.createElement(HoursLabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }), React.createElement(MinutesLabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }));\n  };\n\n  const DateSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, \"Date-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(TodayProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(DefaultDateProperty, {\n      disabled: newQuestion.today,\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }), React.createElement(MinDateProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }), React.createElement(MaxDateProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }));\n  };\n\n  const UnsubscribeSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, \"Unsubscribe-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, React.createElement(ButtonTextProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }), React.createElement(DataMethodProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }));\n  };\n\n  const DropdownSpecificVariables = () => {\n    const CustomGrid = props => React.createElement(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, \"Dropdown-specific.\"), props.children);\n\n    return React.createElement(CustomGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, React.createElement(LabelProperty, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489\n    },\n    __self: this\n  }, React.createElement(TitleProperty, {\n    required: true,\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506\n    },\n    __self: this\n  }, \"All other properties (debug)\"), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507\n    },\n    __self: this\n  }, React.createElement(TextOptionsProperty, {\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513\n    },\n    __self: this\n  }, React.createElement(MiscProperties, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514\n    },\n    __self: this\n  }), {\n    date: React.createElement(DateSpecificVariables, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }),\n    drawing: React.createElement(DrawingSpecificVariables, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }),\n    dropdown: React.createElement(DropdownSpecificVariables, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }),\n    expandable: React.createElement(ExpandableSpecificVariables, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }),\n    number: React.createElement(NumberSpecificVariables, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }),\n    range: React.createElement(RangeSpecificVariables, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    }),\n    textfield: React.createElement(TextFieldSpecificVariables, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523\n      },\n      __self: this\n    }),\n    time: React.createElement(TimeSpecificVariables, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }),\n    unsubscribe: React.createElement(UnsubscribeSpecificVariables, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    })\n  }[newQuestion.type])));\n};\n\nconst DialogFooter = ({\n  handleClose\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n\n  const GridItem = props => React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538\n    },\n    __self: this\n  }, props.children);\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    alignItems: \"flex-start\",\n    justify: \"flex-end\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 563\n    },\n    __self: this\n  }, \"cancel\")), React.createElement(GridItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568\n    },\n    __self: this\n  }, \"submit\")));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js"],"names":["React","useState","useContext","useEffect","Box","Dialog","IconButton","TextField","Button","InputAdornment","Grid","Typography","Select","MenuItem","InputLabel","FormControl","DeleteIcon","QuestionnaireContext","SettingsContext","NewQuestionContext","ToggleGridAreasButton","AddButtonLabelProperty","ButtonTextProperty","ColorProperty","ContentProperty","DataMethodProperty","DefaultDateProperty","DefaultExpansionsProperty","DefaultTextValueProperty","DensityProperty","HeightProperty","HiddenProperty","HintProperty","HoursFromProperty","HoursLabelProperty","HoursStepProperty","HoursToProperty","ImageProperty","LabelOptionsProperty","LabelProperty","MaxDateProperty","MaxExpansionsProperty","MaxLengthProperty","MaxProperty","MinDateProperty","MinProperty","MinutesLabelProperty","OtherwiseLabelProperty","OtherwiseTooltipProperty","PatternProperty","PlaceholderProperty","RadiusProperty","RemoveButtonLabelProperty","RequiredProperty","SectionEndProperty","SectionStartProperty","ShowOtherwiseProperty","StepProperty","TextOptionsProperty","TitleProperty","TodayProperty","TooltipProperty","WidthProperty","EditDialog","question","open","setOpen","settings","dispatch","newQuestion","newQuestionDispatch","type","handleSubmit","event","preventDefault","id","new","console","table","title","options","handleClose","padding","background","showGridAreas","DialogHeader","questions","GridItem","props","textAlign","opacity","children","TypeSelector","e","target","value","QuestionTitle","indexOf","DialogBody","MiscProperties","CustomGrid","show_otherwise","margin","DrawingSpecificVariables","DrawingGrid","TextFieldSpecificVariables","NumberSpecificVariables","RangeSpecificVariables","ExpandableSpecificVariables","TimeSpecificVariables","DateSpecificVariables","today","UnsubscribeSpecificVariables","DropdownSpecificVariables","date","drawing","dropdown","expandable","number","range","textfield","time","unsubscribe","DialogFooter"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Box,\n  Dialog,\n  IconButton,\n  TextField,\n  Button,\n  InputAdornment,\n  Grid,\n  Typography,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport {\n  AddButtonLabelProperty,\n  ButtonTextProperty,\n  ColorProperty,\n  ContentProperty,\n  DataMethodProperty,\n  DefaultDateProperty,\n  DefaultExpansionsProperty,\n  DefaultTextValueProperty,\n  DensityProperty,\n  HeightProperty,\n  HiddenProperty,\n  HintProperty,\n  HoursFromProperty,\n  HoursLabelProperty,\n  HoursStepProperty,\n  HoursToProperty,\n  ImageProperty,\n  LabelOptionsProperty,\n  LabelProperty,\n  MaxDateProperty,\n  MaxExpansionsProperty,\n  MaxLengthProperty,\n  MaxProperty,\n  MinDateProperty,\n  MinProperty,\n  MinutesLabelProperty,\n  OtherwiseLabelProperty,\n  OtherwiseTooltipProperty,\n  PatternProperty,\n  PlaceholderProperty,\n  RadiusProperty,\n  RemoveButtonLabelProperty,\n  RequiredProperty,\n  SectionEndProperty,\n  SectionStartProperty,\n  ShowOtherwiseProperty,\n  StepProperty,\n  TextOptionsProperty,\n  TitleProperty,\n  TodayProperty,\n  TooltipProperty,\n  WidthProperty\n} from \"./QuestionnaireProperties\";\n\nconst EditDialog = ({ question, open, setOpen }) => {\n  const { settings } = useContext(SettingsContext);\n  const { dispatch } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    newQuestionDispatch({ type: \"SET_QUESTION\", question: { ...question } });\n  }, [open, newQuestionDispatch, question]);\n\n  // dispatch action to questionnaireReducer to update question\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n    console.table(question);\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { title: \"\", options: [] }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      {/* <ToggleGridAreasButton /> */}\n      <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n          style={{\n            padding: \"2em\",\n            background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n          }}\n        >\n          <DialogHeader question={question} />\n          <DialogBody />\n          <DialogFooter handleClose={handleClose} />\n        </Grid>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  const GridItem = props => (\n    <Grid\n      item\n      xs={12}\n      style={{\n        textAlign: props.textAlign,\n        background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n        opacity: settings.showGridAreas ? 0.9 : 1.0\n      }}\n    >\n      {props.children}\n    </Grid>\n  );\n\n  const TypeSelector = () => (\n    <Select\n      autoWidth\n      labelId=\"type-select-label\"\n      value={newQuestion.type}\n      onChange={e =>\n        newQuestionDispatch({\n          type: \"SET_QUESTION\",\n          question: { ...newQuestion, type: e.target.value }\n        })\n      }\n      style={{ textAlign: \"left\" }}\n    >\n      {/*TODO: not everything is compatible for convert, so only show what's allowed.*/}\n      <MenuItem value=\"radio\">Radio</MenuItem>\n      <MenuItem value=\"checkbox\">Checkbox</MenuItem>\n      <MenuItem value=\"range\">Range</MenuItem>\n      <MenuItem value=\"likert\">Likert</MenuItem>\n    </Select>\n  );\n\n  const QuestionTitle = () => (\n    <Typography variant=\"h5\">\n      Edit Question {questions.indexOf(question) + 1}\n    </Typography>\n  );\n\n  return (\n    <GridItem textAlign=\"right\">\n      <FormControl>\n        <InputLabel id=\"type-select-label\">Type</InputLabel>\n        <TypeSelector />\n      </FormControl>\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <GridItem textAlign=\"left\">\n          <QuestionTitle />\n        </GridItem>\n      </Grid>\n    </GridItem>\n  );\n};\n\nconst DialogBody = () => {\n  const { settings } = useContext(SettingsContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // Grid for boolean items. These are switches, checkboxes, etc.\n\n  const MiscProperties = () => {\n    const CustomGrid = props => (\n      <Grid item xs={4}>\n        <h3>Misc.</h3>\n        <p>\n          <i>\n            These items are available in <b>multiple</b> other question types.\n          </i>\n        </p>\n        {props.children}\n      </Grid>\n    );\n    return (\n      <CustomGrid>\n        <RequiredProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <ShowOtherwiseProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        {newQuestion.show_otherwise ? (\n          <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n            <OtherwiseLabelProperty\n              newQuestion={newQuestion}\n              newQuestionDispatch={newQuestionDispatch}\n            />\n            <OtherwiseTooltipProperty\n              newQuestion={newQuestion}\n              newQuestionDispatch={newQuestionDispatch}\n            />\n          </Grid>\n        ) : null}\n        <HiddenProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n          <TooltipProperty\n            newQuestion={newQuestion}\n            newQuestionDispatch={newQuestionDispatch}\n          />\n        </Grid>\n\n        <MinProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <MaxProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n\n        {/*todo: check if this property is valid for BOTH raw and unsubscribe.*/}\n        <ContentProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <PlaceholderProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <SectionStartProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <SectionEndProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n      </CustomGrid>\n    );\n  };\n  const DrawingSpecificVariables = () => {\n    const DrawingGrid = props => (\n      <Grid item xs={4}>\n        <h3>Drawing-specific.</h3>\n        {props.children}\n      </Grid>\n    );\n\n    return (\n      <DrawingGrid>\n        <WidthProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <HeightProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <ImageProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <ColorProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <RadiusProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <DensityProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n      </DrawingGrid>\n    );\n  };\n  const TextFieldSpecificVariables = () => {\n    const CustomGrid = props => (\n      <Grid item xs={4}>\n        <h3>Textfield-specific.</h3>\n        {props.children}\n      </Grid>\n    );\n    return (\n      <CustomGrid>\n        <DefaultTextValueProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <PatternProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <HintProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n      </CustomGrid>\n    );\n  };\n  const NumberSpecificVariables = () => {\n    const CustomGrid = props => (\n      <Grid item xs={4}>\n        <h3>Number-specific.</h3>\n        {props.children}\n      </Grid>\n    );\n    return (\n      <CustomGrid>\n        <MaxLengthProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n      </CustomGrid>\n    );\n  };\n  const RangeSpecificVariables = () => {\n    const CustomGrid = props => (\n      <Grid item xs={4}>\n        <h3>Range-specific.</h3>\n        {props.children}\n      </Grid>\n    );\n    return (\n      <CustomGrid>\n        <StepProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        {/* <LabelOptionsProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        /> */}\n      </CustomGrid>\n    );\n  };\n  const ExpandableSpecificVariables = () => {\n    const CustomGrid = props => (\n      <Grid item xs={4}>\n        <h3>Expandable-specific.</h3>\n        {props.children}\n      </Grid>\n    );\n    return (\n      <CustomGrid>\n        <AddButtonLabelProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <RemoveButtonLabelProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <DefaultExpansionsProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <MaxExpansionsProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n      </CustomGrid>\n    );\n  };\n  const TimeSpecificVariables = () => {\n    const CustomGrid = props => (\n      <Grid item xs={4}>\n        <h3>Time-specific.</h3>\n        {props.children}\n      </Grid>\n    );\n    return (\n      <CustomGrid>\n        <HoursFromProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <HoursToProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <HoursStepProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <HoursLabelProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <MinutesLabelProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n      </CustomGrid>\n    );\n  };\n  const DateSpecificVariables = () => {\n    const CustomGrid = props => (\n      <Grid item xs={4}>\n        <h3>Date-specific.</h3>\n        {props.children}\n      </Grid>\n    );\n    return (\n      <CustomGrid>\n        <TodayProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <DefaultDateProperty\n          disabled={newQuestion.today}\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <MinDateProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <MaxDateProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n      </CustomGrid>\n    );\n  };\n  const UnsubscribeSpecificVariables = () => {\n    const CustomGrid = props => (\n      <Grid item xs={4}>\n        <h3>Unsubscribe-specific.</h3>\n        {props.children}\n      </Grid>\n    );\n    return (\n      <CustomGrid>\n        <ButtonTextProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n        <DataMethodProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n      </CustomGrid>\n    );\n  };\n  const DropdownSpecificVariables = () => {\n    const CustomGrid = props => (\n      <Grid item xs={4}>\n        <h3>Dropdown-specific.</h3>\n        {props.children}\n      </Grid>\n    );\n    return (\n      <CustomGrid>\n        <LabelProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n        />\n      </CustomGrid>\n    );\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n      spacing={4}\n    >\n      <Grid\n        item\n        xs={12}\n        style={{\n          background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n        <TitleProperty\n          required\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n          style={{ margin: \"1em 0\" }}\n        />\n      </Grid>\n\n      <Grid item xs={12}>\n        <h5>All other properties (debug)</h5>\n        <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n          <TextOptionsProperty\n            newQuestion={newQuestion}\n            newQuestionDispatch={newQuestionDispatch}\n          />\n        </Grid>\n        <Grid container direction=\"row\">\n          <MiscProperties />\n          {\n            {\n              date: <DateSpecificVariables />,\n              drawing: <DrawingSpecificVariables />,\n              dropdown: <DropdownSpecificVariables />,\n              expandable: <ExpandableSpecificVariables />,\n              number: <NumberSpecificVariables />,\n              range: <RangeSpecificVariables />,\n              textfield: <TextFieldSpecificVariables />,\n              time: <TimeSpecificVariables />,\n              unsubscribe: <UnsubscribeSpecificVariables />\n            }[newQuestion.type]\n          }\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DialogFooter = ({ handleClose }) => {\n  const { settings } = useContext(SettingsContext);\n\n  const GridItem = props => (\n    <Grid\n      item\n      xs\n      style={{\n        textAlign: \"center\",\n        background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n        opacity: settings.showGridAreas ? 0.9 : 1.0\n      }}\n    >\n      {props.children}\n    </Grid>\n  );\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      alignItems=\"flex-start\"\n      justify=\"flex-end\"\n      style={{\n        padding: \"2em\",\n        background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n      }}\n    >\n      <GridItem>\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>\n          cancel\n        </Button>\n      </GridItem>\n      <GridItem>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n          submit\n        </Button>\n      </GridItem>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}