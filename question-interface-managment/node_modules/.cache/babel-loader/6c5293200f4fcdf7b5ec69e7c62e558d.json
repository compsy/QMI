{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js\";\nimport React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport { Container, Card, Typography, Button } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport AddQuestionButton from \"./buttons/AddQuestionButton\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport { useState } from \"react\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { settingsReducer } from \"../reducers/settingsReducer\";\n\nconst QuestionsPage = () => {\n  return React.createElement(Container, {\n    maxWidth: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(TopSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(BottomSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }));\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"2em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(AddQuestionButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(ToggleGridAreasButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(StringifiedJSONCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }));\n};\n\nconst StringifiedJSONCard = () => {\n  const {\n    questions\n  } = useContext(QuestionnaireContext); // formats the ids\n\n  const toPrint = questions.map((question, index) => {\n    const obj = question.type === \"range\" ? {\n      id: `v${index + 1}`,\n      type: question.type,\n      title: question.title,\n      labels: question.options\n    } : { ...question,\n      id: `v${index + 1}`\n    };\n    return obj;\n  });\n  return React.createElement(Card, {\n    variant: \"outlined\",\n    style: {\n      wordWrap: \"break-word\",\n      wordBreak: \"break-word\",\n      margin: \"0.5em auto\",\n      padding: \"2em\",\n      height: \"150px\",\n      overflow: \"scroll\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, JSON.stringify(toPrint)));\n};\n\nconst BottomSection = () => {\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  const {\n    settings,\n    dispatch\n  } = useContext(SettingsContext);\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"1em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Questions\"), React.createElement(Button, {\n    onClick: () => dispatch({\n      type: \"TOGGLE_EXPANSION_PANELS\"\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, settings.expandAll ? \"close all\" : \"expand all\"), questions.map(question => React.createElement(Question, {\n    key: uuidv1(),\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(AddQuestionButton2, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js"],"names":["React","useContext","v1","uuidv1","Container","Card","Typography","Button","QuestionnaireContext","Question","AddQuestionButton","ToggleGridAreasButton","AddQuestionButton2","useState","SettingsContext","settingsReducer","QuestionsPage","TopSection","textAlign","margin","StringifiedJSONCard","questions","toPrint","map","question","index","obj","type","id","title","labels","options","wordWrap","wordBreak","padding","height","overflow","JSON","stringify","BottomSection","settings","dispatch","expandAll"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport { Container, Card, Typography, Button } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport AddQuestionButton from \"./buttons/AddQuestionButton\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport { useState } from \"react\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { settingsReducer } from \"../reducers/settingsReducer\";\n\nconst QuestionsPage = () => {\n  return (\n    <Container maxWidth=\"sm\">\n      <TopSection />\n      <BottomSection />\n    </Container>\n  );\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"2em auto\" }}>\n      <AddQuestionButton />\n      <ToggleGridAreasButton />\n      <StringifiedJSONCard />\n    </Container>\n  );\n};\n\nconst StringifiedJSONCard = () => {\n  const { questions } = useContext(QuestionnaireContext);\n  // formats the ids\n  const toPrint = questions.map((question, index) => {\n    const obj =\n      question.type === \"range\"\n        ? {\n            id: `v${index + 1}`,\n            type: question.type,\n            title: question.title,\n            labels: question.options\n          }\n        : {\n            ...question,\n            id: `v${index + 1}`\n          };\n    return obj;\n  });\n  return (\n    <Card\n      variant=\"outlined\"\n      style={{\n        wordWrap: \"break-word\",\n        wordBreak: \"break-word\",\n        margin: \"0.5em auto\",\n        padding: \"2em\",\n        height: \"150px\",\n        overflow: \"scroll\"\n      }}\n    >\n      <Typography variant=\"body2\">{JSON.stringify(toPrint)}</Typography>\n    </Card>\n  );\n};\n\nconst BottomSection = () => {\n  const { questions } = useContext(QuestionnaireContext);\n  const { settings, dispatch } = useContext(SettingsContext);\n\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"1em auto\" }}>\n      <Typography variant=\"h4\" style={{ margin: \"1em 0\" }}>\n        Questions\n      </Typography>\n      <Button onClick={() => dispatch({ type: \"TOGGLE_EXPANSION_PANELS\" })}>\n        {settings.expandAll ? \"close all\" : \"expand all\"}\n      </Button>\n      {questions.map(question => (\n        <Question key={uuidv1()} question={question} />\n      ))}\n      <AddQuestionButton2 />\n    </Container>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}