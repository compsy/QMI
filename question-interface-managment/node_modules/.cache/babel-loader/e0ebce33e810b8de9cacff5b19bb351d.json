{"ast":null,"code":"import uuid from \"uuid/v1\";\nimport { QUESTION_TYPES } from \"../components/QuestionTypes\";\n\nconst reorder = (list, startIndex, endIndex) => {\n  let newList = list.slice(0, list.length);\n  const [removed] = newList.splice(startIndex, 1);\n  newList.splice(endIndex, 0, removed);\n  return newList;\n};\n\nconst initialTextOptions = [\"option 1\", \"option 2\", \"option 3\", \"option 4\"];\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  let newDestination = destination.slice(0, destination.length);\n  const item = source[droppableSource.index]; // initialising question JSONs.\n\n  switch (item.label) {\n    case \"range\":\n      newDestination.splice(droppableDestination.index, 0, {\n        id: uuid(),\n        type: item.label,\n        title: `untitled ${item.label}`,\n        min: \"0\",\n        max: \"100\",\n        step: \"1\",\n        labels: initialTextOptions\n      });\n      break;\n\n    case \"checkbox\":\n    case \"radio\":\n      newDestination.splice(droppableDestination.index, 0, {\n        id: uuid(),\n        type: item.label,\n        title: `untitled ${item.label}`,\n        options: initialTextOptions\n      });\n      break;\n\n    case \"likert\":\n    case \"dropdown\":\n      newDestination.splice(droppableDestination.index, 0, {\n        id: uuid(),\n        type: item.label,\n        title: `untitled ${item.label}`,\n        options: initialTextOptions\n      });\n      break;\n\n    case \"raw\":\n      newDestination.splice(droppableDestination.index, 0, {\n        type: item.label,\n        title: `untitled ${item.label}`,\n        content: \"<p>This is untitled raw question</p>\"\n      });\n      break;\n\n    default:\n      newDestination.splice(droppableDestination.index, 0, {\n        id: uuid(),\n        type: item.label,\n        title: `untitled ${item.label}`\n      });\n      break;\n  }\n\n  return newDestination;\n};\n\nconst getQuestionTemplateByAction = (action, state) => {\n  const uniq = uuid();\n\n  switch (action.type) {\n    case \"range\":\n      return [...state, {\n        id: uniq,\n        type: action.questionType.toLowerCase(),\n        title: \"untitled \" + action.questionType,\n        min: \"0\",\n        max: \"100\",\n        step: \"1\",\n        labels: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      }];\n\n    case \"checkbox\":\n    case \"radio\":\n      return [...state, {\n        id: uniq,\n        type: action.questionType.toLowerCase(),\n        title: \"untitled \" + action.questionType,\n        options: initialTextOptions\n      }];\n\n    case \"likert\":\n    case \"dropdown\":\n      return [...state, {\n        id: uniq,\n        type: action.questionType.toLowerCase(),\n        title: \"untitled \" + action.questionType,\n        options: initialTextOptions\n      }];\n\n    case \"raw\":\n      return [...state, {\n        type: action.questionType.toLowerCase(),\n        title: \"untitled \" + action.questionType,\n        content: \"<p>This is untitled raw question</p>\"\n      }];\n\n    default:\n      return [...state, {\n        id: uniq,\n        type: action.questionType.toLowerCase(),\n        title: \"untitled \" + action.questionType\n      }];\n  }\n};\n\nexport const questionnaireReducer = (state, action) => {\n  switch (action.type) {\n    case \"REORDER\":\n      return reorder(state, action.source.index, action.destination.index);\n\n    case \"CLONE\":\n      return copy(QUESTION_TYPES, state, action.source, action.destination);\n\n    case \"SET_QUESTIONS\":\n      return action.questions;\n\n    case \"ADD_QUESTION\":\n      return getQuestionTemplateByAction(action, state);\n\n    case \"REMOVE_QUESTION\":\n      return state.filter(question => question.id !== action.id);\n\n    case \"REMOVE_ALL\":\n      return state.filter(question => question.id === action.id);\n\n    case \"UPDATE_QUESTION\":\n      return state.map(question => question.id === action.id ? action.new : question);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/reducers/questionnaireReducer.js"],"names":["uuid","QUESTION_TYPES","reorder","list","startIndex","endIndex","newList","slice","length","removed","splice","initialTextOptions","copy","source","destination","droppableSource","droppableDestination","newDestination","item","index","label","id","type","title","min","max","step","labels","options","content","getQuestionTemplateByAction","action","state","uniq","questionType","toLowerCase","questionnaireReducer","questions","filter","question","map","new"],"mappings":"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","sourcesContent":["import uuid from \"uuid/v1\";\nimport {QUESTION_TYPES} from \"../components/QuestionTypes\";\n\n\nconst reorder = (list, startIndex, endIndex) => {\n    let newList = list.slice(0, list.length);\n    const [removed] = newList.splice(startIndex, 1);\n    newList.splice(endIndex, 0, removed);\n    return newList;\n};\n\nconst initialTextOptions = [\"option 1\" , \"option 2\",\"option 3\" , \"option 4\"];\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n    let newDestination = destination.slice(0, destination.length);\n    const item = source[droppableSource.index];\n\n    // initialising question JSONs.\n    switch(item.label){\n        case \"range\":\n            newDestination.splice(droppableDestination.index, 0, {\n                id: uuid(),\n                type: item.label,\n                title: `untitled ${item.label}`,\n                min: \"0\",\n                max: \"100\",\n                step: \"1\",\n                labels: initialTextOptions\n            });\n            break;\n        case \"checkbox\":\n        case \"radio\":\n            newDestination.splice(droppableDestination.index, 0, {\n                id: uuid(),\n                type: item.label,\n                title: `untitled ${item.label}`,\n                options: initialTextOptions\n            });\n            break;\n        case \"likert\":\n        case \"dropdown\":\n            newDestination.splice(droppableDestination.index, 0, {\n                id: uuid(),\n                type: item.label,\n                title: `untitled ${item.label}`,\n                options: initialTextOptions\n            });\n            break;\n        case \"raw\":\n            newDestination.splice(droppableDestination.index, 0, {\n                type: item.label,\n                title: `untitled ${item.label}`,\n                content: \"<p>This is untitled raw question</p>\"\n            });\n            break;\n        default:\n            newDestination.splice(droppableDestination.index, 0, {\n                id: uuid(),\n                type: item.label,\n                title: `untitled ${item.label}`,\n            });\n            break;\n    }\n\n    return newDestination;\n};\n\nconst getQuestionTemplateByAction = (action, state) =>{\n    const uniq = uuid();\n    switch(action.type){\n        case \"range\":\n            return [\n                ...state, {\n                    id: uniq,\n                    type: action.questionType.toLowerCase(),\n                    title: \"untitled \" + action.questionType,\n                    min: \"0\",\n                    max: \"100\",\n                    step: \"1\",\n                    labels: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n                }];\n        case \"checkbox\":\n        case \"radio\":\n            return [\n                ...state, {\n                    id: uniq,\n                    type: action.questionType.toLowerCase(),\n                    title: \"untitled \" + action.questionType,\n                    options: initialTextOptions\n                }];\n        case \"likert\":\n        case \"dropdown\":\n            return [\n                ...state, {\n                    id: uniq,\n                    type: action.questionType.toLowerCase(),\n                    title: \"untitled \" + action.questionType,\n                    options: initialTextOptions\n                }];\n        case \"raw\":\n            return [\n                ...state, {\n                    type: action.questionType.toLowerCase(),\n                    title: \"untitled \" + action.questionType,\n                    content: \"<p>This is untitled raw question</p>\"\n                }];\n        default:\n            return [\n                ...state, {\n                    id: uniq,\n                    type: action.questionType.toLowerCase(),\n                    title: \"untitled \" + action.questionType,\n                }];\n    }\n};\n\nexport const questionnaireReducer = (state, action) => {\n    switch (action.type) {\n        case \"REORDER\":\n            return reorder(state, action.source.index, action.destination.index);\n        case \"CLONE\":\n            return copy(QUESTION_TYPES, state, action.source, action.destination);\n        case \"SET_QUESTIONS\":\n            return action.questions;\n        case \"ADD_QUESTION\":\n            return getQuestionTemplateByAction(action, state);\n        case \"REMOVE_QUESTION\":\n            return state.filter(question => question.id !== action.id);\n        case \"REMOVE_ALL\":\n            return state.filter(question => question.id === action.id);\n        case \"UPDATE_QUESTION\":\n            return state.map(question =>\n                question.id === action.id ? action.new : question\n            );\n\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}