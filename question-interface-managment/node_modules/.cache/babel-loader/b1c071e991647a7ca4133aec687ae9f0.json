{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Box, Dialog, IconButton, TextField, Button, InputAdornment, Grid, Typography, Select, MenuItem, InputLabel, FormControl } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport { TitleProperty } from \"./QuestionnaireProperties\";\n\nconst EditDialog = ({\n  question,\n  open,\n  setOpen\n}) => {\n  const [optionAdded, setOptionAdded] = useState(false);\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // load question to editor state on dialog open\n\n  useEffect(() => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...question\n      }\n    });\n  }, [open, newQuestionDispatch, question]); // dispatch action to questionnaireReducer to update question\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: newQuestion\n    });\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: {\n        title: \"\",\n        options: []\n      }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOptionAdded(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(ToggleGridAreasButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      padding: \"1em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(DialogBody, {\n    question: question,\n    optionAdded: optionAdded,\n    setOptionAdded: setOptionAdded,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(DialogFooter, {\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }))));\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext);\n  return React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: \"right\",\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"type-select-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Type\"), React.createElement(Select, {\n    autoWidth: true,\n    labelId: \"type-select-label\",\n    value: newQuestion.type,\n    onChange: e => newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        type: e.target.value\n      }\n    }),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Radio\"), React.createElement(MenuItem, {\n    value: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Checkbox\"), React.createElement(MenuItem, {\n    value: \"range\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Range\"), React.createElement(MenuItem, {\n    value: \"likert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Likert\"))), React.createElement(Grid, {\n    container: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: \"left\",\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Question \", questions.indexOf(question) + 1))));\n};\n\nconst DialogBody = ({\n  question,\n  optionAdded,\n  setOptionAdded\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext); // update correct option on text input changes\n\n  const handleChange = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions[index] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: newOptions\n      }\n    });\n  };\n\n  const handleAddOptionClick = event => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: [...newQuestion.options, \"\"]\n      }\n    });\n    setOptionAdded(true);\n  };\n\n  const handleRemoveOptionClick = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions.splice(index, 1);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: newOptions\n      }\n    });\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(TitleProperty, {\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: \"center\",\n      margin: \"1em 0 0 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleAddOptionClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"add \", newQuestion.type === \"range\" ? \"label\" : \"option\")), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(Box, {\n    fullWidth: true // height=\"200px\"\n    ,\n    height: \"200px\",\n    overflow: \"scroll\",\n    style: {\n      margin: \"0\",\n      overflowX: \"hidden\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, newQuestion.options.map((option, index) => React.createElement(TextField, {\n    autoFocus: optionAdded ? index === newQuestion.options.length - 1 ? true : false : false,\n    style: {\n      margin: \"0.2em 0\"\n    },\n    placeholder: newQuestion.type === \"range\" ? `label ${index + 1}` : `option ${index + 1}`,\n    type: \"text\",\n    fullWidth: true,\n    value: option,\n    onChange: e => handleChange(index, e),\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        margin: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        edge: \"end\",\n        onClick: e => handleRemoveOptionClick(index, e),\n        style: {\n          margin: \"0\",\n          padding: \"0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(DeleteIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      })))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  })))));\n};\n\nconst DialogFooter = ({\n  handleClose\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  return React.createElement(React.Fragment, null, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      margin: \"0 0 0.5em 0\",\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, \"submit\")), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, \"cancel\")));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js"],"names":["React","useState","useContext","useEffect","Box","Dialog","IconButton","TextField","Button","InputAdornment","Grid","Typography","Select","MenuItem","InputLabel","FormControl","DeleteIcon","QuestionnaireContext","SettingsContext","NewQuestionContext","ToggleGridAreasButton","TitleProperty","EditDialog","question","open","setOpen","optionAdded","setOptionAdded","settings","dispatch","newQuestion","newQuestionDispatch","type","handleSubmit","event","preventDefault","id","new","title","options","handleClose","padding","background","showGridAreas","DialogHeader","questions","textAlign","opacity","e","target","value","indexOf","DialogBody","handleChange","index","newOptions","handleAddOptionClick","handleRemoveOptionClick","splice","margin","overflowX","map","option","length","endAdornment","DialogFooter"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Box,\n  Dialog,\n  IconButton,\n  TextField,\n  Button,\n  InputAdornment,\n  Grid,\n  Typography,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport { TitleProperty } from \"./QuestionnaireProperties\";\n\nconst EditDialog = ({ question, open, setOpen }) => {\n  const [optionAdded, setOptionAdded] = useState(false);\n  const { settings } = useContext(SettingsContext);\n  const { dispatch } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    newQuestionDispatch({ type: \"SET_QUESTION\", question: { ...question } });\n  }, [open, newQuestionDispatch, question]);\n\n  // dispatch action to questionnaireReducer to update question\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { title: \"\", options: [] }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOptionAdded(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      <ToggleGridAreasButton />\n      <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n          style={{\n            padding: \"2em\",\n            background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n          }}\n        >\n          <DialogHeader question={question} />\n          <DialogBody\n            question={question}\n            optionAdded={optionAdded}\n            setOptionAdded={setOptionAdded}\n          />\n          <DialogFooter handleClose={handleClose} />\n        </Grid>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  return (\n    <Grid\n      item\n      xs={12}\n      style={{\n        textAlign: \"right\",\n        background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n        opacity: settings.showGridAreas ? 0.9 : 1.0\n      }}\n    >\n      <FormControl>\n        <InputLabel id=\"type-select-label\">Type</InputLabel>\n        <Select\n          autoWidth\n          labelId=\"type-select-label\"\n          value={newQuestion.type}\n          onChange={e =>\n            newQuestionDispatch({\n              type: \"SET_QUESTION\",\n              question: { ...newQuestion, type: e.target.value }\n            })\n          }\n          style={{ textAlign: \"left\" }}\n        >\n          <MenuItem value=\"radio\">Radio</MenuItem>\n          <MenuItem value=\"checkbox\">Checkbox</MenuItem>\n          <MenuItem value=\"range\">Range</MenuItem>\n          <MenuItem value=\"likert\">Likert</MenuItem>\n        </Select>\n      </FormControl>\n      <Grid container=\"row\" justify=\"center\" alignItems=\"center\">\n        <Grid\n          item\n          xs={12}\n          style={{\n            textAlign: \"left\",\n            background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n            opacity: settings.showGridAreas ? 0.9 : 1.0\n          }}\n        >\n          <Typography variant=\"h6\">\n            Question {questions.indexOf(question) + 1}\n          </Typography>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DialogBody = ({ question, optionAdded, setOptionAdded }) => {\n  const { settings } = useContext(SettingsContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n  const { questions } = useContext(QuestionnaireContext);\n\n  // update correct option on text input changes\n  const handleChange = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions[index] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: newOptions }\n    });\n  };\n\n  const handleAddOptionClick = event => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: [...newQuestion.options, \"\"] }\n    });\n    setOptionAdded(true);\n  };\n\n  const handleRemoveOptionClick = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions.splice(index, 1);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: newOptions }\n    });\n  };\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n      <Grid\n        item\n        xs={12}\n        style={{\n          background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n        <TitleProperty\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n          style={{ margin: \"1em 0\"}}\n        />\n      </Grid>\n      <Grid item xs={12} style={{ textAlign: \"center\", margin: \"1em 0 0 0\" }}>\n        <Button onClick={handleAddOptionClick}>\n          add {newQuestion.type === \"range\" ? \"label\" : \"option\"}\n        </Button>\n      </Grid>\n      <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n        <Box\n          fullWidth\n          // height=\"200px\"\n          height=\"200px\"\n          overflow=\"scroll\"\n          style={{ margin: \"0\", overflowX: \"hidden\" }}\n        >\n          {newQuestion.options.map((option, index) => (\n            <TextField\n              autoFocus={\n                optionAdded\n                  ? index === newQuestion.options.length - 1\n                    ? true\n                    : false\n                  : false\n              }\n              style={{ margin: \"0.2em 0\" }}\n              placeholder={\n                newQuestion.type === \"range\"\n                  ? `label ${index + 1}`\n                  : `option ${index + 1}`\n              }\n              type=\"text\"\n              fullWidth\n              value={option}\n              onChange={e => handleChange(index, e)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\" margin=\"0\">\n                    <IconButton\n                      edge=\"end\"\n                      onClick={e => handleRemoveOptionClick(index, e)}\n                      style={{ margin: \"0\", padding: \"0\" }}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </InputAdornment>\n                )\n              }}\n            />\n          ))}\n        </Box>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DialogFooter = ({ handleClose }) => {\n  const { settings } = useContext(SettingsContext);\n\n  return (\n    <>\n      <Grid\n        item\n        xs\n        style={{\n          margin: \"0 0 0.5em 0\",\n          textAlign: \"center\",\n          background: settings.showGridAreas ? \"lightgreen\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n        <Button type=\"submit\">submit</Button>\n      </Grid>\n      <Grid\n        item\n        xs\n        style={{\n          textAlign: \"center\",\n          background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n        <Button onClick={handleClose}>cancel</Button>\n      </Grid>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}