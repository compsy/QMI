{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Box, Dialog, IconButton, TextField, Button, InputAdornment, Grid, Typography, Select, MenuItem, InputLabel, FormControl } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport { HiddenProperty, OtherwiseLabelProperty, OtherwiseTooltipProperty, RequiredProperty, ShowOtherwiseProperty, TextOptionsProperty, TitleProperty, TooltipProperty } from \"./QuestionnaireProperties\";\n\nconst EditDialog = ({\n  question,\n  open,\n  setOpen\n}) => {\n  const [optionAdded, setOptionAdded] = useState(false);\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // load question to editor state on dialog open\n\n  useEffect(() => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...question\n      }\n    });\n  }, [open, newQuestionDispatch, question]); // dispatch action to questionnaireReducer to update question\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: newQuestion\n    });\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: {\n        title: \"\",\n        options: []\n      }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOptionAdded(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      padding: \"1em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(DialogBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(DialogFooter, {\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }))));\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext);\n\n  const GridItem = props => React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: props.textAlign,\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, props.children);\n\n  const TypeSelector = () => React.createElement(Select, {\n    autoWidth: true,\n    labelId: \"type-select-label\",\n    value: newQuestion.type,\n    onChange: e => newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        type: e.target.value\n      }\n    }),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Radio\"), React.createElement(MenuItem, {\n    value: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Checkbox\"), React.createElement(MenuItem, {\n    value: \"range\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Range\"), React.createElement(MenuItem, {\n    value: \"likert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Likert\"));\n\n  const QuestionTitle = () => React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Edit Question \", questions.indexOf(question) + 1);\n\n  return React.createElement(GridItem, {\n    textAlign: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"type-select-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Type\"), React.createElement(TypeSelector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(QuestionTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }))));\n};\n\nconst DialogBody = () => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // Grid for boolean items. These are switches, checkboxes, etc.\n\n  const BooleanGrid = props => React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Misc.\"), props.children);\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(TitleProperty, {\n    required: true,\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  })), React.createElement(BooleanGrid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(RequiredProperty, {\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), React.createElement(ShowOtherwiseProperty, {\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), newQuestion.show_otherwise ? React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(OtherwiseLabelProperty, {\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), React.createElement(OtherwiseTooltipProperty, {\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  })) : null, React.createElement(HiddenProperty, {\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(TooltipProperty, {\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(TextOptionsProperty, {\n    newQuestion: newQuestion,\n    newQuestionDispatch: newQuestionDispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  })));\n};\n\nconst DialogFooter = ({\n  handleClose\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n\n  const GridItem = props => React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, props.children);\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    alignItem: \"flex-start\",\n    justify: \"flex-end\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \"cancel\")), React.createElement(GridItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, \"submit\")));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js"],"names":["React","useState","useContext","useEffect","Box","Dialog","IconButton","TextField","Button","InputAdornment","Grid","Typography","Select","MenuItem","InputLabel","FormControl","DeleteIcon","QuestionnaireContext","SettingsContext","NewQuestionContext","ToggleGridAreasButton","HiddenProperty","OtherwiseLabelProperty","OtherwiseTooltipProperty","RequiredProperty","ShowOtherwiseProperty","TextOptionsProperty","TitleProperty","TooltipProperty","EditDialog","question","open","setOpen","optionAdded","setOptionAdded","settings","dispatch","newQuestion","newQuestionDispatch","type","handleSubmit","event","preventDefault","id","new","title","options","handleClose","padding","background","showGridAreas","DialogHeader","questions","GridItem","props","textAlign","opacity","children","TypeSelector","e","target","value","QuestionTitle","indexOf","DialogBody","BooleanGrid","margin","show_otherwise","DialogFooter"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Box,\n  Dialog,\n  IconButton,\n  TextField,\n  Button,\n  InputAdornment,\n  Grid,\n  Typography,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport {\n  HiddenProperty, OtherwiseLabelProperty, OtherwiseTooltipProperty,\n  RequiredProperty,\n  ShowOtherwiseProperty,\n  TextOptionsProperty,\n  TitleProperty, TooltipProperty\n} from \"./QuestionnaireProperties\";\n\nconst EditDialog = ({ question, open, setOpen }) => {\n  const [optionAdded, setOptionAdded] = useState(false);\n  const { settings } = useContext(SettingsContext);\n  const { dispatch } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    newQuestionDispatch({ type: \"SET_QUESTION\", question: { ...question } });\n  }, [open, newQuestionDispatch, question]);\n\n  // dispatch action to questionnaireReducer to update question\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { title: \"\", options: [] }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOptionAdded(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      {/* <ToggleGridAreasButton /> */}\n      <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n          style={{\n            padding: \"2em\",\n            background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n          }}\n        >\n          <DialogHeader question={question} />\n          <DialogBody/>\n          <DialogFooter handleClose={handleClose} />\n        </Grid>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  const GridItem = (props) => (\n    <Grid\n      item\n      xs={12}\n      style={{\n        textAlign: props.textAlign,\n        background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n        opacity: settings.showGridAreas ? 0.9 : 1.0\n      }}\n    >\n      {props.children}\n    </Grid>\n  );\n\n  const TypeSelector = () => (\n    <Select\n    autoWidth\n    labelId=\"type-select-label\"\n    value={newQuestion.type}\n    onChange={e =>\n      newQuestionDispatch({\n        type: \"SET_QUESTION\",\n        question: { ...newQuestion, type: e.target.value }\n      })\n    }\n    style={{ textAlign: \"left\" }}\n  >\n      {/*TODO: not everything is compatible for convert, so only show what's allowed.*/}\n    <MenuItem value=\"radio\">Radio</MenuItem>\n    <MenuItem value=\"checkbox\">Checkbox</MenuItem>\n    <MenuItem value=\"range\">Range</MenuItem>\n    <MenuItem value=\"likert\">Likert</MenuItem>\n\n  </Select>\n  );\n\n  const QuestionTitle = () => (\n    <Typography variant=\"h5\">\n      Edit Question {questions.indexOf(question) + 1}\n    </Typography>\n  );\n\n  return (\n    <GridItem textAlign=\"right\">\n      <FormControl>\n        <InputLabel id=\"type-select-label\">Type</InputLabel>\n        <TypeSelector/>\n      </FormControl>\n      <Grid container=\"row\" justify=\"center\" alignItems=\"center\">\n        <GridItem textAlign=\"left\">\n          <QuestionTitle/>\n        </GridItem>\n      </Grid>\n    </GridItem>\n  );\n};\n\nconst DialogBody = () => {\n  const { settings } = useContext(SettingsContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // Grid for boolean items. These are switches, checkboxes, etc.\n  const BooleanGrid = (props) =>\n    <Grid item xs={4}>\n      <h3>Misc.</h3>\n      {props.children}\n    </Grid>\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={3}>\n      <Grid\n        item\n        xs={12}\n        style={{\n          background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n        <TitleProperty\n          required\n          newQuestion={newQuestion}\n          newQuestionDispatch={newQuestionDispatch}\n          style={{ margin: \"1em 0\" }}\n        />\n      </Grid>\n\n      <BooleanGrid>\n        <RequiredProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n        <ShowOtherwiseProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n        {newQuestion.show_otherwise ?\n          <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n            <OtherwiseLabelProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n            <OtherwiseTooltipProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n          </Grid>\n          : null}\n\n        <HiddenProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch} />\n        <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n          <TooltipProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n        </Grid>\n      </BooleanGrid>\n\n      <Grid item xs style={{ textAlign: \"center\", margin: \"1em 0\" }}>\n        <TextOptionsProperty newQuestion={newQuestion} newQuestionDispatch={newQuestionDispatch}/>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DialogFooter = ({ handleClose }) => {\n  const { settings } = useContext(SettingsContext);\n\n  const GridItem = (props) => (\n    <Grid\n    item\n    xs\n    style={{\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    }}\n  >{props.children}</Grid>\n  );\n\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      alignItem=\"flex-start\"\n      justify=\"flex-end\"\n      style={{\n        padding: \"2em\",\n        background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n      }}\n    >\n      <GridItem>\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>cancel</Button>\n      </GridItem>\n      <GridItem>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">submit</Button>\n      </GridItem>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}