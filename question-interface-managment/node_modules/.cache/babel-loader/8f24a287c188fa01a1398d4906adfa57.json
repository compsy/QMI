{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { initial0, initial2 } from \"../../utils\";\nexport const questionsSlice = createSlice({\n  name: \"questions\",\n  initialState: [initial0, initial2],\n  reducers: {\n    addQuestionAtIndex: (state, action) => {\n      let newState = state.slice();\n      newState.splice(action.index, 0, action.item);\n      return newState;\n    },\n    removeQuestionAtIndex: (state, action) => {\n      return state.filter((_, index) => index !== action.payload);\n    }\n  }\n});\nexport const {\n  addQuestionAtIndex,\n  removeQuestionAtIndex\n} = questionsSlice.actions;\nexport default questionsSlice.reducer;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/features/questions/questionsSlice.js"],"names":["createSlice","initial0","initial2","questionsSlice","name","initialState","reducers","addQuestionAtIndex","state","action","newState","slice","splice","index","item","removeQuestionAtIndex","filter","_","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,aAAnC;AAEA,OAAO,MAAMC,cAAc,GAAGH,WAAW,CAAC;AACxCI,EAAAA,IAAI,EAAE,WADkC;AAExCC,EAAAA,YAAY,EAAE,CAACJ,QAAD,EAAWC,QAAX,CAF0B;AAGxCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAIC,QAAQ,GAAGF,KAAK,CAACG,KAAN,EAAf;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgBH,MAAM,CAACI,KAAvB,EAA8B,CAA9B,EAAiCJ,MAAM,CAACK,IAAxC;AACA,aAAOJ,QAAP;AACD,KALO;AAMRK,IAAAA,qBAAqB,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACxC,aAAOD,KAAK,CAACQ,MAAN,CAAa,CAACC,CAAD,EAAIJ,KAAJ,KAAcA,KAAK,KAAKJ,MAAM,CAACS,OAA5C,CAAP;AACD;AARO;AAH8B,CAAD,CAAlC;AAeP,OAAO,MAAM;AACXX,EAAAA,kBADW;AAEXQ,EAAAA;AAFW,IAGTZ,cAAc,CAACgB,OAHZ;AAKP,eAAehB,cAAc,CAACiB,OAA9B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { initial0, initial2 } from \"../../utils\";\n\nexport const questionsSlice = createSlice({\n  name: \"questions\",\n  initialState: [initial0, initial2],\n  reducers: {\n    addQuestionAtIndex: (state, action) => {\n      let newState = state.slice();\n      newState.splice(action.index, 0, action.item);\n      return newState;\n    },\n    removeQuestionAtIndex: (state, action) => {\n      return state.filter((_, index) => index !== action.payload);\n    },\n  },\n});\n\nexport const {\n  addQuestionAtIndex,\n  removeQuestionAtIndex,\n} = questionsSlice.actions;\n\nexport default questionsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}