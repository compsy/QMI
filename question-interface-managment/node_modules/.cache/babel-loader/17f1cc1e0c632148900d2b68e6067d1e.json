{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog2.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Button, Dialog, FormControl, Grid, InputLabel, MenuItem, Select, Typography, Paper, Box, makeStyles } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport { PROPERTIES_BY_QUESTION_TYPE, SPECIAL_CONVERSION_CASES, CLEAN_SUPER_QUESTION } from \"../utils\";\nimport Card from \"@material-ui/core/Card\";\nimport { IOptions as classes } from \"glob\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { borderColor } from \"@material-ui/system\";\nimport { WidthProperty } from \"./QuestionnaireProperties\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setQuestion, resetAll } from \"../features/questionProperties/questionSlice\";\nimport { setQuestionAtIndex } from \"../features/questions/questionsSlice\";\nimport { useState } from \"react\";\nimport TypeProperty from \"./properties/TypeProperty\";\nimport { createElement } from \"react\";\n\nconst EditDialog2 = ({\n  question,\n  index,\n  open,\n  setOpen\n}) => {\n  // const newQuestion = useSelector((state) => state.question);\n  const dispatch2 = useDispatch(); // const { dispatch } = useContext(QuestionnaireContext);\n  // load question to editor state on dialog open\n\n  useEffect(() => {\n    dispatch2(setQuestion({ ...CLEAN_SUPER_QUESTION,\n      ...question\n    }));\n  }, []);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n  }; // cancel all and return to QuestionsPage\n\n\n  const handleClose = () => {\n    // dispatch(resetAll());\n    setOpen(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(DialogBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(DialogFooter, {\n    id: question.id,\n    handleSubmit: handleSubmit,\n    handleClose: handleClose,\n    setOpen: setOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })));\n};\n\nexport default EditDialog2;\n\nconst DialogHeader = () => {\n  return React.createElement(Grid, {\n    item: true,\n    xs: true,\n    textAlign: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(TypeProperty, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }));\n}; // const PropertyCategory = (props) => {\n//   function renderProperties({ type, renderRequired }) {\n//     return PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\n//       // deciding what properties should be rendered (what JSON element we should look at)\n//       renderRequired ? \"requiredProperties\" : \"optionalProperties\"\n//     ].map((property) => React.createElement(property));\n//   }\n//   const style = props.renderRequired\n//     ? { color: \"#FF9999\", title: \"Required\" }\n//     : { color: \"#BABAF1\", title: \"Optional\" };\n//   return (\n//     <Grid item xs={12}>\n//       <Card style={{ borderColor: style.color }} variant=\"outlined\">\n//         <CardContent>\n//           <Typography>{style.title}</Typography>\n//           <renderProperties type={props.type} renderRequired={props.renderRequired} />\n//           {/* {type && renderProperties(props.renderRequired)} */}\n//         </CardContent>\n//       </Card>\n//     </Grid>\n//   );\n// };\n\n\nconst useStyles = makeStyles(theme => ({\n  globalP: {\n    \"&>*\": {\n      padding: theme.spacing(2)\n    }\n  }\n}));\n\nconst DialogBody = () => {\n  const type = useSelector(state => state.question.type);\n  const classes = useStyles();\n  return React.createElement(React.Fragment, null, PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\"requiredProperties\"].map(el => React.createElement(Box, {\n    p: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, createElement(el))), PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\"optionalProperties\"].map(el => createElement(el)));\n};\n\nconst DialogFooter = ({\n  id,\n  handleSubmit,\n  handleClose,\n  setOpen\n}) => {\n  const newQuestion = useSelector(state => state.question);\n  const {\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const dispatch2 = useDispatch(); // dispatch action to questionnaireReducer to update question\n\n  const handleClick = event => {\n    // event.preventDefault();\n    // do post processing here\n    // dispatch(setQuestionAtIndex({ index: index, question: newQuestion }));\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: id,\n      new: newQuestion\n    });\n    console.log(newQuestion);\n    setOpen(false); // dispatch(resetAll());\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    alignItems: \"flex-start\",\n    justify: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"cancel\")), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleSubmit && handleClick,\n    variant: \"contained\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"submit\")));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog2.js"],"names":["React","useContext","useEffect","Button","Dialog","FormControl","Grid","InputLabel","MenuItem","Select","Typography","Paper","Box","makeStyles","QuestionnaireContext","SettingsContext","NewQuestionContext","PROPERTIES_BY_QUESTION_TYPE","SPECIAL_CONVERSION_CASES","CLEAN_SUPER_QUESTION","Card","IOptions","classes","CardContent","borderColor","WidthProperty","useDispatch","useSelector","setQuestion","resetAll","setQuestionAtIndex","useState","TypeProperty","createElement","EditDialog2","question","index","open","setOpen","dispatch2","handleSubmit","event","preventDefault","handleClose","id","DialogHeader","useStyles","theme","globalP","padding","spacing","DialogBody","type","state","toUpperCase","map","el","DialogFooter","newQuestion","dispatch","handleClick","new","console","log"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport {\n  Button,\n  Dialog,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  Typography,\n  Paper,\n  Box,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport {\n  PROPERTIES_BY_QUESTION_TYPE,\n  SPECIAL_CONVERSION_CASES,\n  CLEAN_SUPER_QUESTION,\n} from \"../utils\";\nimport Card from \"@material-ui/core/Card\";\nimport { IOptions as classes } from \"glob\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { borderColor } from \"@material-ui/system\";\nimport { WidthProperty } from \"./QuestionnaireProperties\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setQuestion,\n  resetAll,\n} from \"../features/questionProperties/questionSlice\";\nimport { setQuestionAtIndex } from \"../features/questions/questionsSlice\";\nimport { useState } from \"react\";\nimport TypeProperty from \"./properties/TypeProperty\";\nimport { createElement } from \"react\";\n\nconst EditDialog2 = ({ question, index, open, setOpen }) => {\n  // const newQuestion = useSelector((state) => state.question);\n  const dispatch2 = useDispatch();\n  // const { dispatch } = useContext(QuestionnaireContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    dispatch2(setQuestion({ ...CLEAN_SUPER_QUESTION, ...question }));\n  }, []);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n  };\n\n  // cancel all and return to QuestionsPage\n  const handleClose = () => {\n    // dispatch(resetAll());\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      {/* <form style={{ padding: \"1em\" }}> */}\n      {/* <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}> */}\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n        >\n            <DialogHeader />\n            <DialogBody />\n            <DialogFooter id={question.id} handleSubmit={handleSubmit} handleClose={handleClose} setOpen={setOpen} />\n        </Grid>\n      {/* </form> */}\n    </Dialog>\n  );\n};\n\nexport default EditDialog2;\n\nconst DialogHeader = () => {\n  return (\n    <Grid item xs textAlign=\"right\">\n      <TypeProperty />\n    </Grid>\n  );\n};\n\n// const PropertyCategory = (props) => {\n//   function renderProperties({ type, renderRequired }) {\n//     return PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\n//       // deciding what properties should be rendered (what JSON element we should look at)\n//       renderRequired ? \"requiredProperties\" : \"optionalProperties\"\n//     ].map((property) => React.createElement(property));\n//   }\n  \n//   const style = props.renderRequired\n//     ? { color: \"#FF9999\", title: \"Required\" }\n//     : { color: \"#BABAF1\", title: \"Optional\" };\n\n//   return (\n//     <Grid item xs={12}>\n//       <Card style={{ borderColor: style.color }} variant=\"outlined\">\n//         <CardContent>\n//           <Typography>{style.title}</Typography>\n//           <renderProperties type={props.type} renderRequired={props.renderRequired} />\n//           {/* {type && renderProperties(props.renderRequired)} */}\n//         </CardContent>\n//       </Card>\n//     </Grid>\n//   );\n// };\n\nconst useStyles = makeStyles(theme => ({\n  globalP: {\n    \"&>*\": {\n      padding: theme.spacing(2)\n    }\n  }\n}));\n\nconst DialogBody = () => {\n  const type = useSelector((state) => state.question.type);\n  const classes = useStyles();\n  return (\n    <>\n      {PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\"requiredProperties\"].map(el => (\n        <Box p={2}>\n          {createElement(el)}\n        </Box>\n      ))}\n      {PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\"optionalProperties\"].map(el => createElement(el))}\n    </>\n  );\n};\n\nconst DialogFooter = ({ id, handleSubmit, handleClose, setOpen }) => {\n  const newQuestion = useSelector((state) => state.question);\n  const { dispatch } = useContext(QuestionnaireContext);\n  const dispatch2 = useDispatch();\n\n  // dispatch action to questionnaireReducer to update question\n  const handleClick = (event) => {\n    // event.preventDefault();\n    // do post processing here\n    // dispatch(setQuestionAtIndex({ index: index, question: newQuestion }));\n    dispatch({ type: \"UPDATE_QUESTION\", id: id, new: newQuestion });\n    console.log(newQuestion);\n    setOpen(false);\n    // dispatch(resetAll());\n  };\n\n  return (\n    <Grid container direction=\"row\" alignItems=\"flex-start\" justify=\"flex-end\">\n      <Grid item xs>\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>\n          cancel\n        </Button>\n      </Grid>\n      <Grid item xs>\n        <Button onClick={handleSubmit && handleClick} variant=\"contained\" color=\"primary\" >\n          submit\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}