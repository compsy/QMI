{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog2.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Button, Dialog, FormControl, Grid, InputLabel, MenuItem, Select, Typography, Paper, Box, makeStyles, Divider } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport { PROPERTIES_BY_QUESTION_TYPE, SPECIAL_CONVERSION_CASES, CLEAN_SUPER_QUESTION } from \"../utils\";\nimport Card from \"@material-ui/core/Card\";\nimport { IOptions as classes } from \"glob\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { borderColor } from \"@material-ui/system\";\nimport { WidthProperty } from \"./QuestionnaireProperties\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setQuestion, resetAll } from \"../features/questionProperties/questionSlice\";\nimport { setQuestionAtIndex } from \"../features/questions/questionsSlice\";\nimport { useState } from \"react\";\nimport TypeProperty from \"./properties/TypeProperty\";\nimport { createElement } from \"react\";\nimport store from \"../app/store\";\nimport { fade } from '@material-ui/core/styles/colorManipulator';\n\nconst EditDialog2 = ({\n  question,\n  index,\n  open,\n  setOpen\n}) => {\n  // const newQuestion = useSelector((state) => state.question);\n  const dispatch2 = useDispatch(); // const { dispatch } = useContext(QuestionnaireContext);\n  // load question to editor state on dialog open\n\n  useEffect(() => {\n    dispatch2(setQuestion({ ...CLEAN_SUPER_QUESTION,\n      ...question\n    }));\n  }, []);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n  }; // cancel all and return to QuestionsPage\n\n\n  const handleClose = () => {\n    // dispatch(resetAll());\n    setOpen(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Box, {\n    p: 2.5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(DialogBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), React.createElement(DialogFooter, {\n    id: question.id,\n    handleSubmit: handleSubmit,\n    handleClose: handleClose,\n    setOpen: setOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })));\n};\n\nexport default EditDialog2;\n\nconst DialogHeader = () => {\n  return React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(TypeProperty, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }));\n}; // const PropertyCategory = (props) => {\n//   function renderProperties({ type, renderRequired }) {\n//     return PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\n//       // deciding what properties should be rendered (what JSON element we should look at)\n//       renderRequired ? \"requiredProperties\" : \"optionalProperties\"\n//     ].map((property) => React.createElement(property));\n//   }\n//   const style = props.renderRequired\n//     ? { color: \"#FF9999\", title: \"Required\" }\n//     : { color: \"#BABAF1\", title: \"Optional\" };\n//   return (\n//     <Grid item xs={12}>\n//       <Card style={{ borderColor: style.color }} variant=\"outlined\">\n//         <CardContent>\n//           <Typography>{style.title}</Typography>\n//           <renderProperties type={props.type} renderRequired={props.renderRequired} />\n//           {/* {type && renderProperties(props.renderRequired)} */}\n//         </CardContent>\n//       </Card>\n//     </Grid>\n//   );\n// };\n\n\nconst useStyles = makeStyles(theme => ({\n  body: {\n    \"&>*\": {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(2)\n    }\n  },\n  button1: {\n    // background: fade(theme.palette.secondary.main, 0.1),\n    height: \"75px\",\n    width: \"100%\",\n    borderRadius: 0\n  },\n  button2: {\n    // background: fade(theme.palette.primary.main, 0.1),\n    height: \"75px\",\n    width: \"100%\",\n    borderRadius: 0\n  },\n  sticky: {\n    position: \"sticky\",\n    bottom: 0\n  }\n}));\n\nconst DialogBody = () => {\n  const type = useSelector(state => state.question.type);\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    className: classes.body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Required properties\"), PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\"requiredProperties\"].map(el => React.createElement(Box, {\n    p: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, createElement(el)))), React.createElement(Paper, {\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Optional properties\"), PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\"optionalProperties\"].map(el => React.createElement(Box, {\n    p: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, createElement(el)))));\n};\n\nconst DialogFooter = ({\n  id,\n  handleSubmit,\n  handleClose,\n  setOpen\n}) => {\n  // const newQuestion = useSelector((state) => state.question);\n  const {\n    dispatch\n  } = useContext(QuestionnaireContext); // const dispatch2 = useDispatch();\n  // dispatch action to questionnaireReducer to update question\n\n  const handleClick = event => {\n    // event.preventDefault();\n    // do post processing here\n    // dispatch(setQuestionAtIndex({ index: index, question: newQuestion }));\n    const state = store.getState();\n    const newQuestion = state.question;\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: id,\n      new: newQuestion\n    });\n    console.log(newQuestion);\n    setOpen(false); // dispatch(resetAll());\n  };\n\n  const classes = useStyles();\n  return React.createElement(Grid, {\n    className: classes.sticky,\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disableElevation: true,\n    className: classes.button1 // variant=\"contained\"\n    // color=\"secondary\"\n    ,\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"cancel\")), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disableElevation: true,\n    className: classes.button2,\n    onClick: handleSubmit && handleClick // variant=\"contained\"\n    ,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"save\")));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog2.js"],"names":["React","useContext","useEffect","Button","Dialog","FormControl","Grid","InputLabel","MenuItem","Select","Typography","Paper","Box","makeStyles","Divider","QuestionnaireContext","SettingsContext","NewQuestionContext","PROPERTIES_BY_QUESTION_TYPE","SPECIAL_CONVERSION_CASES","CLEAN_SUPER_QUESTION","Card","IOptions","classes","CardContent","borderColor","WidthProperty","useDispatch","useSelector","setQuestion","resetAll","setQuestionAtIndex","useState","TypeProperty","createElement","store","fade","EditDialog2","question","index","open","setOpen","dispatch2","handleSubmit","event","preventDefault","handleClose","id","DialogHeader","useStyles","theme","body","marginTop","spacing","marginBottom","padding","button1","height","width","borderRadius","button2","sticky","position","bottom","DialogBody","type","state","toUpperCase","map","el","DialogFooter","dispatch","handleClick","getState","newQuestion","new","console","log"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport {\n  Button,\n  Dialog,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  Typography,\n  Paper,\n  Box,\n  makeStyles,\n  Divider,\n} from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport {\n  PROPERTIES_BY_QUESTION_TYPE,\n  SPECIAL_CONVERSION_CASES,\n  CLEAN_SUPER_QUESTION,\n} from \"../utils\";\nimport Card from \"@material-ui/core/Card\";\nimport { IOptions as classes } from \"glob\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { borderColor } from \"@material-ui/system\";\nimport { WidthProperty } from \"./QuestionnaireProperties\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setQuestion,\n  resetAll,\n} from \"../features/questionProperties/questionSlice\";\nimport { setQuestionAtIndex } from \"../features/questions/questionsSlice\";\nimport { useState } from \"react\";\nimport TypeProperty from \"./properties/TypeProperty\";\nimport { createElement } from \"react\";\nimport store from \"../app/store\";\nimport { fade } from '@material-ui/core/styles/colorManipulator';\n\n\nconst EditDialog2 = ({ question, index, open, setOpen }) => {\n  // const newQuestion = useSelector((state) => state.question);\n  const dispatch2 = useDispatch();\n  // const { dispatch } = useContext(QuestionnaireContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    dispatch2(setQuestion({ ...CLEAN_SUPER_QUESTION, ...question }));\n  }, []);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n  };\n\n  // cancel all and return to QuestionsPage\n  const handleClose = () => {\n    // dispatch(resetAll());\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      {/* <form style={{ padding: \"1em\" }}> */}\n      {/* <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}> */}\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"stretch\">\n        <Box p={2.5}>\n          <DialogHeader />\n          <DialogBody />\n        </Box>\n        <DialogFooter\n          id={question.id}\n          handleSubmit={handleSubmit}\n          handleClose={handleClose}\n          setOpen={setOpen}\n        />\n      </Grid>\n      {/* </form> */}\n    </Dialog>\n  );\n};\n\nexport default EditDialog2;\n\nconst DialogHeader = () => {\n  return (\n    <Grid item xs>\n      <TypeProperty />\n    </Grid>\n  );\n};\n\n// const PropertyCategory = (props) => {\n//   function renderProperties({ type, renderRequired }) {\n//     return PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\n//       // deciding what properties should be rendered (what JSON element we should look at)\n//       renderRequired ? \"requiredProperties\" : \"optionalProperties\"\n//     ].map((property) => React.createElement(property));\n//   }\n\n//   const style = props.renderRequired\n//     ? { color: \"#FF9999\", title: \"Required\" }\n//     : { color: \"#BABAF1\", title: \"Optional\" };\n\n//   return (\n//     <Grid item xs={12}>\n//       <Card style={{ borderColor: style.color }} variant=\"outlined\">\n//         <CardContent>\n//           <Typography>{style.title}</Typography>\n//           <renderProperties type={props.type} renderRequired={props.renderRequired} />\n//           {/* {type && renderProperties(props.renderRequired)} */}\n//         </CardContent>\n//       </Card>\n//     </Grid>\n//   );\n// };\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    \"&>*\": {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(2),\n    },\n  },\n  button1: {\n    // background: fade(theme.palette.secondary.main, 0.1),\n    height: \"75px\",\n    width: \"100%\", \n    borderRadius: 0,\n  },\n  button2: {\n    // background: fade(theme.palette.primary.main, 0.1),\n    height: \"75px\",\n    width: \"100%\", \n    borderRadius: 0,\n  },\n  sticky: {\n    position: \"sticky\",\n    bottom: 0,\n  },\n}));\n\nconst DialogBody = () => {\n  const type = useSelector((state) => state.question.type);\n  const classes = useStyles();\n  return (\n    <div className={classes.body}>\n      <Paper variant=\"outlined\">\n        <Typography variant=\"h6\">Required properties</Typography>\n        {PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\n          \"requiredProperties\"\n        ].map((el) => (\n          <Box p={1}>{createElement(el)}</Box>\n        ))}\n      </Paper>\n      <Paper variant=\"outlined\">\n        <Typography variant=\"h6\">Optional properties</Typography>\n        {PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\n          \"optionalProperties\"\n        ].map((el) => (\n          <Box p={1}>{createElement(el)}</Box>\n        ))}\n      </Paper>\n    </div>\n  );\n};\n\nconst DialogFooter = ({ id, handleSubmit, handleClose, setOpen }) => {\n  // const newQuestion = useSelector((state) => state.question);\n  const { dispatch } = useContext(QuestionnaireContext);\n  // const dispatch2 = useDispatch();\n\n  // dispatch action to questionnaireReducer to update question\n  const handleClick = (event) => {\n    // event.preventDefault();\n    // do post processing here\n    // dispatch(setQuestionAtIndex({ index: index, question: newQuestion }));\n    const state = store.getState();\n    const newQuestion = state.question;\n    dispatch({ type: \"UPDATE_QUESTION\", id: id, new: newQuestion });\n    console.log(newQuestion);\n    setOpen(false);\n    // dispatch(resetAll());\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Grid className={classes.sticky} container direction=\"row\" justify=\"center\" alignItems=\"center\">\n      <Grid item xs>\n        <Button\n          disableElevation\n          className={classes.button1}\n          // variant=\"contained\"\n          // color=\"secondary\"\n          onClick={handleClose}\n        >\n          cancel\n        </Button>\n      </Grid>\n      <Grid item xs>\n        <Button\n          disableElevation\n          className={classes.button2}\n          onClick={handleSubmit && handleClick}\n          // variant=\"contained\"\n          color=\"primary\"\n        >\n          save\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}