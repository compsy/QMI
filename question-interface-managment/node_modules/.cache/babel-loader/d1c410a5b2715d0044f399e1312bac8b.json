{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/DnD.js\";\nimport React from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport \"./styles.css\";\nimport { useEffect } from \"react\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { Button } from \"@material-ui/core\"; // This method is needed for rendering clones of draggables\n\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"li\", Object.assign({}, provided.draggableProps, provided.dragHandleProps, {\n    ref: provided.innerRef,\n    style: provided.draggableProps.style,\n    className: snapshot.isDragging ? \"dragging\" : \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), item.label));\n};\n\nfunction Copyable(props) {\n  return React.createElement(Droppable, {\n    renderClone: getRenderItem(props.items, props.className),\n    droppableId: props.droppableId,\n    isDropDisabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(\"ul\", {\n    ref: provided.innerRef,\n    className: props.className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, props.items.map((item, index) => {\n    const shouldRenderClone = item.id === snapshot.draggingFromThisWith;\n    return React.createElement(React.Fragment, {\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, shouldRenderClone ? React.createElement(\"li\", {\n      className: \"react-beatiful-dnd-copy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, item.label) : React.createElement(Draggable, {\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"li\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      className: snapshot.isDragging ? \"dragging\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), item.label))));\n  }), provided.placeholder));\n}\n\nfunction Shop(props) {\n  return React.createElement(Copyable, {\n    droppableId: \"SHOP\",\n    className: \"shop\",\n    items: props.items,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  });\n}\n\nfunction QuestionSection(props) {\n  return React.createElement(React.Fragment, null, React.createElement(Button, {\n    onClick: console.log(props.items),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"button\"), React.createElement(Droppable, {\n    droppableId: \"BAG\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(\"ul\", {\n    ref: provided.innerRef,\n    className: \"shopping-bag\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, props.items.map((item, index) => React.createElement(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(\"li\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: provided.draggableProps.style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), item.label))), provided.placeholder)));\n}\n\nconst QUESTION_TYPES = [{\n  id: uuid(),\n  label: 'Checkbox'\n}, {\n  id: uuid(),\n  label: 'Radio'\n}, {\n  id: uuid(),\n  label: 'Likert'\n}, {\n  id: uuid(),\n  label: 'Range'\n}, {\n  id: uuid(),\n  label: 'Raw'\n}, {\n  id: uuid(),\n  label: 'Textarea'\n}, {\n  id: uuid(),\n  label: 'Textfield'\n}, {\n  id: uuid(),\n  label: 'Number'\n}, {\n  id: uuid(),\n  label: 'Expandable'\n}, {\n  id: uuid(),\n  label: 'Time'\n}, {\n  id: uuid(),\n  label: 'Date'\n}, {\n  id: uuid(),\n  label: 'Unsubscribed'\n}, {\n  id: uuid(),\n  label: 'Dropdown'\n}, {\n  id: uuid(),\n  label: 'Drawing'\n}];\n\nconst reorder = (list, startIndex, endIndex) => {\n  const [removed] = list.splice(startIndex, 1);\n  list.splice(endIndex, 0, removed); // console.log(list);\n\n  return list;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  const item = source[droppableSource.index];\n  destination.splice(droppableDestination.index, 0, { ...item,\n    id: uuid()\n  }); // console.log(destination);\n\n  return destination;\n};\n\nfunction DnD() {\n  const [shoppingBagItems, setShoppingBagItems] = React.useState([]);\n  const onDragEnd = React.useCallback(result => {\n    const {\n      source,\n      destination\n    } = result;\n    console.log(source, destination);\n\n    if (!destination) {\n      return;\n    }\n\n    switch (source.droppableId) {\n      case destination.droppableId:\n        setShoppingBagItems(state => reorder(state, source.index, destination.index));\n        break;\n\n      case \"SHOP\":\n        setShoppingBagItems(state => copy(QUESTION_TYPES, state, source, destination));\n        break;\n\n      default:\n        break;\n    } // console.log(shoppingBagItems);\n\n  }, [setShoppingBagItems]); // const { questions, dispatch } = useContext(QuestionnaireContext);\n  // useEffect(() => {\n  //     dispatch\n  // }, [shoppingBagItems])\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"Types of Question\"), React.createElement(Shop, {\n    items: QUESTION_TYPES,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"Question Area\"), React.createElement(QuestionSection, {\n    items: shoppingBagItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  })));\n}\n\nexport default DnD;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/DnD.js"],"names":["React","v4","uuid","DragDropContext","Draggable","Droppable","useEffect","QuestionnaireContext","Button","getRenderItem","items","className","provided","snapshot","rubric","item","source","index","draggableProps","dragHandleProps","innerRef","style","isDragging","label","Copyable","props","droppableId","map","shouldRenderClone","id","draggingFromThisWith","placeholder","Shop","QuestionSection","console","log","QUESTION_TYPES","reorder","list","startIndex","endIndex","removed","splice","copy","destination","droppableSource","droppableDestination","DnD","shoppingBagItems","setShoppingBagItems","useState","onDragEnd","useCallback","result","state"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {v4 as uuid} from \"uuid\";\nimport {DragDropContext, Draggable, Droppable} from \"react-beautiful-dnd\";\nimport \"./styles.css\";\nimport { useEffect } from \"react\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { Button } from \"@material-ui/core\";\n\n// This method is needed for rendering clones of draggables\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n    const item = items[rubric.source.index];\n    return (\n        <React.Fragment>\n            <li\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                ref={provided.innerRef}\n                style={provided.draggableProps.style}\n                className={snapshot.isDragging ? \"dragging\" : \"\"}\n            >\n                {item.label}\n            </li>\n        </React.Fragment>\n    );\n};\n\nfunction Copyable(props) {\n    return (\n        <Droppable\n            renderClone={getRenderItem(props.items, props.className)}\n            droppableId={props.droppableId}\n            isDropDisabled={true}\n        >\n            {(provided, snapshot) => (\n                <ul ref={provided.innerRef} className={props.className}>\n                    {props.items.map((item, index) => {\n                        const shouldRenderClone = item.id === snapshot.draggingFromThisWith;\n                        return (\n                            <React.Fragment key={item.id}>\n                                {shouldRenderClone ? (\n                                    <li className=\"react-beatiful-dnd-copy\">{item.label}</li>\n                                ) : (\n                                    <Draggable draggableId={item.id} index={index}>\n                                        {(provided, snapshot) => (\n                                            <React.Fragment>\n                                                <li\n                                                    ref={provided.innerRef}\n                                                    {...provided.draggableProps}\n                                                    {...provided.dragHandleProps}\n                                                    className={snapshot.isDragging ? \"dragging\" : \"\"}\n                                                >\n                                                    {item.label}\n                                                </li>\n                                            </React.Fragment>\n                                        )}\n                                    </Draggable>\n                                )}\n                            </React.Fragment>\n                        );\n                    })}\n                    {provided.placeholder}\n                </ul>\n            )}\n        </Droppable>\n    );\n}\n\nfunction Shop(props) {\n    return <Copyable droppableId=\"SHOP\" className=\"shop\" items={props.items}/>;\n}\n\nfunction QuestionSection(props) {\n    return (\n        <>\n        <Button onClick={console.log(props.items)}>button</Button>\n        <Droppable droppableId=\"BAG\">\n            {(provided, snapshot) => (\n                <ul ref={provided.innerRef} className=\"shopping-bag\">\n                    {props.items.map((item, index) => (\n                        <Draggable key={item.id} draggableId={item.id} index={index}>\n                            {(provided, snapshot) => (\n                                <li\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    style={provided.draggableProps.style}\n                                >\n                                    {item.label}\n                                </li>\n                            )}\n                        </Draggable>\n                    ))}\n                    {provided.placeholder}\n                </ul>\n            )}\n        </Droppable>\n        </>\n    );\n}\n\nconst QUESTION_TYPES = [\n    {id: uuid(), label: 'Checkbox'},\n    {id: uuid(), label: 'Radio'},\n    {id: uuid(), label: 'Likert'},\n    {id: uuid(), label: 'Range'},\n    {id: uuid(), label: 'Raw'},\n    {id: uuid(), label: 'Textarea'},\n    {id: uuid(), label: 'Textfield'},\n    {id: uuid(), label: 'Number'},\n    {id: uuid(), label: 'Expandable'},\n    {id: uuid(), label: 'Time'},\n    {id: uuid(), label: 'Date'},\n    {id: uuid(), label: 'Unsubscribed'},\n    {id: uuid(), label: 'Dropdown'},\n    {id: uuid(), label: 'Drawing'},\n];\n\nconst reorder = (list, startIndex, endIndex) => {\n    const [removed] = list.splice(startIndex, 1);\n    list.splice(endIndex, 0, removed);\n    // console.log(list);\n    return list;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n    const item = source[droppableSource.index];\n    destination.splice(droppableDestination.index, 0, {...item, id: uuid()});\n    // console.log(destination);\n    return destination;\n};\n\nfunction DnD() {\n    const [shoppingBagItems, setShoppingBagItems] = React.useState([]);\n    const onDragEnd = React.useCallback(\n        result => {\n            const {source, destination} = result;\n            console.log(source, destination);\n\n            if (!destination) {\n                return;\n            }\n\n            switch (source.droppableId) {\n                case destination.droppableId:\n                    setShoppingBagItems(state =>\n                        reorder(state, source.index, destination.index)\n                    );\n                    break;\n                case \"SHOP\":\n                    setShoppingBagItems(state =>\n                        copy(QUESTION_TYPES, state, source, destination)\n                    );\n                    break;\n                default:\n                    break;\n            }\n            // console.log(shoppingBagItems);\n        },\n        [setShoppingBagItems]\n    );\n    // const { questions, dispatch } = useContext(QuestionnaireContext);\n    // useEffect(() => {\n    //     dispatch\n    // }, [shoppingBagItems])\n\n    return (\n        <div className=\"App\">\n            <DragDropContext onDragEnd={onDragEnd}>\n                <h2>Types of Question</h2>\n                <Shop items={QUESTION_TYPES}/>\n                <h2>Question Area</h2>\n                <QuestionSection items={shoppingBagItems}/>\n            </DragDropContext>\n        </div>\n    );\n}\n\nexport default DnD;\n"]},"metadata":{},"sourceType":"module"}