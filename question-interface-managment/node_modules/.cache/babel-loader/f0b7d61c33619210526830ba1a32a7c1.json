{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog2.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Button, Dialog, FormControl, Grid, InputLabel, MenuItem, Select, Typography, Paper, Box, makeStyles, Divider } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport { PROPERTIES_BY_QUESTION_TYPE, SPECIAL_CONVERSION_CASES, CLEAN_SUPER_QUESTION } from \"../utils\";\nimport Card from \"@material-ui/core/Card\";\nimport { IOptions as classes } from \"glob\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { borderColor } from \"@material-ui/system\";\nimport { WidthProperty } from \"./QuestionnaireProperties\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setQuestion, resetAll, questionSlice } from \"../features/questionProperties/questionSlice\";\nimport { setQuestionAtIndex } from \"../features/questions/questionsSlice\";\nimport { useState } from \"react\";\nimport TypeProperty from \"./properties/TypeProperty\";\nimport { createElement } from \"react\";\nimport store from \"../app/store\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\n\nconst EditDialog2 = ({\n  question,\n  index,\n  open,\n  setOpen\n}) => {\n  // const newQuestion = useSelector((state) => state.question);\n  const dispatch2 = useDispatch(); // const { dispatch } = useContext(QuestionnaireContext);\n\n  const {\n    dispatch\n  } = useContext(QuestionnaireContext); // load question to editor state on dialog open\n\n  useEffect(() => {\n    dispatch2(setQuestion({ ...CLEAN_SUPER_QUESTION,\n      ...question\n    }));\n  }, []);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const state = store.getState();\n    const newQuestion = state.question;\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: newQuestion\n    }); // console.log(newQuestion);\n    // setOpen(false);\n  }; // cancel all and return to QuestionsPage\n\n\n  const handleClose = () => {\n    // dispatch(resetAll());\n    setOpen(false);\n  };\n\n  const classes = useStyles();\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    className: classes.header,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(Box, {\n    p: 2.5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(DialogBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })), React.createElement(DialogFooter, {\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }))));\n};\n\nexport default EditDialog2;\n\nconst DialogHeader = ({\n  index,\n  ...props\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Grid, Object.assign({\n    container: true,\n    direction: \"row\",\n    justify: \"space-between\",\n    alignItems: \"center\"\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, `Question ${index + 1}`)), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(TypeProperty, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }));\n};\n\nconst useStyles = makeStyles(theme => ({\n  body: {\n    \"&>*\": {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(2)\n    }\n  },\n  button1: {\n    // background: fade(theme.palette.secondary.main, 0.1),\n    height: \"70px\",\n    width: \"100%\",\n    borderRadius: 0\n  },\n  button2: {\n    // background: fade(theme.palette.primary.main, 0.1),\n    height: \"70px\",\n    width: \"100%\",\n    borderRadius: 0\n  },\n  sticky: {\n    background: theme.palette.background.paper,\n    position: \"sticky\",\n    bottom: 0\n  },\n  mtb: {\n    marginTop: theme.spacing(2) // marginBottom: theme.spacing(2),\n\n  },\n  header: {\n    padding: theme.spacing(2),\n    background: \"lightgreen\"\n  }\n}));\n\nconst DialogBody = () => {\n  const type = useSelector(state => state.question.type);\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    className: classes.body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"subtitle2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Required properties\"), PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\"requiredProperties\"].map(el => React.createElement(Box, {\n    className: classes.mtb,\n    p: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, createElement(el)))), React.createElement(Paper, {\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"subtitle2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"Optional properties\"), PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\"optionalProperties\"].map(el => React.createElement(Box, {\n    className: classes.mtb,\n    p: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, createElement(el)))));\n};\n\nconst DialogFooter = ({\n  handleClose\n}) => {\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    className: classes.sticky,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disableElevation: true,\n    className: classes.button1 // variant=\"contained\"\n    ,\n    color: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"cancel\")), React.createElement(Divider, {\n    orientation: \"vertical\",\n    flexItem: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disableElevation: true,\n    className: classes.button2,\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"save\"))));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog2.js"],"names":["React","useContext","useEffect","Button","Dialog","FormControl","Grid","InputLabel","MenuItem","Select","Typography","Paper","Box","makeStyles","Divider","QuestionnaireContext","SettingsContext","NewQuestionContext","PROPERTIES_BY_QUESTION_TYPE","SPECIAL_CONVERSION_CASES","CLEAN_SUPER_QUESTION","Card","IOptions","classes","CardContent","borderColor","WidthProperty","useDispatch","useSelector","setQuestion","resetAll","questionSlice","setQuestionAtIndex","useState","TypeProperty","createElement","store","fade","EditDialog2","question","index","open","setOpen","dispatch2","dispatch","handleSubmit","event","preventDefault","state","getState","newQuestion","type","id","new","handleClose","useStyles","header","DialogHeader","props","theme","body","marginTop","spacing","marginBottom","padding","button1","height","width","borderRadius","button2","sticky","background","palette","paper","position","bottom","mtb","DialogBody","toUpperCase","map","el","DialogFooter"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport {\n  Button,\n  Dialog,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  Typography,\n  Paper,\n  Box,\n  makeStyles,\n  Divider,\n} from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport {\n  PROPERTIES_BY_QUESTION_TYPE,\n  SPECIAL_CONVERSION_CASES,\n  CLEAN_SUPER_QUESTION,\n} from \"../utils\";\nimport Card from \"@material-ui/core/Card\";\nimport { IOptions as classes } from \"glob\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { borderColor } from \"@material-ui/system\";\nimport { WidthProperty } from \"./QuestionnaireProperties\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setQuestion,\n  resetAll,\n  questionSlice,\n} from \"../features/questionProperties/questionSlice\";\nimport { setQuestionAtIndex } from \"../features/questions/questionsSlice\";\nimport { useState } from \"react\";\nimport TypeProperty from \"./properties/TypeProperty\";\nimport { createElement } from \"react\";\nimport store from \"../app/store\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\n\nconst EditDialog2 = ({ question, index, open, setOpen }) => {\n  // const newQuestion = useSelector((state) => state.question);\n  const dispatch2 = useDispatch();\n  // const { dispatch } = useContext(QuestionnaireContext);\n\n  const { dispatch } = useContext(QuestionnaireContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    dispatch2(setQuestion({ ...CLEAN_SUPER_QUESTION, ...question }));\n  }, []);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const state = store.getState();\n    const newQuestion = state.question;\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n    // console.log(newQuestion);\n    // setOpen(false);\n  };\n\n  // cancel all and return to QuestionsPage\n  const handleClose = () => {\n    // dispatch(resetAll());\n    setOpen(false);\n  };\n\n  const classes = useStyles();\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      <form onSubmit={handleSubmit}>\n        {/* <form style={{ padding: \"1em\" }}> */}\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n        >\n          <DialogHeader className={classes.header} index={index} />\n          <Box p={2.5}>\n            <DialogBody />\n          </Box>\n          <DialogFooter handleClose={handleClose} />\n        </Grid>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditDialog2;\n\nconst DialogHeader = ({ index, ...props }) => {\n  return (\n    <div >\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"center\"\n        {...props}\n      >\n        <Grid item>\n          <Typography variant=\"h6\">{`Question ${index + 1}`}</Typography>\n        </Grid>\n        <Grid item>\n          <TypeProperty />\n        </Grid>\n      </Grid>\n      <Divider />\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    \"&>*\": {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      padding: theme.spacing(2),\n    },\n  },\n  button1: {\n    // background: fade(theme.palette.secondary.main, 0.1),\n    height: \"70px\",\n    width: \"100%\",\n    borderRadius: 0,\n  },\n  button2: {\n    // background: fade(theme.palette.primary.main, 0.1),\n    height: \"70px\",\n    width: \"100%\",\n    borderRadius: 0,\n  },\n  sticky: {\n    background: theme.palette.background.paper,\n    position: \"sticky\",\n    bottom: 0,\n  },\n  mtb: {\n    marginTop: theme.spacing(2),\n    // marginBottom: theme.spacing(2),\n  },\n  header: {\n    padding: theme.spacing(2),\n    background: \"lightgreen\",\n  },\n}));\n\nconst DialogBody = () => {\n  const type = useSelector((state) => state.question.type);\n  const classes = useStyles();\n  return (\n    <div className={classes.body}>\n      <Paper variant=\"outlined\">\n        <Typography variant=\"subtitle2\">Required properties</Typography>\n        {PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\n          \"requiredProperties\"\n        ].map((el) => (\n          <Box className={classes.mtb} p={0}>\n            {createElement(el)}\n          </Box>\n        ))}\n      </Paper>\n      <Paper variant=\"outlined\">\n        <Typography variant=\"subtitle2\">Optional properties</Typography>\n        {PROPERTIES_BY_QUESTION_TYPE[type.toUpperCase()][\n          \"optionalProperties\"\n        ].map((el) => (\n          <Box className={classes.mtb} p={0}>\n            {createElement(el)}\n          </Box>\n        ))}\n      </Paper>\n    </div>\n  );\n};\n\nconst DialogFooter = ({ handleClose }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.sticky}>\n      <Divider />\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <Grid item xs>\n          <Button\n            disableElevation\n            className={classes.button1}\n            // variant=\"contained\"\n            color=\"secondary\"\n            onClick={handleClose}\n          >\n            cancel\n          </Button>\n        </Grid>\n        <Divider orientation=\"vertical\" flexItem />\n        <Grid item xs>\n          <Button\n            disableElevation\n            className={classes.button2}\n            color=\"primary\"\n            type=\"submit\"\n          >\n            save\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}