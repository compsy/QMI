{"ast":null,"code":"import uuid from \"uuid/v1\";\nexport const questionnaireReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_QUESTIONS\":\n      if (action.questions != null) {\n        return action.questions;\n      } else {\n        return state;\n      }\n\n    case \"ADD_QUESTION\":\n      const uniq = uuid();\n      return [...state, {\n        id: uniq,\n        type: action.questionType.toLowerCase(),\n        title: \"untitled \" + action.questionType,\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      }];\n\n    case \"REMOVE_QUESTION\":\n      return state.filter(question => question.id !== action.id);\n\n    case \"UPDATE_QUESTION\":\n      return state.map(question => question.id === action.id ? action.new : question);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/reducers/questionnaireReducer.js"],"names":["uuid","questionnaireReducer","state","action","type","questions","uniq","id","questionType","toLowerCase","title","options","filter","question","map","new"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,UAAID,MAAM,CAACE,SAAP,IAAoB,IAAxB,EAA8B;AAC5B,eAAOF,MAAM,CAACE,SAAd;AACD,OAFD,MAEO;AACL,eAAOH,KAAP;AACD;;AACH,SAAK,cAAL;AACE,YAAMI,IAAI,GAAGN,IAAI,EAAjB;AACA,aAAO,CACL,GAAGE,KADE,EAEL;AACEK,QAAAA,EAAE,EAAED,IADN;AAEEF,QAAAA,IAAI,EAAED,MAAM,CAACK,YAAP,CAAoBC,WAApB,EAFR;AAGEC,QAAAA,KAAK,EAAE,cAAcP,MAAM,CAACK,YAH9B;AAIEG,QAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC;AAJX,OAFK,CAAP;;AASF,SAAK,iBAAL;AACE,aAAOT,KAAK,CAACU,MAAN,CAAaC,QAAQ,IAAIA,QAAQ,CAACN,EAAT,KAAgBJ,MAAM,CAACI,EAAhD,CAAP;;AACF,SAAK,iBAAL;AACE,aAAOL,KAAK,CAACY,GAAN,CAAUD,QAAQ,IACvBA,QAAQ,CAACN,EAAT,KAAgBJ,MAAM,CAACI,EAAvB,GAA4BJ,MAAM,CAACY,GAAnC,GAAyCF,QADpC,CAAP;;AAGF;AACE,aAAOX,KAAP;AAzBJ;AA2BD,CA5BM","sourcesContent":["import uuid from \"uuid/v1\";\n\nexport const questionnaireReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_QUESTIONS\":\n      if (action.questions != null) {\n        return action.questions;\n      } else {\n        return state;\n      }\n    case \"ADD_QUESTION\":\n      const uniq = uuid();\n      return [\n        ...state,\n        {\n          id: uniq,\n          type: action.questionType.toLowerCase(),\n          title: \"untitled \" + action.questionType,\n          options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n        }\n      ];\n    case \"REMOVE_QUESTION\":\n      return state.filter(question => question.id !== action.id);\n    case \"UPDATE_QUESTION\":\n      return state.map(question =>\n        question.id === action.id ? action.new : question\n      );\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}