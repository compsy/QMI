{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/buttons/EditQuestionButton.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { Box, Dialog, DialogTitle, Tooltip, IconButton, DialogContent, TextField, DialogActions, Button, InputAdornment, Grid, Typography } from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../../contexts/QuestionnaireContext\";\nimport NewQuestionContextProvider, { NewQuestionContext } from \"../../contexts/NewQuestionContext\";\n\nconst EditQuestionButton = ({\n  question\n}) => {\n  const [open, setOpen] = useState(false);\n  return React.createElement(React.Fragment, null, React.createElement(Tooltip, {\n    title: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    onClick: () => setOpen(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(EditIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }))), React.createElement(NewQuestionContextProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(EditDialog, {\n    question: question,\n    open: open,\n    setOpen: setOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })));\n};\n\nexport default EditQuestionButton;\n\nconst EditDialog = ({\n  question,\n  open,\n  setOpen\n}) => {\n  const [optionAdded, setOptionAdded] = useState(false);\n  const {\n    questions,\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // load question to editor state on dialog open\n\n  useEffect(() => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: question\n    });\n  }, [open, newQuestionDispatch, question]); // dispatch action to questionnaireReducer to update question\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: newQuestion\n    });\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: {}\n    });\n  }; // update correct option on text input changes\n\n\n  const handleChange = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions[index] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: newOptions\n      }\n    });\n  };\n\n  const handleAddOptionClick = event => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: [...newQuestion.options, \"\"]\n      }\n    });\n    setOptionAdded(true);\n  };\n\n  const handleRemoveOptionClick = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions.splice(index, 1);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        options: newOptions\n      }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOptionAdded(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      padding: \"1em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Edit Question \", questions.indexOf(question) + 1), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    autoFocus: true,\n    required: true,\n    variant: \"outlined\",\n    autoComplete: \"off\",\n    margin: \"dense\",\n    id: \"title\",\n    label: \"Title\",\n    type: \"text\",\n    fullWidth: true,\n    value: newQuestion.title,\n    onChange: e => newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        title: e.target.value\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Box, {\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Options\"))), React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Box, {\n    style: {\n      textAlign: \"right\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleAddOptionClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"add option\")))), newQuestion.options.map((option, index) => React.createElement(TextField, {\n    autoFocus: optionAdded ? index === newQuestion.options.length - 1 ? true : false : false,\n    style: {\n      margin: \"0.2em 0\"\n    },\n    placeholder: \"option\",\n    type: \"text\",\n    fullWidth: true,\n    value: option,\n    onChange: e => handleChange(index, e),\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        edge: \"end\",\n        onClick: e => handleRemoveOptionClick(index, e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(DeleteIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"submit\"))));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/buttons/EditQuestionButton.js"],"names":["React","useState","useContext","useEffect","Box","Dialog","DialogTitle","Tooltip","IconButton","DialogContent","TextField","DialogActions","Button","InputAdornment","Grid","Typography","EditIcon","DeleteIcon","QuestionnaireContext","NewQuestionContextProvider","NewQuestionContext","EditQuestionButton","question","open","setOpen","EditDialog","optionAdded","setOptionAdded","questions","dispatch","newQuestion","newQuestionDispatch","type","handleSubmit","event","preventDefault","id","new","handleChange","index","newOptions","options","target","value","handleAddOptionClick","handleRemoveOptionClick","splice","handleClose","padding","indexOf","title","e","margin","textAlign","map","option","length","endAdornment"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  Tooltip,\n  IconButton,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  InputAdornment,\n  Grid,\n  Typography\n} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { QuestionnaireContext } from \"../../contexts/QuestionnaireContext\";\nimport NewQuestionContextProvider, {\n  NewQuestionContext\n} from \"../../contexts/NewQuestionContext\";\n\nconst EditQuestionButton = ({ question }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Tooltip title=\"edit\">\n        <IconButton onClick={() => setOpen(true)}>\n          <EditIcon />\n        </IconButton>\n      </Tooltip>\n      <NewQuestionContextProvider>\n        <EditDialog question={question} open={open} setOpen={setOpen} />\n      </NewQuestionContextProvider>\n    </>\n  );\n};\n\nexport default EditQuestionButton;\n\nconst EditDialog = ({ question, open, setOpen }) => {\n  const [optionAdded, setOptionAdded] = useState(false);\n  const { questions, dispatch } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    newQuestionDispatch({ type: \"SET_QUESTION\", question: question });\n  }, [open, newQuestionDispatch, question]);\n\n  // dispatch action to questionnaireReducer to update question\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n    setOpen(false);\n    newQuestionDispatch({ type: \"SET_QUESTION\", question: {} });\n  };\n\n  // update correct option on text input changes\n  const handleChange = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions[index] = event.target.value;\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: newOptions }\n    });\n  };\n\n  const handleAddOptionClick = event => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: [...newQuestion.options, \"\"] }\n    });\n    setOptionAdded(true);\n  };\n\n  const handleRemoveOptionClick = (index, event) => {\n    let newOptions = [...newQuestion.options];\n    newOptions.splice(index, 1);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, options: newOptions }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOptionAdded(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n        <DialogTitle>\n          Edit Question {questions.indexOf(question) + 1}\n        </DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            required\n            variant=\"outlined\"\n            autoComplete=\"off\"\n            margin=\"dense\"\n            id=\"title\"\n            label=\"Title\"\n            type=\"text\"\n            fullWidth\n            value={newQuestion.title}\n            onChange={e =>\n              newQuestionDispatch({\n                type: \"SET_QUESTION\",\n                question: { ...newQuestion, title: e.target.value }\n              })\n            }\n          />\n          <Grid container style={{ margin: \"1em 0\" }}>\n            <Grid item xs={6}>\n              <Box style={{ textAlign: \"left\" }}>\n                <Typography variant=\"h6\">Options</Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={6}>\n              <Box style={{ textAlign: \"right\" }}>\n                <Button onClick={handleAddOptionClick}>add option</Button>\n              </Box>\n            </Grid>\n          </Grid>\n          {newQuestion.options.map((option, index) => (\n            <TextField\n              autoFocus={\n                optionAdded\n                  ? index === newQuestion.options.length - 1\n                    ? true\n                    : false\n                  : false\n              }\n              style={{ margin: \"0.2em 0\" }}\n              placeholder=\"option\"\n              type=\"text\"\n              fullWidth\n              value={option}\n              onChange={e => handleChange(index, e)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      edge=\"end\"\n                      onClick={e => handleRemoveOptionClick(index, e)}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </InputAdornment>\n                )\n              }}\n            />\n          ))}\n        </DialogContent>\n        <DialogActions>\n          <Button type=\"submit\" color=\"primary\">\n            submit\n          </Button>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}