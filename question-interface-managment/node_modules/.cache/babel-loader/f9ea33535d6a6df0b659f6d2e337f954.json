{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js\";\nimport React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport { makeStyles, Box, Container, Drawer, List, ListItem, ListItemIcon, ListItemText, Typography, Grid, Paper, AppBar, Toolbar, CssBaseline, Divider, createMuiTheme } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { QUESTION_TYPES } from \"./QuestionTypes\";\nimport \"./index.css\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport Particles from \"react-particles-js\";\nconst drawerWidth = 240;\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\" // background: darkTheme.palette.background.paper\n\n  },\n  // appBar: {\n  //   width: `calc(100% - ${drawerWidth}px)`,\n  //   marginRight: drawerWidth,\n  // },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1 // background: darkTheme.palette.background.default,\n    // color: darkTheme.palette.text.primary\n    // alignItems: 'center',\n\n  },\n  drawer: {\n    // width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {// width: drawerWidth,\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3)\n  }\n}));\n\nconst QuestionsPage = () => {\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const {\n    questions,\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const onDragEnd = React.useCallback(result => {\n    const {\n      source,\n      destination\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    settingsDispatch({\n      type: \"SET_DESTINATION_INDEX\",\n      destinationIndex: destination.index\n    });\n    console.log(settings.destinationIndex, destination.index);\n\n    switch (source.droppableId) {\n      case \"BAG\":\n        dispatch({\n          type: \"REORDER\",\n          source: source,\n          destination: destination\n        });\n        break;\n\n      case \"SHOP\":\n        dispatch({\n          type: \"CLONE\",\n          source: source,\n          destination: destination\n        });\n        console.log(destination);\n        console.log(questions[destination.index]);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    className: classes.appBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    noWrap: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Questionnaire Editor\"))), React.createElement(Sidebar, {\n    items: QUESTION_TYPES,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(\"main\", {\n    className: classes.content,\n    style: {\n      background: \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    style: {\n      margin: \"0\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(TopSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), React.createElement(BottomSection, {\n    items: questions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  })))));\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"1em auto\"\n    },\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(StringifiedJSONCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }));\n};\n\nconst BottomSection = ({\n  items\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\"\n    },\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"Questions\"), React.createElement(Droppable, {\n    droppableId: \"BAG\",\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Box, {\n    ref: provided.innerRef,\n    className: \"shopping-bag\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, questions.map((question, index) => {\n    const shouldRenderClone = question.id === snapshot.draggingFromThisWith;\n    return shouldRenderClone ? React.createElement(Draggable, {\n      key: question.id,\n      draggableId: question.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: { ...provided.draggableProps.style,\n        margin: \"0 0 1em 0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(Question, {\n      key: uuidv1(),\n      question: question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }))) : React.createElement(Draggable, {\n      key: question.id,\n      draggableId: question.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: { ...provided.draggableProps.style,\n        margin: \"0 0 1em 0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(Question, {\n      key: uuidv1(),\n      question: question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    })));\n  }), provided.placeholder)));\n};\n\nfunction getStyle(style, snapshot) {\n  if (!snapshot.isDropAnimating) {\n    return style;\n  }\n\n  return { ...style,\n    // cannot be 0, but make it super tiny\n    transitionDuration: `0.00001s`\n  };\n} // This method is needed for rendering clones of draggables\n\n\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  const style = { //backgroundColor: snapshot.isDragging ? 'blue' : 'white',\n    // fontSize: 18,\n    ...provided.draggableProps.style\n  };\n  return React.createElement(Paper, Object.assign({\n    className: snapshot.isDragging ? \"dragging1\" : \"not-dragging1\"\n  }, provided.draggableProps, provided.dragHandleProps, {\n    ref: provided.innerRef // style={provided.draggableProps.style}\n    ,\n    style: getStyle(provided.draggableProps.style, snapshot) // style={{ padding: \"1em\", color: \"white\" }}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, React.createElement(ListItemIcon, {\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, item.icon), React.createElement(ListItemText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, item.label))));\n};\n\nconst getRenderItem2 = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  const style = { //backgroundColor: snapshot.isDragging ? 'blue' : 'white',\n    // fontSize: 18,\n    ...provided.draggableProps.style\n  };\n  return React.createElement(Paper // className={snapshot.isDragging ? \"dragging1\" : \"not-dragging1\"}\n  , Object.assign({}, provided.draggableProps, provided.dragHandleProps, {\n    ref: provided.innerRef // style={provided.draggableProps.style}\n    ,\n    style: getStyle(provided.draggableProps.style, snapshot) // style={{ padding: \"1em\", color: \"white\" }}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314\n    },\n    __self: this\n  }, React.createElement(ListItemIcon, {\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, item.icon), React.createElement(ListItemText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, item.label))));\n};\n\nconst Sidebar = ({\n  items\n}) => {\n  const {\n    settings,\n    settingsDispatch\n  } = useContext(SettingsContext);\n  const classes = useStyles();\n  return React.createElement(Droppable, {\n    renderClone: getRenderItem(items, \"\"),\n    droppableId: \"SHOP\",\n    isDropDisabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Drawer, {\n    className: classes.drawer,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    ref: provided.innerRef,\n    variant: \"permanent\",\n    anchor: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346\n    },\n    __self: this\n  }), React.createElement(List, {\n    style: {\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347\n    },\n    __self: this\n  }, items.map((item, index) => {\n    const shouldRenderClone = item.id === snapshot.draggingFromThisWith;\n    return React.createElement(React.Fragment, {\n      style: {\n        textAlign: \"left\"\n      },\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, shouldRenderClone ? React.createElement(ListItem, {\n      button: true,\n      key: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, item.icon), React.createElement(ListItemText, {\n      primary: item.label,\n      style: {\n        textAlign: \"left\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    })) : React.createElement(Draggable, {\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(ListItem, Object.assign({\n      key: item.label,\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      button: true,\n      className: snapshot.isDragging ? \"dragging\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, item.icon), React.createElement(ListItemText, {\n      primary: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }))));\n  }), React.createElement(\"div\", {\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386\n    },\n    __self: this\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }), React.createElement(ListItem, {\n    button: true,\n    onClick: () => settingsDispatch({\n      type: \"TOGGLE_GRID_AREAS\"\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    primary: \"toggle grid areas\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392\n    },\n    __self: this\n  })))));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js"],"names":["React","useContext","v1","uuidv1","makeStyles","Box","Container","Drawer","List","ListItem","ListItemIcon","ListItemText","Typography","Grid","Paper","AppBar","Toolbar","CssBaseline","Divider","createMuiTheme","QuestionnaireContext","Question","ToggleGridAreasButton","AddQuestionButton2","StringifiedJSONCard","DragDropContext","Draggable","Droppable","QUESTION_TYPES","SettingsContext","useState","useEffect","Particles","drawerWidth","darkTheme","palette","type","useStyles","theme","root","display","appBar","zIndex","drawer","flexShrink","drawerPaper","toolbar","mixins","content","flexGrow","backgroundColor","background","default","padding","spacing","QuestionsPage","settings","settingsDispatch","questions","dispatch","onDragEnd","useCallback","result","source","destination","destinationIndex","index","console","log","droppableId","classes","margin","showGridAreas","TopSection","textAlign","BottomSection","items","provided","snapshot","innerRef","map","question","shouldRenderClone","id","draggingFromThisWith","draggableProps","dragHandleProps","style","placeholder","getStyle","isDropAnimating","transitionDuration","getRenderItem","className","rubric","item","isDragging","color","icon","label","getRenderItem2","Sidebar","paper"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport {\n  makeStyles,\n  Box,\n  Container,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n  Grid,\n  Paper,\n  AppBar,\n  Toolbar,\n  CssBaseline,\n  Divider,\n  createMuiTheme\n} from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { QUESTION_TYPES } from \"./QuestionTypes\";\n\nimport \"./index.css\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport Particles from \"react-particles-js\";\n\nconst drawerWidth = 240;\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    // background: darkTheme.palette.background.paper\n  },\n  // appBar: {\n  //   width: `calc(100% - ${drawerWidth}px)`,\n  //   marginRight: drawerWidth,\n  // },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    // background: darkTheme.palette.background.default,\n    // color: darkTheme.palette.text.primary\n    // alignItems: 'center',\n  },\n  drawer: {\n    // width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    // width: drawerWidth,\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3)\n  }\n}));\n\nconst QuestionsPage = () => {\n  const { settings, settingsDispatch } = useContext(SettingsContext);\n  const { questions, dispatch } = useContext(QuestionnaireContext);\n  const onDragEnd = React.useCallback(result => {\n    const { source, destination } = result;\n    if (!destination) {\n      return;\n    }\n    settingsDispatch({\n      type: \"SET_DESTINATION_INDEX\",\n      destinationIndex: destination.index\n    });\n    console.log(settings.destinationIndex, destination.index);\n    switch (source.droppableId) {\n      case \"BAG\":\n        dispatch({ type: \"REORDER\", source: source, destination: destination });\n        break;\n      case \"SHOP\":\n        dispatch({ type: \"CLONE\", source: source, destination: destination });\n        console.log(destination);\n        console.log(questions[destination.index]);\n        break;\n      default:\n        break;\n    }\n  }, []);\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h5\" noWrap>\n              Questionnaire Editor\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Sidebar items={QUESTION_TYPES} />\n        {/* <div\n                style={{\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    // width: \"100%\",\n                    // height: \"100%\"\n                }}\n            > */}\n        <main className={classes.content} style={{ background: \"transparent\" }}>\n          <div className={classes.toolbar} />\n\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"stretch\"\n            style={{\n              margin: \"0\",\n              background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n            }}\n          >\n            {/* <Grid\n              container\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid\n                item\n                xs={6}\n                style={{\n                  background: settings.showGridAreas\n                    ? \"lightblue\"\n                    : \"transparent\"\n                }}\n              >\n              </Grid>\n              <Grid\n                item\n                xs={6}\n                style={{\n                  background: settings.showGridAreas\n                  ? \"lightgreen\"\n                  : \"transparent\"\n                }}\n              >\n              </Grid>\n            </Grid> */}\n            <TopSection />\n            <BottomSection items={questions} />\n          </Grid>\n        </main>\n        {/* </div> */}\n      </DragDropContext>\n    </div>\n  );\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return (\n    <Container\n      style={{ textAlign: \"center\", margin: \"1em auto\" }}\n      maxWidth=\"md\"\n    >\n      {/* <AddQuestionButton /> */}\n      {/* <ToggleGridAreasButton /> */}\n      <StringifiedJSONCard />\n    </Container>\n  );\n};\n\nconst BottomSection = ({ items }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n\n  return (\n    <Container style={{ textAlign: \"center\" }} maxWidth=\"md\">\n      <Typography variant=\"h4\" style={{ margin: \"1em 0\" }}>\n        Questions\n      </Typography>\n      <Droppable droppableId=\"BAG\" style={{ textAlign: \"center\" }}>\n      {/* renderClone={getRenderItem2(questions, \"\") */}\n        {(provided, snapshot) => (\n          <Box ref={provided.innerRef} className=\"shopping-bag\">\n            {questions.map((question, index) => {\n              const shouldRenderClone =\n                question.id === snapshot.draggingFromThisWith;\n              return (\n                shouldRenderClone ? (\n                  <Draggable\n                    key={question.id}\n                    draggableId={question.id}\n                    index={index}\n                  >\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={{\n                          ...provided.draggableProps.style,\n                          margin: \"0 0 1em 0\"\n                        }}\n                      >\n                        <Question key={uuidv1()} question={question} />\n                      </div>\n                    )}\n                  </Draggable>\n                  ) :(\n                <Draggable\n                  key={question.id}\n                  draggableId={question.id}\n                  index={index}\n                >\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={{\n                        ...provided.draggableProps.style,\n                        margin: \"0 0 1em 0\"\n                      }}\n                    >\n                      <Question key={uuidv1()} question={question} />\n                    </div>\n                  )}\n                </Draggable>\n                )\n              );\n            })}\n            {provided.placeholder}\n          </Box>\n        )}\n      </Droppable>\n      {/* <AddQuestionButton2 /> */}\n    </Container>\n  );\n};\n\nfunction getStyle(style, snapshot) {\n  if (!snapshot.isDropAnimating) {\n    return style;\n  }\n  return {\n    ...style,\n    // cannot be 0, but make it super tiny\n    transitionDuration: `0.00001s`\n  };\n}\n\n// This method is needed for rendering clones of draggables\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  const style = {\n    //backgroundColor: snapshot.isDragging ? 'blue' : 'white',\n    // fontSize: 18,\n    ...provided.draggableProps.style\n  };\n  return (\n    <Paper\n      className={snapshot.isDragging ? \"dragging1\" : \"not-dragging1\"}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      // style={provided.draggableProps.style}\n      style={getStyle(provided.draggableProps.style, snapshot)}\n      // style={{ padding: \"1em\", color: \"white\" }}\n    >\n      <ListItem>\n        <ListItemIcon style={{ color: \"white\" }}>{item.icon}</ListItemIcon>\n        <ListItemText>\n          <Typography variant=\"body1\" style={{ color: \"white\" }}>\n            {item.label}\n          </Typography>\n        </ListItemText>\n      </ListItem>\n    </Paper>\n  );\n};\nconst getRenderItem2 = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  const style = {\n    //backgroundColor: snapshot.isDragging ? 'blue' : 'white',\n    // fontSize: 18,\n    ...provided.draggableProps.style\n  };\n  return (\n    <Paper\n      // className={snapshot.isDragging ? \"dragging1\" : \"not-dragging1\"}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      // style={provided.draggableProps.style}\n      style={getStyle(provided.draggableProps.style, snapshot)}\n      // style={{ padding: \"1em\", color: \"white\" }}\n    >\n      <ListItem>\n        <ListItemIcon style={{ color: \"white\" }}>{item.icon}</ListItemIcon>\n        <ListItemText>\n          <Typography variant=\"body1\" style={{ color: \"white\" }}>\n            {item.label}\n          </Typography>\n        </ListItemText>\n      </ListItem>\n    </Paper>\n  );\n};\n\nconst Sidebar = ({ items }) => {\n  const { settings, settingsDispatch } = useContext(SettingsContext);\n  const classes = useStyles();\n\n  return (\n    <Droppable\n      renderClone={getRenderItem(items, \"\")}\n      droppableId=\"SHOP\"\n      isDropDisabled={true}\n    >\n      {(provided, snapshot) => (\n        <Drawer\n          className={classes.drawer}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n          ref={provided.innerRef}\n          variant=\"permanent\"\n          anchor=\"right\"\n        >\n          <div className={classes.toolbar} />\n          <List\n            style={{\n              background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n            }}\n          >\n            {items.map((item, index) => {\n              const shouldRenderClone =\n                item.id === snapshot.draggingFromThisWith;\n              return (\n                <React.Fragment style={{ textAlign: \"left\" }} key={item.id}>\n                  {shouldRenderClone ? (\n                    <ListItem button key={item.label}>\n                      <ListItemIcon>{item.icon}</ListItemIcon>\n                      <ListItemText\n                        primary={item.label}\n                        style={{ textAlign: \"left\" }}\n                      />\n                    </ListItem>\n                  ) : (\n                    <Draggable draggableId={item.id} index={index}>\n                      {(provided, snapshot) => (\n                        <ListItem\n                          key={item.label}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          button\n                          className={snapshot.isDragging ? \"dragging\" : \"\"}\n                        >\n                          <ListItemIcon>{item.icon}</ListItemIcon>\n                          <ListItemText primary={item.label} />\n                        </ListItem>\n                      )}\n                    </Draggable>\n                  )}\n                </React.Fragment>\n              );\n            })}\n            {/* {provided.placeholder} */}\n            <div className={classes.toolbar} />\n            <Divider />\n            <ListItem\n              button\n              onClick={() => settingsDispatch({ type: \"TOGGLE_GRID_AREAS\" })}\n            >\n              <ListItemText primary=\"toggle grid areas\" />\n            </ListItem>\n          </List>\n        </Drawer>\n      )}\n    </Droppable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}