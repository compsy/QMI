{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/previews/DropdownPreview.js\";\nimport React, { useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { SettingsContext } from \"../../contexts/SettingsContext\";\nconst useStyles = makeStyles(theme => ({\n  button: {\n    display: \"block\",\n    marginTop: theme.spacing(2)\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  }\n}));\n\nconst DropdownPreview = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const classes = useStyles();\n  const [option, setOption] = React.useState(\"\");\n  const [open, setOpen] = React.useState(false);\n\n  const handleChange = event => {\n    setOption(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  let index = 1;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"demo-controlled-open-select-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, question.label), React.createElement(Select, {\n    labelId: \"demo-controlled-open-select-label\",\n    id: \"demo-controlled-open-select\",\n    open: open,\n    onClose: handleClose,\n    onOpen: handleOpen,\n    value: option,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"em\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"None\")), question.options.map((option, index) => React.createElement(MenuItem, {\n    value: index + 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"em\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, option))))));\n};\n\nexport default DropdownPreview;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/previews/DropdownPreview.js"],"names":["React","useContext","makeStyles","InputLabel","MenuItem","FormControl","Select","SettingsContext","useStyles","theme","button","display","marginTop","spacing","formControl","margin","minWidth","DropdownPreview","question","settings","classes","option","setOption","useState","open","setOpen","handleChange","event","target","value","handleClose","handleOpen","index","label","options","map"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AAEA,MAAMC,SAAS,GAAGN,UAAU,CAACO,KAAK,KAAK;AACnCC,EAAAA,MAAM,EAAE;AACJC,IAAAA,OAAO,EAAE,OADL;AAEJC,IAAAA,SAAS,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AAFP,GAD2B;AAKnCC,EAAAA,WAAW,EAAE;AACTC,IAAAA,MAAM,EAAEN,KAAK,CAACI,OAAN,CAAc,CAAd,CADC;AAETG,IAAAA,QAAQ,EAAE;AAFD;AALsB,CAAL,CAAN,CAA5B;;AAWA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAelB,UAAU,CAACM,eAAD,CAA/B;AACA,QAAMa,OAAO,GAAGZ,SAAS,EAAzB;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBtB,KAAK,CAACuB,QAAN,CAAe,EAAf,CAA5B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBzB,KAAK,CAACuB,QAAN,CAAe,KAAf,CAAxB;;AAGA,QAAMG,YAAY,GAAGC,KAAK,IAAI;AAC1BL,IAAAA,SAAS,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACtBL,IAAAA,OAAO,CAAC,KAAD,CAAP;AACH,GAFD;;AAIA,QAAMM,UAAU,GAAG,MAAM;AACrBN,IAAAA,OAAO,CAAC,IAAD,CAAP;AACH,GAFD;;AAIA,MAAIO,KAAK,GAAG,CAAZ;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEZ,OAAO,CAACN,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDI,QAAQ,CAACe,KAA7D,CADJ,EAEI,oBAAC,MAAD;AACI,IAAA,OAAO,EAAC,mCADZ;AAEI,IAAA,EAAE,EAAC,6BAFP;AAGI,IAAA,IAAI,EAAET,IAHV;AAII,IAAA,OAAO,EAAEM,WAJb;AAKI,IAAA,MAAM,EAAEC,UALZ;AAMI,IAAA,KAAK,EAAEV,MANX;AAOI,IAAA,QAAQ,EAAEK,YAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CATJ,EAYKR,QAAQ,CAACgB,OAAT,CAAiBC,GAAjB,CAAqB,CAACd,MAAD,EAASW,KAAT,KAClB,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAIA,KAAK,GAAG,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKX,MAAL,CADJ,CADH,CAZL,CAFJ,CADJ,CADJ;AA4BH,CAjDD;;AAoDA,eAAeJ,eAAf","sourcesContent":["import React, {useContext} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport {SettingsContext} from \"../../contexts/SettingsContext\";\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        display: \"block\",\n        marginTop: theme.spacing(2)\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120\n    }\n}));\n\nconst DropdownPreview = ({ question }) => {\n    const { settings } = useContext(SettingsContext);\n    const classes = useStyles();\n    const [option, setOption] = React.useState(\"\");\n    const [open, setOpen] = React.useState(false);\n\n\n    const handleChange = event => {\n        setOption(event.target.value);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    let index = 1;\n\n    return (\n        <div>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-controlled-open-select-label\">{question.label}</InputLabel>\n                <Select\n                    labelId=\"demo-controlled-open-select-label\"\n                    id=\"demo-controlled-open-select\"\n                    open={open}\n                    onClose={handleClose}\n                    onOpen={handleOpen}\n                    value={option}\n                    onChange={handleChange}\n                >\n                    <MenuItem value={0}>\n                        <em>None</em>\n                    </MenuItem>\n                    {question.options.map((option, index) =>\n                        <MenuItem value = {index + 1}>\n                            <em>{option}</em>\n                        </MenuItem>\n                    )}\n\n\n                </Select>\n            </FormControl>\n        </div>\n\n    );\n};\n\n\nexport default DropdownPreview\n"]},"metadata":{},"sourceType":"module"}