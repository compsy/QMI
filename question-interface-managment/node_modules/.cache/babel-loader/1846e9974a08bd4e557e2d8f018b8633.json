{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/contexts/QuestionnaireContext.js\";\nimport React, { createContext, useReducer } from \"react\";\nimport { questionnaireReducer } from \"../reducers/questionnaireReducer\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nexport const QuestionnaireContext = createContext();\n\nconst timelineReducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATED\":\n      return action.timeline;\n\n    case \"UNDO\":\n      if (state.past.length > 0) {\n        return {\n          past: state.past.slice(0, -1),\n          present: state.past.slice(-1)[0]\n        };\n      } else {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst QuestionnaireContextProvider = props => {\n  const [timeline, dispatchTimeline] = useReducer(timelineReducer, {\n    past: [],\n    present: [{\n      id: \"v1\",\n      type: \"radio\",\n      title: \"untitled radio\",\n      options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n    }, {\n      id: \"v2\",\n      type: \"checkbox\",\n      title: \"untitled checkbox\",\n      options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n    }, {\n      id: \"v3\",\n      type: \"range\",\n      title: \"untitled range\",\n      options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n    }, {\n      id: \"v4\",\n      type: \"likert\",\n      title: \"untitled likert\",\n      options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n    }],\n    future: []\n  });\n  const [questions, dispatch] = useReducer(questionnaireReducer, timeline.present);\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    if (count != 0) {\n      const t = {\n        past: [...timeline.past, timeline.present],\n        present: questions,\n        future: [...timeline.future]\n      };\n      dispatchTimeline({\n        type: \"UPDATED\",\n        timeline: t\n      });\n      console.log(t);\n    } else {\n      console.log(timeline);\n    }\n\n    setCount(count + 1);\n  }, [questions]);\n  return React.createElement(QuestionnaireContext.Provider, {\n    value: {\n      questions,\n      dispatch,\n      timeline,\n      dispatchTimeline\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default QuestionnaireContextProvider;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/contexts/QuestionnaireContext.js"],"names":["React","createContext","useReducer","questionnaireReducer","useEffect","useState","QuestionnaireContext","timelineReducer","state","action","type","timeline","past","length","slice","present","QuestionnaireContextProvider","props","dispatchTimeline","id","title","options","future","questions","dispatch","count","setCount","t","console","log","children"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport { questionnaireReducer } from \"../reducers/questionnaireReducer\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nexport const QuestionnaireContext = createContext();\n\nconst timelineReducer = (state, action) => {\n  switch (action.type) {\n    case \"UPDATED\":\n      return action.timeline;\n    case \"UNDO\":\n      if (state.past.length > 0) {\n        return {past: state.past.slice(0, -1), present: state.past.slice(-1)[0]};\n      } else {\n        return state\n      }\n    default:\n      return state;\n  }\n};\n\nconst QuestionnaireContextProvider = props => {\n  const [timeline, dispatchTimeline] = useReducer(timelineReducer, {\n    past: [],\n    present: [\n      {\n        id: \"v1\",\n        type: \"radio\",\n        title: \"untitled radio\",\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      },\n      {\n        id: \"v2\",\n        type: \"checkbox\",\n        title: \"untitled checkbox\",\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      },\n      {\n        id: \"v3\",\n        type: \"range\",\n        title: \"untitled range\",\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      },\n      {\n        id: \"v4\",\n        type: \"likert\",\n        title: \"untitled likert\",\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      }\n    ],\n    future: []\n  });\n  const [questions, dispatch] = useReducer(\n    questionnaireReducer,\n    timeline.present\n  );\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    if (count != 0) {\n      const t = {\n        past: [...timeline.past, timeline.present],\n        present: questions,\n        future: [...timeline.future]\n      };\n      dispatchTimeline({ type: \"UPDATED\", timeline: t });\n      console.log(t);\n    } else {\n      console.log(timeline);\n    }\n    setCount(count+1);\n  }, [questions]);\n  return (\n    <QuestionnaireContext.Provider\n      value={{ questions, dispatch, timeline, dispatchTimeline }}\n    >\n      {props.children}\n    </QuestionnaireContext.Provider>\n  );\n};\n\nexport default QuestionnaireContextProvider;\n"]},"metadata":{},"sourceType":"module"}