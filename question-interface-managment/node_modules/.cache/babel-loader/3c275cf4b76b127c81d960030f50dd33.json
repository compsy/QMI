{"ast":null,"code":"import uuid from \"uuid/v1\";\nimport { QUESTION_TYPES } from \"../components/QuestionTypes\";\n\nconst reorder = (list, startIndex, endIndex) => {\n  let newList = list.slice(0, list.length);\n  const [removed] = newList.splice(startIndex, 1);\n  newList.splice(endIndex, 0, removed);\n  return newList;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  let newDestination = destination.slice(0, destination.length);\n  const item = source[droppableSource.index];\n  newDestination.splice(droppableDestination.index, 0, {\n    id: uuid(),\n    type: item.label,\n    title: `untitled ${item.label}`,\n    options: [\"option1\", \"option2\", \"option3\", \"option4\"]\n  });\n  return newDestination;\n};\n\nexport const questionnaireReducer = (state, action) => {\n  switch (action.type) {\n    case \"REORDER\":\n      return reorder(state, action.source.index, action.destination.index);\n\n    case \"CLONE\":\n      return copy(QUESTION_TYPES, state, action.source, action.destination);\n\n    case \"SET_QUESTIONS\":\n      return action.questions;\n\n    case \"ADD_QUESTION\":\n      const uniq = uuid();\n      return [...state, {\n        id: uniq,\n        type: action.questionType.toLowerCase(),\n        title: \"untitled \" + action.questionType,\n        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n      }];\n\n    case \"REMOVE_QUESTION\":\n      return state.filter(question => question.id !== action.id);\n\n    case \"UPDATE_QUESTION\":\n      return state.map(question => question.id === action.id ? action.new : question);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/reducers/questionnaireReducer.js"],"names":["uuid","QUESTION_TYPES","reorder","list","startIndex","endIndex","newList","slice","length","removed","splice","copy","source","destination","droppableSource","droppableDestination","newDestination","item","index","id","type","label","title","options","questionnaireReducer","state","action","questions","uniq","questionType","toLowerCase","filter","question","map","new"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,cAAT,QAA+B,6BAA/B;;AAGA,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AAC9C,MAAIC,OAAO,GAAGH,IAAI,CAACI,KAAL,CAAW,CAAX,EAAcJ,IAAI,CAACK,MAAnB,CAAd;AACA,QAAM,CAACC,OAAD,IAAYH,OAAO,CAACI,MAAR,CAAeN,UAAf,EAA2B,CAA3B,CAAlB;AACAE,EAAAA,OAAO,CAACI,MAAR,CAAeL,QAAf,EAAyB,CAAzB,EAA4BI,OAA5B;AACA,SAAOH,OAAP;AACD,CALD;;AAOA,MAAMK,IAAI,GAAG,CAACC,MAAD,EAASC,WAAT,EAAsBC,eAAtB,EAAuCC,oBAAvC,KAAgE;AAC3E,MAAIC,cAAc,GAAGH,WAAW,CAACN,KAAZ,CAAkB,CAAlB,EAAqBM,WAAW,CAACL,MAAjC,CAArB;AACA,QAAMS,IAAI,GAAGL,MAAM,CAACE,eAAe,CAACI,KAAjB,CAAnB;AACAF,EAAAA,cAAc,CAACN,MAAf,CAAsBK,oBAAoB,CAACG,KAA3C,EAAkD,CAAlD,EAAqD;AACnDC,IAAAA,EAAE,EAAEnB,IAAI,EAD2C;AAEnDoB,IAAAA,IAAI,EAAEH,IAAI,CAACI,KAFwC;AAGnDC,IAAAA,KAAK,EAAG,YAAWL,IAAI,CAACI,KAAM,EAHqB;AAInDE,IAAAA,OAAO,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC;AAJ0C,GAArD;AAMA,SAAOP,cAAP;AACD,CAVD;;AAaA,OAAO,MAAMQ,oBAAoB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrD,UAAQA,MAAM,CAACN,IAAf;AACE,SAAK,SAAL;AACE,aAAOlB,OAAO,CAACuB,KAAD,EAAQC,MAAM,CAACd,MAAP,CAAcM,KAAtB,EAA6BQ,MAAM,CAACb,WAAP,CAAmBK,KAAhD,CAAd;;AACF,SAAK,OAAL;AACE,aAAOP,IAAI,CAACV,cAAD,EAAiBwB,KAAjB,EAAwBC,MAAM,CAACd,MAA/B,EAAuCc,MAAM,CAACb,WAA9C,CAAX;;AACF,SAAK,eAAL;AACE,aAAOa,MAAM,CAACC,SAAd;;AACF,SAAK,cAAL;AACE,YAAMC,IAAI,GAAG5B,IAAI,EAAjB;AACA,aAAO,CACL,GAAGyB,KADE,EAEL;AACEN,QAAAA,EAAE,EAAES,IADN;AAEER,QAAAA,IAAI,EAAEM,MAAM,CAACG,YAAP,CAAoBC,WAApB,EAFR;AAGER,QAAAA,KAAK,EAAE,cAAcI,MAAM,CAACG,YAH9B;AAIEN,QAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC;AAJX,OAFK,CAAP;;AASF,SAAK,iBAAL;AACE,aAAOE,KAAK,CAACM,MAAN,CAAaC,QAAQ,IAAIA,QAAQ,CAACb,EAAT,KAAgBO,MAAM,CAACP,EAAhD,CAAP;;AACF,SAAK,iBAAL;AACE,aAAOM,KAAK,CAACQ,GAAN,CAAUD,QAAQ,IACvBA,QAAQ,CAACb,EAAT,KAAgBO,MAAM,CAACP,EAAvB,GAA4BO,MAAM,CAACQ,GAAnC,GAAyCF,QADpC,CAAP;;AAGF;AACE,aAAOP,KAAP;AAzBJ;AA2BD,CA5BM","sourcesContent":["import uuid from \"uuid/v1\";\nimport { QUESTION_TYPES } from \"../components/QuestionTypes\";\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  let newList = list.slice(0, list.length);\n  const [removed] = newList.splice(startIndex, 1);\n  newList.splice(endIndex, 0, removed);\n  return newList;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  let newDestination = destination.slice(0, destination.length);\n  const item = source[droppableSource.index];\n  newDestination.splice(droppableDestination.index, 0, {\n    id: uuid(),\n    type: item.label,\n    title: `untitled ${item.label}`,\n    options: [\"option1\", \"option2\", \"option3\", \"option4\"]\n  });\n  return newDestination;\n};\n\n\nexport const questionnaireReducer = (state, action) => {\n  switch (action.type) {\n    case \"REORDER\":\n      return reorder(state, action.source.index, action.destination.index);\n    case \"CLONE\":\n      return copy(QUESTION_TYPES, state, action.source, action.destination);\n    case \"SET_QUESTIONS\":\n      return action.questions;\n    case \"ADD_QUESTION\":\n      const uniq = uuid();\n      return [\n        ...state,\n        {\n          id: uniq,\n          type: action.questionType.toLowerCase(),\n          title: \"untitled \" + action.questionType,\n          options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n        }\n      ];\n    case \"REMOVE_QUESTION\":\n      return state.filter(question => question.id !== action.id);\n    case \"UPDATE_QUESTION\":\n      return state.map(question =>\n        question.id === action.id ? action.new : question\n      );\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}