{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/previews/RangePreview.js\";\nimport React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 300 + theme.spacing(3) * 2\n  },\n  margin: {\n    height: theme.spacing(3)\n  }\n}));\nconst PrettoSlider = withStyles({\n  root: {\n    color: '#52af77',\n    height: 8\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    marginTop: -8,\n    marginLeft: -12,\n    '&:focus, &:hover, &$active': {\n      boxShadow: 'inherit'\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 4px)'\n  },\n  track: {\n    height: 8,\n    borderRadius: 4\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4\n  }\n})(Slider);\n\nconst RangePreview = ({\n  question\n}) => {\n  const classes = useStyles();\n  const marks = [];\n  const labelsNumber = question.labels.length; // Here min, max, step are checked for undefined,\n  // as default question from QuestionnaireContext doesn't always initialize these fields\n\n  const min = typeof question.min === \"undefined\" ? 0 : parseInt(question.min, 10);\n  const max = typeof question.max === \"undefined\" ? 100 : parseInt(question.max, 10);\n  const step = typeof question.step === \"undefined\" ? 1 : parseInt(question.step, 10);\n  const labelStep = labelsNumber <= 1 ? 0 : ~~((max - min) / (labelsNumber - 1));\n  let pos = labelsNumber === 1 ? ~~((max - min) / 2) : min;\n\n  for (let i = 0; i < labelsNumber; i++) {\n    marks.push({\n      value: pos,\n      label: question.labels[i]\n    });\n    pos += labelStep;\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Pretto\"), React.createElement(PrettoSlider, {\n    valueLabelDisplay: \"auto\",\n    \"aria-label\": \"pretto slider\",\n    defaultValue: 0,\n    \"aria-labelledby\": \"discrete-slider\",\n    marks: marks,\n    min: min,\n    max: max,\n    step: step,\n    title: question.title,\n    section_end: question.section_end,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }));\n};\n\nexport default RangePreview;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/previews/RangePreview.js"],"names":["React","makeStyles","withStyles","Slider","Typography","useStyles","theme","root","width","spacing","margin","height","PrettoSlider","color","thumb","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","RangePreview","question","classes","marks","labelsNumber","labels","length","min","parseInt","max","step","labelStep","pos","i","push","value","label","title","section_end"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: 300 + theme.spacing(3) * 2,\n    },\n    margin: {\n        height: theme.spacing(3),\n    },\n}));\n\n\nconst PrettoSlider = withStyles({\n    root: {\n        color: '#52af77',\n        height: 8,\n    },\n    thumb: {\n        height: 24,\n        width: 24,\n        backgroundColor: '#fff',\n        border: '2px solid currentColor',\n        marginTop: -8,\n        marginLeft: -12,\n        '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50% + 4px)',\n    },\n    track: {\n        height: 8,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 8,\n        borderRadius: 4,\n    },\n})(Slider);\n\n\nconst  RangePreview = ({ question }) => {\n    const classes = useStyles();\n\n    const marks = [];\n    const labelsNumber = question.labels.length;\n    // Here min, max, step are checked for undefined,\n    // as default question from QuestionnaireContext doesn't always initialize these fields\n    const min =  typeof question.min === \"undefined\" ? 0 : parseInt(question.min, 10);\n    const max = typeof question.max === \"undefined\" ? 100 : parseInt(question.max, 10);\n    const step = typeof question.step === \"undefined\" ? 1 : parseInt(question.step, 10);\n    const labelStep = labelsNumber <= 1 ? 0 : ~~((max - min)/(labelsNumber - 1));\n    let pos = labelsNumber === 1 ? ~~((max - min)/2) : min;\n\n    for (let i = 0; i < labelsNumber; i++) {\n        marks.push({\n            value: pos,\n            label: question.labels[i],\n        });\n        pos += labelStep;\n    }\n\n    return (\n        <div className={classes.root}>\n            <Typography gutterBottom>Pretto</Typography>\n            <PrettoSlider valueLabelDisplay=\"auto\" aria-label=\"pretto slider\"\n                          defaultValue={0}\n                          aria-labelledby=\"discrete-slider\"\n                          marks = {marks}\n                          min={min}\n                          max={max}\n                          step = {step}\n                          title = {question.title}\n                          section_end = {question.section_end}\n            />\n        </div>\n    );\n};\n\nexport default RangePreview"]},"metadata":{},"sourceType":"module"}