{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/EditDialogTitle.js\";\nimport React, { useContext, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\n\nconst EditQuestionTitleField = ({\n  question,\n  onComplete\n}) => {\n  const [title, setTitle] = useState(question.title);\n  const {\n    dispatch\n  } = useContext(QuestionnaireContext);\n\n  function handleKeyDown(event) {\n    switch (event.code) {\n      case \"Enter\":\n        updateTitle();\n\n      case \"Escape\":\n        close();\n    }\n  }\n\n  document.addEventListener(\"keydown\", handleKeyDown);\n\n  function updateGlobal() {\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: question\n    });\n  }\n\n  function updateTitle() {\n    if (title === question.title) return;\n    question.title = title;\n    updateGlobal();\n  }\n\n  const handleChange = e => setTitle(e.target.value);\n\n  const close = () => {\n    // To free up memory, as after the field is closed, keystrokes should not be handled with handleKeyDown anymore.\n    document.removeEventListener(\"keydown\", handleKeyDown);\n    onComplete();\n  };\n\n  return React.createElement(TextField, {\n    autoFocus: true,\n    id: \"standard-full-width\",\n    fullWidth: true,\n    defaultValue: question.title,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, question.title);\n};\n\nexport default EditQuestionTitleField;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/EditDialogTitle.js"],"names":["React","useContext","useState","TextField","QuestionnaireContext","EditQuestionTitleField","question","onComplete","title","setTitle","dispatch","handleKeyDown","event","code","updateTitle","close","document","addEventListener","updateGlobal","type","id","new","handleChange","e","target","value","removeEventListener"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAAQC,oBAAR,QAAmC,kCAAnC;;AAEA,MAAMC,sBAAsB,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA2B;AACxD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACI,QAAQ,CAACE,KAAV,CAAlC;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAeT,UAAU,CAACG,oBAAD,CAA/B;;AAEA,WAASO,aAAT,CAAuBC,KAAvB,EAA6B;AAC3B,YAAQA,KAAK,CAACC,IAAd;AACE,WAAK,OAAL;AACEC,QAAAA,WAAW;;AACb,WAAK,QAAL;AACEC,QAAAA,KAAK;AAJT;AAMD;;AACDC,EAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCN,aAArC;;AAEA,WAASO,YAAT,GAAuB;AACrBR,IAAAA,QAAQ,CAAC;AAAES,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,EAAE,EAAEd,QAAQ,CAACc,EAAxC;AAA4CC,MAAAA,GAAG,EAAEf;AAAjD,KAAD,CAAR;AACD;;AACD,WAASQ,WAAT,GAAsB;AACpB,QAAGN,KAAK,KAAKF,QAAQ,CAACE,KAAtB,EAA6B;AAC7BF,IAAAA,QAAQ,CAACE,KAAT,GAAiBA,KAAjB;AACAU,IAAAA,YAAY;AACb;;AAED,QAAMI,YAAY,GAAIC,CAAD,IAAOd,QAAQ,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAApC;;AAEA,QAAMV,KAAK,GAAG,MAAM;AAClB;AACAC,IAAAA,QAAQ,CAACU,mBAAT,CAA6B,SAA7B,EAAwCf,aAAxC;AACAJ,IAAAA,UAAU;AACX,GAJD;;AAMA,SAAO,oBAAC,SAAD;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,EAAE,EAAC,qBAAxB;AAA8C,IAAA,SAAS,MAAvD;AACW,IAAA,YAAY,EAAED,QAAQ,CAACE,KADlC;AACyC,IAAA,QAAQ,EAAEc,YADnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEJhB,QAAQ,CAACE,KAFL,CAAP;AAID,CAnCD;;AAoCA,eAAeH,sBAAf","sourcesContent":["import React, {useContext, useState} from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {QuestionnaireContext} from \"../contexts/QuestionnaireContext\";\n\nconst EditQuestionTitleField = ({question, onComplete}) =>{\n  const [title, setTitle] = useState(question.title);\n  const { dispatch } = useContext(QuestionnaireContext);\n\n  function handleKeyDown(event){\n    switch (event.code) {\n      case \"Enter\":\n        updateTitle();\n      case \"Escape\":\n        close();\n    }\n  }\n  document.addEventListener(\"keydown\", handleKeyDown);\n\n  function updateGlobal(){\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: question });\n  }\n  function updateTitle(){\n    if(title === question.title) return;\n    question.title = title;\n    updateGlobal();\n  }\n\n  const handleChange = (e) => setTitle(e.target.value)\n\n  const close = () => {\n    // To free up memory, as after the field is closed, keystrokes should not be handled with handleKeyDown anymore.\n    document.removeEventListener(\"keydown\", handleKeyDown);\n    onComplete();\n  };\n\n  return <TextField autoFocus id=\"standard-full-width\" fullWidth\n                    defaultValue={question.title} onChange={handleChange}>\n    {question.title}\n  </TextField>\n}\nexport default EditQuestionTitleField;"]},"metadata":{},"sourceType":"module"}