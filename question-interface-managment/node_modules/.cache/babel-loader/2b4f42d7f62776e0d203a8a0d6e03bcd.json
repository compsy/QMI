{"ast":null,"code":"import uuid from \"uuid/v1\";\nimport { QUESTION_TYPES } from \"../components/QuestionTypes\";\n\nconst reorder = (list, startIndex, endIndex) => {\n  let newList = list.slice(0, list.length);\n  const [removed] = newList.splice(startIndex, 1);\n  newList.splice(endIndex, 0, removed);\n  return newList;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  let newDestination = destination.slice(0, destination.length);\n  const item = source[droppableSource.index];\n  var options = [\"option 1\", \"option 2\", \"option 31\", \"option 24\"];\n\n  if (item.label === \"range\") {\n    newDestination.splice(droppableDestination.index, 0, {\n      id: uuid(),\n      type: item.label,\n      title: `untitled ${item.label}`,\n      labels: options\n    });\n  } else if (item.label === \"likert\" || item.label === \"dropdown\" || item.label === \"checkbox\" || item.label === \"radio\") {\n    newDestination.splice(droppableDestination.index, 0, {\n      id: uuid(),\n      type: item.label,\n      title: `untitled ${item.label}`,\n      options: options\n    });\n  } else {\n    newDestination.splice(droppableDestination.index, 0, {\n      id: uuid(),\n      type: item.label,\n      title: `untitled ${item.label}`\n    });\n  }\n\n  return newDestination;\n};\n\nexport const questionnaireReducer = (state, action) => {\n  switch (action.type) {\n    case \"REORDER\":\n      return reorder(state, action.source.index, action.destination.index);\n\n    case \"CLONE\":\n      return copy(QUESTION_TYPES, state, action.source, action.destination);\n\n    case \"SET_QUESTIONS\":\n      return action.questions;\n\n    case \"ADD_QUESTION\":\n      const uniq = uuid();\n\n      if (action.type === \"range\") {\n        return [...state, {\n          id: uniq,\n          type: action.questionType.toLowerCase(),\n          title: \"untitled \" + action.questionType,\n          labels: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n        }];\n      } else if (action.type === \"likert\" || action.type === \"dropdown\" || action.type === \"checkbox\" || action.type === \"radio\") {\n        return [...state, {\n          id: uniq,\n          type: action.questionType.toLowerCase(),\n          title: \"untitled \" + action.questionType,\n          options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n        }];\n      } else {\n        return [...state, {\n          id: uniq,\n          type: action.questionType.toLowerCase(),\n          title: \"untitled \" + action.questionType\n        }];\n      }\n\n    case \"REMOVE_QUESTION\":\n      return state.filter(question => question.id !== action.id);\n\n    case \"UPDATE_QUESTION\":\n      return state.map(question => question.id === action.id ? action.new : question);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/reducers/questionnaireReducer.js"],"names":["uuid","QUESTION_TYPES","reorder","list","startIndex","endIndex","newList","slice","length","removed","splice","copy","source","destination","droppableSource","droppableDestination","newDestination","item","index","options","label","id","type","title","labels","questionnaireReducer","state","action","questions","uniq","questionType","toLowerCase","filter","question","map","new"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAAQC,cAAR,QAA6B,6BAA7B;;AAGA,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,KAAgC;AAC5C,MAAIC,OAAO,GAAGH,IAAI,CAACI,KAAL,CAAW,CAAX,EAAcJ,IAAI,CAACK,MAAnB,CAAd;AACA,QAAM,CAACC,OAAD,IAAYH,OAAO,CAACI,MAAR,CAAeN,UAAf,EAA2B,CAA3B,CAAlB;AACAE,EAAAA,OAAO,CAACI,MAAR,CAAeL,QAAf,EAAyB,CAAzB,EAA4BI,OAA5B;AACA,SAAOH,OAAP;AACH,CALD;;AAOA,MAAMK,IAAI,GAAG,CAACC,MAAD,EAASC,WAAT,EAAsBC,eAAtB,EAAuCC,oBAAvC,KAAgE;AACzE,MAAIC,cAAc,GAAGH,WAAW,CAACN,KAAZ,CAAkB,CAAlB,EAAqBM,WAAW,CAACL,MAAjC,CAArB;AACA,QAAMS,IAAI,GAAGL,MAAM,CAACE,eAAe,CAACI,KAAjB,CAAnB;AAEA,MAAIC,OAAO,GAAG,CAAC,UAAD,EAAc,UAAd,EAAyB,WAAzB,EAAuC,WAAvC,CAAd;;AACA,MAAIF,IAAI,CAACG,KAAL,KAAe,OAAnB,EAA2B;AACvBJ,IAAAA,cAAc,CAACN,MAAf,CAAsBK,oBAAoB,CAACG,KAA3C,EAAkD,CAAlD,EAAqD;AACjDG,MAAAA,EAAE,EAAErB,IAAI,EADyC;AAEjDsB,MAAAA,IAAI,EAAEL,IAAI,CAACG,KAFsC;AAGjDG,MAAAA,KAAK,EAAG,YAAWN,IAAI,CAACG,KAAM,EAHmB;AAIjDI,MAAAA,MAAM,EAAEL;AAJyC,KAArD;AAMH,GAPD,MAOO,IAAIF,IAAI,CAACG,KAAL,KAAe,QAAf,IAA2BH,IAAI,CAACG,KAAL,KAAe,UAA1C,IAAwDH,IAAI,CAACG,KAAL,KAAe,UAAvE,IAAqFH,IAAI,CAACG,KAAL,KAAe,OAAxG,EAAgH;AACnHJ,IAAAA,cAAc,CAACN,MAAf,CAAsBK,oBAAoB,CAACG,KAA3C,EAAkD,CAAlD,EAAqD;AACjDG,MAAAA,EAAE,EAAErB,IAAI,EADyC;AAEjDsB,MAAAA,IAAI,EAAEL,IAAI,CAACG,KAFsC;AAGjDG,MAAAA,KAAK,EAAG,YAAWN,IAAI,CAACG,KAAM,EAHmB;AAIjDD,MAAAA,OAAO,EAAEA;AAJwC,KAArD;AAMH,GAPM,MAQH;AACAH,IAAAA,cAAc,CAACN,MAAf,CAAsBK,oBAAoB,CAACG,KAA3C,EAAkD,CAAlD,EAAqD;AACjDG,MAAAA,EAAE,EAAErB,IAAI,EADyC;AAEjDsB,MAAAA,IAAI,EAAEL,IAAI,CAACG,KAFsC;AAGjDG,MAAAA,KAAK,EAAG,YAAWN,IAAI,CAACG,KAAM;AAHmB,KAArD;AAKH;;AAGD,SAAOJ,cAAP;AACH,CA9BD;;AAiCA,OAAO,MAAMS,oBAAoB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnD,UAAQA,MAAM,CAACL,IAAf;AACI,SAAK,SAAL;AACI,aAAOpB,OAAO,CAACwB,KAAD,EAAQC,MAAM,CAACf,MAAP,CAAcM,KAAtB,EAA6BS,MAAM,CAACd,WAAP,CAAmBK,KAAhD,CAAd;;AACJ,SAAK,OAAL;AACI,aAAOP,IAAI,CAACV,cAAD,EAAiByB,KAAjB,EAAwBC,MAAM,CAACf,MAA/B,EAAuCe,MAAM,CAACd,WAA9C,CAAX;;AACJ,SAAK,eAAL;AACI,aAAOc,MAAM,CAACC,SAAd;;AACJ,SAAK,cAAL;AACI,YAAMC,IAAI,GAAG7B,IAAI,EAAjB;;AACA,UAAI2B,MAAM,CAACL,IAAP,KAAgB,OAApB,EAA4B;AACxB,eAAO,CACH,GAAGI,KADA,EACO;AACNL,UAAAA,EAAE,EAAEQ,IADE;AAENP,UAAAA,IAAI,EAAEK,MAAM,CAACG,YAAP,CAAoBC,WAApB,EAFA;AAGNR,UAAAA,KAAK,EAAE,cAAcI,MAAM,CAACG,YAHtB;AAINN,UAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC;AAJF,SADP,CAAP;AAOH,OARD,MAQO,IAAIG,MAAM,CAACL,IAAP,KAAgB,QAAhB,IAA4BK,MAAM,CAACL,IAAP,KAAgB,UAA5C,IAA0DK,MAAM,CAACL,IAAP,KAAgB,UAA1E,IAAwFK,MAAM,CAACL,IAAP,KAAgB,OAA5G,EAAoH;AACvH,eAAO,CACH,GAAGI,KADA,EACO;AACNL,UAAAA,EAAE,EAAEQ,IADE;AAENP,UAAAA,IAAI,EAAEK,MAAM,CAACG,YAAP,CAAoBC,WAApB,EAFA;AAGNR,UAAAA,KAAK,EAAE,cAAcI,MAAM,CAACG,YAHtB;AAINX,UAAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC;AAJH,SADP,CAAP;AAOH,OARM,MASF;AACD,eAAO,CACH,GAAGO,KADA,EACO;AACNL,UAAAA,EAAE,EAAEQ,IADE;AAENP,UAAAA,IAAI,EAAEK,MAAM,CAACG,YAAP,CAAoBC,WAApB,EAFA;AAGNR,UAAAA,KAAK,EAAE,cAAcI,MAAM,CAACG;AAHtB,SADP,CAAP;AAMH;;AACL,SAAK,iBAAL;AACI,aAAOJ,KAAK,CAACM,MAAN,CAAaC,QAAQ,IAAIA,QAAQ,CAACZ,EAAT,KAAgBM,MAAM,CAACN,EAAhD,CAAP;;AACJ,SAAK,iBAAL;AACI,aAAOK,KAAK,CAACQ,GAAN,CAAUD,QAAQ,IACrBA,QAAQ,CAACZ,EAAT,KAAgBM,MAAM,CAACN,EAAvB,GAA4BM,MAAM,CAACQ,GAAnC,GAAyCF,QADtC,CAAP;;AAGJ;AACI,aAAOP,KAAP;AAzCR;AA2CH,CA5CM","sourcesContent":["import uuid from \"uuid/v1\";\nimport {QUESTION_TYPES} from \"../components/QuestionTypes\";\n\n\nconst reorder = (list, startIndex, endIndex) => {\n    let newList = list.slice(0, list.length);\n    const [removed] = newList.splice(startIndex, 1);\n    newList.splice(endIndex, 0, removed);\n    return newList;\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n    let newDestination = destination.slice(0, destination.length);\n    const item = source[droppableSource.index];\n\n    var options = [\"option 1\" , \"option 2\",\"option 31\" , \"option 24\"];\n    if (item.label === \"range\"){\n        newDestination.splice(droppableDestination.index, 0, {\n            id: uuid(),\n            type: item.label,\n            title: `untitled ${item.label}`,\n            labels: options\n        });\n    } else if (item.label === \"likert\" || item.label === \"dropdown\" || item.label === \"checkbox\" || item.label === \"radio\"){\n        newDestination.splice(droppableDestination.index, 0, {\n            id: uuid(),\n            type: item.label,\n            title: `untitled ${item.label}`,\n            options: options\n        });\n    }\n    else{\n        newDestination.splice(droppableDestination.index, 0, {\n            id: uuid(),\n            type: item.label,\n            title: `untitled ${item.label}`,\n        });\n    }\n\n\n    return newDestination;\n};\n\n\nexport const questionnaireReducer = (state, action) => {\n    switch (action.type) {\n        case \"REORDER\":\n            return reorder(state, action.source.index, action.destination.index);\n        case \"CLONE\":\n            return copy(QUESTION_TYPES, state, action.source, action.destination);\n        case \"SET_QUESTIONS\":\n            return action.questions;\n        case \"ADD_QUESTION\":\n            const uniq = uuid();\n            if (action.type === \"range\"){\n                return [\n                    ...state, {\n                        id: uniq,\n                        type: action.questionType.toLowerCase(),\n                        title: \"untitled \" + action.questionType,\n                        labels: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n                    }]\n            } else if (action.type === \"likert\" || action.type === \"dropdown\" || action.type === \"checkbox\" || action.type === \"radio\"){\n                return [\n                    ...state, {\n                        id: uniq,\n                        type: action.questionType.toLowerCase(),\n                        title: \"untitled \" + action.questionType,\n                        options: [\"option 1\", \"option 2\", \"option 3\", \"option 4\"]\n                    }]\n            }\n            else {\n                return [\n                    ...state, {\n                        id: uniq,\n                        type: action.questionType.toLowerCase(),\n                        title: \"untitled \" + action.questionType,\n                    }];\n            }\n        case \"REMOVE_QUESTION\":\n            return state.filter(question => question.id !== action.id);\n        case \"UPDATE_QUESTION\":\n            return state.map(question =>\n                question.id === action.id ? action.new : question\n            );\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}