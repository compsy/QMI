{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js\";\nimport React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport { makeStyles, Box, Container, Drawer, List, ListItem, ListItemIcon, ListItemText, Typography, Grid, Paper, AppBar, Toolbar, CssBaseline } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { QUESTION_TYPES } from \"./QuestionTypes\";\nimport \"./index.css\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nconst drawerWidth = 240;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar\n}));\n\nconst QuestionsPage = () => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions,\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const onDragEnd = React.useCallback(result => {\n    const {\n      source,\n      destination\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    switch (source.droppableId) {\n      case \"BAG\":\n        dispatch({\n          type: \"REORDER\",\n          source: source,\n          destination: destination\n        });\n        break;\n\n      case \"SHOP\":\n        dispatch({\n          type: \"CLONE\",\n          source: source,\n          destination: destination\n        });\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(CssBaseline, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    color: \"default\",\n    position: \"fixed\",\n    className: classes.appBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    noWrap: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Clipped drawer\"))), React.createElement(Sidebar, {\n    items: QUESTION_TYPES,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), React.createElement(\"main\", {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    paragraph: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    style: {\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(TopSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    style: {\n      background: settings.showGridAreas ? \"lightgreen\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(BottomSection, {\n    items: questions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))))))));\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"2em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(ToggleGridAreasButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), React.createElement(StringifiedJSONCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }));\n};\n\nconst BottomSection = ({\n  items\n}) => {\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"1em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Questions\"), React.createElement(Droppable, {\n    droppableId: \"BAG\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Box, {\n    ref: provided.innerRef,\n    className: \"shopping-bag\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, questions.map((question, index) => React.createElement(Draggable, {\n    key: question.id,\n    draggableId: question.id,\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: provided.draggableProps.style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), React.createElement(Question, {\n    key: uuidv1(),\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  })))), provided.placeholder)));\n}; // This method is needed for rendering clones of draggables\n\n\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return React.createElement(Paper, Object.assign({\n    className: snapshot.isDragging ? \"dragging1\" : \"not-dragging1\"\n  }, provided.draggableProps, provided.dragHandleProps, {\n    ref: provided.innerRef,\n    style: provided.draggableProps.style // style={{ padding: \"1em\", color: \"white\" }}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(ListItemIcon, {\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, item.icon), React.createElement(ListItemText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"body1\",\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, item.label))));\n};\n\nconst Sidebar = ({\n  items\n}) => {\n  const classes = useStyles();\n  return React.createElement(Droppable, {\n    renderClone: getRenderItem(items, \"\"),\n    droppableId: \"SHOP\",\n    isDropDisabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Drawer, {\n    className: classes.drawer,\n    classes: {\n      paper: classes.drawerPaper\n    },\n    ref: provided.innerRef,\n    style: {\n      width: 1000\n    },\n    variant: \"permanent\",\n    anchor: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, items.map((item, index) => {\n    const shouldRenderClone = item.id === snapshot.draggingFromThisWith;\n    return React.createElement(React.Fragment, {\n      style: {\n        textAlign: \"left\"\n      },\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, shouldRenderClone ? React.createElement(ListItem, {\n      button: true,\n      key: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, item.icon), React.createElement(ListItemText, {\n      primary: item.label,\n      style: {\n        textAlign: \"left\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    })) : React.createElement(Draggable, {\n      draggableId: item.id,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(ListItem, Object.assign({\n      key: item.label,\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      button: true,\n      className: snapshot.isDragging ? \"dragging\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, item.icon), React.createElement(ListItemText, {\n      primary: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }))));\n  }), provided.placeholder)));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js"],"names":["React","useContext","v1","uuidv1","makeStyles","Box","Container","Drawer","List","ListItem","ListItemIcon","ListItemText","Typography","Grid","Paper","AppBar","Toolbar","CssBaseline","QuestionnaireContext","Question","ToggleGridAreasButton","AddQuestionButton2","StringifiedJSONCard","DragDropContext","Draggable","Droppable","QUESTION_TYPES","SettingsContext","drawerWidth","useStyles","theme","root","display","appBar","zIndex","drawer","width","flexShrink","drawerPaper","content","flexGrow","padding","spacing","toolbar","mixins","QuestionsPage","settings","questions","dispatch","onDragEnd","useCallback","result","source","destination","droppableId","type","classes","background","showGridAreas","TopSection","textAlign","margin","BottomSection","items","provided","snapshot","innerRef","map","question","index","id","draggableProps","dragHandleProps","style","placeholder","getRenderItem","className","rubric","item","isDragging","color","icon","label","Sidebar","paper","shouldRenderClone","draggingFromThisWith"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport {\n  makeStyles,\n  Box,\n  Container,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n  Grid,\n  Paper,\n  AppBar,\n  Toolbar,\n  CssBaseline\n} from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { QUESTION_TYPES } from \"./QuestionTypes\";\n\nimport \"./index.css\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar\n}));\n\nconst QuestionsPage = () => {\n  const { settings } = useContext(SettingsContext);\n  const { questions, dispatch } = useContext(QuestionnaireContext);\n  const onDragEnd = React.useCallback(result => {\n    const { source, destination } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    switch (source.droppableId) {\n      case \"BAG\":\n        dispatch({ type: \"REORDER\", source: source, destination: destination });\n        break;\n      case \"SHOP\":\n        dispatch({ type: \"CLONE\", source: source, destination: destination });\n        break;\n      default:\n        break;\n    }\n  }, []);\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <AppBar color=\"default\" position=\"fixed\" className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h6\" noWrap>\n              Clipped drawer\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Sidebar items={QUESTION_TYPES} />\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          <Typography paragraph>\n            <Grid\n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"stretch\"\n              style={{\n                background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n              }}\n            >\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid\n                  item\n                  xs={6}\n                  style={{\n                    background: settings.showGridAreas\n                      ? \"lightblue\"\n                      : \"transparent\"\n                  }}\n                >\n                  <TopSection />\n                </Grid>\n                <Grid\n                  item\n                  xs={6}\n                  style={{\n                    background: settings.showGridAreas\n                      ? \"lightgreen\"\n                      : \"transparent\"\n                  }}\n                >\n                  <BottomSection items={questions} />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Typography>\n        </main>\n      </DragDropContext>\n    </div>\n  );\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"2em auto\" }}>\n      {/* <AddQuestionButton /> */}\n      <ToggleGridAreasButton />\n      <StringifiedJSONCard />\n    </Container>\n  );\n};\n\nconst BottomSection = ({ items }) => {\n  const { questions } = useContext(QuestionnaireContext);\n\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"1em auto\" }}>\n      <Typography variant=\"h4\" style={{ margin: \"1em 0\" }}>\n        Questions\n      </Typography>\n      <Droppable droppableId=\"BAG\">\n        {(provided, snapshot) => (\n          <Box ref={provided.innerRef} className=\"shopping-bag\">\n            {questions.map((question, index) => (\n              <Draggable\n                key={question.id}\n                draggableId={question.id}\n                index={index}\n              >\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    style={provided.draggableProps.style}\n                  >\n                    <Question key={uuidv1()} question={question} />\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </Box>\n        )}\n      </Droppable>\n      {/* <AddQuestionButton2 /> */}\n    </Container>\n  );\n};\n\n// This method is needed for rendering clones of draggables\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return (\n    <Paper\n      className={snapshot.isDragging ? \"dragging1\" : \"not-dragging1\"}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n      ref={provided.innerRef}\n      style={provided.draggableProps.style}\n      // style={{ padding: \"1em\", color: \"white\" }}\n    >\n      <ListItem>\n        <ListItemIcon style={{ color: \"white\" }}>{item.icon}</ListItemIcon>\n        <ListItemText>\n          <Typography variant=\"body1\" style={{ color: \"white\" }}>\n            {item.label}\n          </Typography>\n        </ListItemText>\n      </ListItem>\n    </Paper>\n  );\n};\n\nconst Sidebar = ({ items }) => {\n  const classes = useStyles();\n\n  return (\n    <Droppable\n      renderClone={getRenderItem(items, \"\")}\n      droppableId=\"SHOP\"\n      isDropDisabled={true}\n    >\n      {(provided, snapshot) => (\n        <Drawer\n          className={classes.drawer}\n          classes={{\n            paper: classes.drawerPaper\n          }}\n          ref={provided.innerRef}\n          style={{ width: 1000 }}\n          variant=\"permanent\"\n          anchor=\"right\"\n        >\n          <div className={classes.toolbar} />\n          <List>\n            {items.map((item, index) => {\n              const shouldRenderClone =\n                item.id === snapshot.draggingFromThisWith;\n              return (\n                <React.Fragment style={{ textAlign: \"left\" }} key={item.id}>\n                  {shouldRenderClone ? (\n                    <ListItem button key={item.label}>\n                      <ListItemIcon>{item.icon}</ListItemIcon>\n                      <ListItemText\n                        primary={item.label}\n                        style={{ textAlign: \"left\" }}\n                      />\n                    </ListItem>\n                  ) : (\n                    <Draggable draggableId={item.id} index={index}>\n                      {(provided, snapshot) => (\n                        <ListItem\n                          key={item.label}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          button\n                          className={snapshot.isDragging ? \"dragging\" : \"\"}\n                        >\n                          <ListItemIcon>{item.icon}</ListItemIcon>\n                          <ListItemText primary={item.label} />\n                        </ListItem>\n                      )}\n                    </Draggable>\n                  )}\n                </React.Fragment>\n              );\n            })}\n            {provided.placeholder}\n          </List>\n        </Drawer>\n      )}\n    </Droppable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}