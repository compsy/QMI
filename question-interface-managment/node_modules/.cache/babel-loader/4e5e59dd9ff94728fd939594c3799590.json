{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js\";\nimport React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport { Container, Typography, Drawer, List, ListItem, ListItemText } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport AddQuestionButton from \"./buttons/AddQuestionButton\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuid } from \"uuid\";\n\nconst QuestionsPage = () => {\n  return React.createElement(DragDropContext, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    items: QUESTION_TYPES,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(Container, {\n    maxWidth: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(TopSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(BottomSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })));\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"2em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(ToggleGridAreasButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(StringifiedJSONCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n};\n\nconst BottomSection = () => {\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  return React.createElement(Container, {\n    style: {\n      textAlign: \"center\",\n      margin: \"1em auto\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    style: {\n      margin: \"1em 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Questions\"), questions.map(question => React.createElement(Question, {\n    key: uuidv1(),\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), React.createElement(AddQuestionButton2, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }));\n}; // This method is needed for rendering clones of draggables\n\n\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"li\", Object.assign({}, provided.draggableProps, provided.dragHandleProps, {\n    ref: provided.innerRef,\n    style: provided.draggableProps.style,\n    className: snapshot.isDragging ? \"dragging\" : \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), item.label));\n};\n\nconst QUESTION_TYPES = [{\n  id: uuid(),\n  label: \"checkbox\"\n}, {\n  id: uuid(),\n  label: \"radio\"\n}, {\n  id: uuid(),\n  label: \"likert\"\n}, {\n  id: uuid(),\n  label: \"range\"\n}, {\n  id: uuid(),\n  label: \"raw\"\n}, {\n  id: uuid(),\n  label: \"textarea\"\n}, {\n  id: uuid(),\n  label: \"textfield\"\n}, {\n  id: uuid(),\n  label: \"number\"\n}, {\n  id: uuid(),\n  label: \"expandable\"\n}, {\n  id: uuid(),\n  label: \"time\"\n}, {\n  id: uuid(),\n  label: \"date\"\n}, {\n  id: uuid(),\n  label: \"unsubscribed\"\n}, {\n  id: uuid(),\n  label: \"dropdown\"\n}, {\n  id: uuid(),\n  label: \"drawing\"\n}];\n\nconst Toolbar = ({\n  items\n}) => {\n  return React.createElement(Droppable, {\n    renderClone: getRenderItem(items, \"\"),\n    droppableId: \"SHOP\",\n    isDropDisabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, (provided, snapshot) => React.createElement(Drawer, {\n    ref: provided.innerRef,\n    variant: \"permanent\",\n    anchor: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, items.map((item, index) => {\n    const shouldRenderClone = item.id === snapshot.draggingFromThisWith;\n    return React.createElement(React.Fragment, {\n      key: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, shouldRenderClone ? React.createElement(ListItem, {\n      button: true,\n      key: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })) : React.createElement(Draggable, {\n      draggableId: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      button: true,\n      key: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: item.label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }))));\n  }))));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/QuestionsPage.js"],"names":["React","useContext","v1","uuidv1","Container","Typography","Drawer","List","ListItem","ListItemText","QuestionnaireContext","Question","AddQuestionButton","ToggleGridAreasButton","AddQuestionButton2","StringifiedJSONCard","DragDropContext","Draggable","Droppable","v4","uuid","QuestionsPage","QUESTION_TYPES","TopSection","textAlign","margin","BottomSection","questions","map","question","getRenderItem","items","className","provided","snapshot","rubric","item","source","index","draggableProps","dragHandleProps","innerRef","style","isDragging","label","id","Toolbar","shouldRenderClone","draggingFromThisWith"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { v1 as uuidv1 } from \"uuid\";\nimport {\n  Container,\n  Typography,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText\n} from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport Question from \"./Question\";\nimport AddQuestionButton from \"./buttons/AddQuestionButton\";\nimport ToggleGridAreasButton from \"./buttons/ToggleGridAreasButton\";\nimport AddQuestionButton2 from \"./buttons/AddQuestionButton2\";\nimport StringifiedJSONCard from \"./StringifiedJSONCard\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuid } from \"uuid\";\n\nconst QuestionsPage = () => {\n  return (\n    <DragDropContext>\n      <Toolbar items={QUESTION_TYPES} />\n      <Container maxWidth=\"sm\">\n        <TopSection />\n        <BottomSection />\n      </Container>\n    </DragDropContext>\n  );\n};\n\nexport default QuestionsPage;\n\nconst TopSection = () => {\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"2em auto\" }}>\n      {/* <AddQuestionButton /> */}\n      <ToggleGridAreasButton />\n      <StringifiedJSONCard />\n    </Container>\n  );\n};\n\nconst BottomSection = () => {\n  const { questions } = useContext(QuestionnaireContext);\n\n  return (\n    <Container style={{ textAlign: \"center\", margin: \"1em auto\" }}>\n      <Typography variant=\"h4\" style={{ margin: \"1em 0\" }}>\n        Questions\n      </Typography>\n      {questions.map(question => (\n        <Question key={uuidv1()} question={question} />\n      ))}\n      <AddQuestionButton2 />\n    </Container>\n  );\n};\n\n// This method is needed for rendering clones of draggables\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return (\n    <React.Fragment>\n      <li\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        style={provided.draggableProps.style}\n        className={snapshot.isDragging ? \"dragging\" : \"\"}\n      >\n        {item.label}\n      </li>\n    </React.Fragment>\n  );\n};\n\nconst QUESTION_TYPES = [\n  { id: uuid(), label: \"checkbox\" },\n  { id: uuid(), label: \"radio\" },\n  { id: uuid(), label: \"likert\" },\n  { id: uuid(), label: \"range\" },\n  { id: uuid(), label: \"raw\" },\n  { id: uuid(), label: \"textarea\" },\n  { id: uuid(), label: \"textfield\" },\n  { id: uuid(), label: \"number\" },\n  { id: uuid(), label: \"expandable\" },\n  { id: uuid(), label: \"time\" },\n  { id: uuid(), label: \"date\" },\n  { id: uuid(), label: \"unsubscribed\" },\n  { id: uuid(), label: \"dropdown\" },\n  { id: uuid(), label: \"drawing\" }\n];\n\nconst Toolbar = ({ items }) => {\n  return (\n    <Droppable\n      renderClone={getRenderItem(items, \"\")}\n      droppableId=\"SHOP\"\n      isDropDisabled={true}\n    >\n      {(provided, snapshot) => (\n        <Drawer ref={provided.innerRef} variant=\"permanent\" anchor=\"left\">\n          <List>\n            {items.map((item, index) => {\n              const shouldRenderClone =\n                item.id === snapshot.draggingFromThisWith;\n              return (\n                <React.Fragment key={item.id}>\n                  {shouldRenderClone ? (\n                    <ListItem button key={item.label}>\n                      <ListItemText primary={item.label} />\n                    </ListItem>\n                  ) : (\n                    <Draggable draggableId={item.id}>\n                      <ListItem button key={item.label}>\n                        <ListItemText primary={item.label} />\n                      </ListItem>\n                    </Draggable>\n                  )}\n                </React.Fragment>\n              );\n            })}\n          </List>\n        </Drawer>\n      )}\n    </Droppable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}