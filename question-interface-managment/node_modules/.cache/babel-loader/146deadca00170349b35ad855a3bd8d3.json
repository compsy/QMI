{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/NewEdit.jsx\";\nimport React, { useState } from 'react';\nimport { List, arrayMove } from 'react-movable';\nimport { Container } from '@material-ui/core';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport ButtonAppBar from './ButtonAppBar';\nimport RadioTemplate from './templates/RadioTemplate';\nimport CheckboxTemplate from './templates/CheckboxTemplate';\n\nfunction NewEdit({\n  questions\n}) {\n  return React.createElement(React.Fragment, null, React.createElement(Container, {\n    maxWidth: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(ButtonAppBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(ReorderableQuestions, {\n    questions: questions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  })), React.createElement(Fab, {\n    style: {\n      position: 'fixed',\n      bottom: 50,\n      right: 50,\n      zIndex: 999\n    },\n    color: \"primary\",\n    \"aria-label\": \"add\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(AddIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })));\n} // send questions through props and use that as \n// initial state in useState(init_param) hook\n\n\nconst ReorderableQuestions = props => {\n  const [items, setItems] = useState(props.questions);\n  return React.createElement(Container, {\n    className: \"main\",\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(List, {\n    className: \"drop-container-item\",\n    values: items,\n    onChange: ({\n      oldIndex,\n      newIndex\n    }) => setItems(arrayMove(items, oldIndex, newIndex)),\n    renderList: ({\n      children,\n      props,\n      isDragged\n    }) => React.createElement(\"ul\", Object.assign({}, props, {\n      style: {\n        padding: 0,\n        cursor: isDragged ? \"grabbing\" : undefined\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), children),\n    renderItem: ({\n      value,\n      props,\n      isDragged,\n      isSelected\n    }) => React.createElement(\"li\", Object.assign({}, props, {\n      style: { ...props.style,\n        padding: \"0 0\",\n        // padding: \"1.5em\",\n        margin: \"1em 0em\",\n        // margin: \"0.5em 0em\",\n        listStyleType: \"none\",\n        cursor: isDragged ? \"grabbing\" : \"grab\",\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), (() => {\n      switch (value.type) {\n        case 'radio':\n          return React.createElement(RadioTemplate, {\n            question: value,\n            items: items,\n            setItems: setItems,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          });\n\n        case 'checkbox':\n          return React.createElement(CheckboxTemplate, {\n            question: value,\n            items: items,\n            setItems: setItems,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          });\n\n        default:\n          return null;\n      }\n    })()),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => console.log(JSON.stringify(items)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"click me (and check console)\"));\n};\n\nexport default NewEdit;","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/NewEdit.jsx"],"names":["React","useState","List","arrayMove","Container","Fab","AddIcon","ButtonAppBar","RadioTemplate","CheckboxTemplate","NewEdit","questions","position","bottom","right","zIndex","ReorderableQuestions","props","items","setItems","oldIndex","newIndex","children","isDragged","padding","cursor","undefined","value","isSelected","style","margin","listStyleType","textAlign","type","console","log","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { List, arrayMove } from 'react-movable';\nimport { Container } from '@material-ui/core';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport ButtonAppBar from './ButtonAppBar';\nimport RadioTemplate from './templates/RadioTemplate';\nimport CheckboxTemplate from './templates/CheckboxTemplate';\n\n\nfunction NewEdit({questions}) {\n\n  return (\n    <>\n      <Container maxWidth=\"false\">\n        <ButtonAppBar />\n        <ReorderableQuestions questions={questions}/>\n        \n      </Container>\n      <Fab style={{position: 'fixed', bottom: 50, right: 50, zIndex: 999}} color=\"primary\" aria-label=\"add\">\n        <AddIcon />\n      </Fab>\n    </>\n  );\n\n}\n\n// send questions through props and use that as \n// initial state in useState(init_param) hook\nconst ReorderableQuestions = (props) => {\n \n  const [items, setItems] = useState(props.questions);\n\n  return (\n    <Container className=\"main\" maxWidth=\"md\">\n      <List\n        className=\"drop-container-item\"\n        values={items}\n        onChange={({ oldIndex, newIndex }) =>\n          setItems(arrayMove(items, oldIndex, newIndex))\n        }\n        renderList={({ children, props, isDragged }) => (\n          <ul\n            {...props}\n            style={{ padding: 0, cursor: isDragged ? \"grabbing\" : undefined }}\n          >\n            {children}\n          </ul>\n        )}\n        renderItem={({ value, props, isDragged, isSelected }) => (\n          <li\n            {...props}\n            style={{\n              ...props.style,\n              padding: \"0 0\",\n              // padding: \"1.5em\",\n              margin: \"1em 0em\",\n              // margin: \"0.5em 0em\",\n              listStyleType: \"none\",\n              cursor: isDragged ? \"grabbing\" : \"grab\",\n              textAlign: \"center\",\n            }}\n          >\n            {(() => {\n              switch(value.type) {\n                case 'radio':\n                  return <RadioTemplate question={value} items={items} setItems={setItems}/>\n                case 'checkbox':\n                  return <CheckboxTemplate question={value} items={items} setItems={setItems}/>\n                default:\n                  return null;\n              }\n            })()}\n          </li>\n        )}\n      />\n      <button onClick={() => console.log(JSON.stringify(items))}>click me (and check console)</button>\n    </Container>\n    \n  );\n};\n\nexport default NewEdit;"]},"metadata":{},"sourceType":"module"}