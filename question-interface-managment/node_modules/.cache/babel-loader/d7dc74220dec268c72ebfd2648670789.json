{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Button, Dialog, FormControl, Grid, InputLabel, MenuItem, Select, Typography } from \"@material-ui/core\";\nimport { QuestionnaireContext } from \"../contexts/QuestionnaireContext\";\nimport { SettingsContext } from \"../contexts/SettingsContext\";\nimport { NewQuestionContext } from \"../contexts/NewQuestionContext\";\nimport { PROPERTIES_BY_QUESTION_TYPE, SPECIAL_CONVERSION_CASES } from \"./QuestionTypes\";\n\nconst EditDialog = ({\n  question,\n  open,\n  setOpen\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    dispatch\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext); // load question to editor state on dialog open\n\n  useEffect(() => {\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...question\n      }\n    });\n  }, [open, newQuestionDispatch, question]); // dispatch action to questionnaireReducer to update question\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({\n      type: \"UPDATE_QUESTION\",\n      id: question.id,\n      new: newQuestion\n    });\n    console.table(question);\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: {\n        title: \"\",\n        options: []\n      }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    fullWidth: true,\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      padding: \"1em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"stretch\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(DialogHeader, {\n    question: question,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(DialogBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(DialogFooter, {\n    handleClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }))));\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({\n  question\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    questions\n  } = useContext(QuestionnaireContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext);\n\n  const GridItem = props => React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      textAlign: props.textAlign,\n      background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, props.children);\n\n  const changeType = newType => {\n    // handling special conversions\n    if (newQuestion.type in SPECIAL_CONVERSION_CASES && newType in SPECIAL_CONVERSION_CASES[newQuestion.type]) {\n      // array containing special conversions\n      const specialConversions = SPECIAL_CONVERSION_CASES[newQuestion.type][newType];\n      console.table(specialConversions);\n      specialConversions.map(specialConversion => {\n        const property = specialConversion.property;\n        const conversionFunction = specialConversion.conversionFunction;\n        console.log(property);\n        console.log(conversionFunction);\n        newQuestion[property] = conversionFunction(newQuestion[property]);\n      });\n    }\n\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion,\n        type: newType\n      }\n    });\n  };\n\n  const TypeSelector = () => React.createElement(Select, {\n    autoWidth: true,\n    labelId: \"type-select-label\",\n    value: newQuestion.type,\n    onChange: e => changeType(e.target.value),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Radio\"), React.createElement(MenuItem, {\n    value: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Checkbox\"), React.createElement(MenuItem, {\n    value: \"range\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Range\"), React.createElement(MenuItem, {\n    value: \"likert\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Likert\"));\n\n  const QuestionTitle = () => React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Edit Question \", questions.indexOf(question) + 1);\n\n  return React.createElement(GridItem, {\n    textAlign: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"type-select-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Type\"), React.createElement(TypeSelector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    textAlign: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(QuestionTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }))));\n};\n\nconst DialogBody = () => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n  const {\n    newQuestion,\n    newQuestionDispatch\n  } = useContext(NewQuestionContext);\n\n  const renderProperties = () => {\n    const elements = [];\n    PROPERTIES_BY_QUESTION_TYPE[newQuestion.type.toUpperCase()].map(property => elements.push(React.createElement(property, {\n      newQuestion: newQuestion,\n      newQuestionDispatch: newQuestionDispatch\n    })));\n    return elements;\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    style: {\n      background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, renderProperties())));\n};\n\nconst DialogFooter = ({\n  handleClose\n}) => {\n  const {\n    settings\n  } = useContext(SettingsContext);\n\n  const GridItem = props => React.createElement(Grid, {\n    item: true,\n    xs: true,\n    style: {\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, props.children);\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    alignItems: \"flex-start\",\n    justify: \"flex-end\",\n    style: {\n      padding: \"2em\",\n      background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, \"cancel\")), React.createElement(GridItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, \"submit\")));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/BetaEditDialog.js"],"names":["React","useContext","useEffect","Button","Dialog","FormControl","Grid","InputLabel","MenuItem","Select","Typography","QuestionnaireContext","SettingsContext","NewQuestionContext","PROPERTIES_BY_QUESTION_TYPE","SPECIAL_CONVERSION_CASES","EditDialog","question","open","setOpen","settings","dispatch","newQuestion","newQuestionDispatch","type","handleSubmit","event","preventDefault","id","new","console","table","title","options","handleClose","padding","background","showGridAreas","DialogHeader","questions","GridItem","props","textAlign","opacity","children","changeType","newType","specialConversions","map","specialConversion","property","conversionFunction","log","TypeSelector","e","target","value","QuestionTitle","indexOf","DialogBody","renderProperties","elements","toUpperCase","push","createElement","DialogFooter"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect} from \"react\";\nimport {Button, Dialog, FormControl, Grid, InputLabel, MenuItem, Select, Typography} from \"@material-ui/core\";\nimport {QuestionnaireContext} from \"../contexts/QuestionnaireContext\";\nimport {SettingsContext} from \"../contexts/SettingsContext\";\nimport {NewQuestionContext} from \"../contexts/NewQuestionContext\";\nimport {PROPERTIES_BY_QUESTION_TYPE, SPECIAL_CONVERSION_CASES} from \"./QuestionTypes\";\n\nconst EditDialog = ({ question, open, setOpen }) => {\n  const { settings } = useContext(SettingsContext);\n  const { dispatch } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  // load question to editor state on dialog open\n  useEffect(() => {\n    newQuestionDispatch({ type: \"SET_QUESTION\", question: { ...question } });\n  }, [open, newQuestionDispatch, question]);\n\n  // dispatch action to questionnaireReducer to update question\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch({ type: \"UPDATE_QUESTION\", id: question.id, new: newQuestion });\n    console.table(question);\n    setOpen(false);\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { title: \"\", options: [] }\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"md\">\n      {/* <ToggleGridAreasButton /> */}\n      <form onSubmit={handleSubmit} style={{ padding: \"1em\" }}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n          style={{\n            padding: \"2em\",\n            background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n          }}\n        >\n          <DialogHeader question={question} />\n          <DialogBody/>\n          <DialogFooter handleClose={handleClose} />\n        </Grid>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditDialog;\n\nconst DialogHeader = ({ question }) => {\n  const { settings } = useContext(SettingsContext);\n  const { questions } = useContext(QuestionnaireContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  const GridItem = (props) => (\n    <Grid\n      item\n      xs={12}\n      style={{\n        textAlign: props.textAlign,\n        background: settings.showGridAreas ? \"lightblue\" : \"transparent\",\n        opacity: settings.showGridAreas ? 0.9 : 1.0\n      }}\n    >\n      {props.children}\n    </Grid>\n  );\n\n  const changeType = (newType) => {\n    // handling special conversions\n    if(newQuestion.type in SPECIAL_CONVERSION_CASES && newType in SPECIAL_CONVERSION_CASES[newQuestion.type]) {\n      // array containing special conversions\n      const specialConversions = SPECIAL_CONVERSION_CASES[newQuestion.type][newType];\n\n      console.table(specialConversions);\n\n      specialConversions.map((specialConversion) => {\n        const property = specialConversion.property;\n        const conversionFunction = specialConversion.conversionFunction;\n        console.log(property);\n        console.log(conversionFunction);\n        newQuestion[property] =\n          conversionFunction(newQuestion[property]);\n      });\n    }\n\n    newQuestionDispatch({\n      type: \"SET_QUESTION\",\n      question: { ...newQuestion, type: newType }\n    });\n  };\n\n  const TypeSelector = () => (\n    <Select\n    autoWidth\n    labelId=\"type-select-label\"\n    value={newQuestion.type}\n    onChange={e => changeType(e.target.value)}\n    style={{ textAlign: \"left\" }}\n  >\n      {/*TODO: not everything is compatible for convert, so only show what's allowed.*/}\n    <MenuItem value=\"radio\">Radio</MenuItem>\n    <MenuItem value=\"checkbox\">Checkbox</MenuItem>\n    <MenuItem value=\"range\">Range</MenuItem>\n    <MenuItem value=\"likert\">Likert</MenuItem>\n\n  </Select>\n  );\n\n  const QuestionTitle = () => (\n    <Typography variant=\"h5\">\n      Edit Question {questions.indexOf(question) + 1}\n    </Typography>\n  );\n\n  return (\n    <GridItem textAlign=\"right\">\n      <FormControl>\n        <InputLabel id=\"type-select-label\">Type</InputLabel>\n        <TypeSelector/>\n      </FormControl>\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <GridItem textAlign=\"left\">\n          <QuestionTitle/>\n        </GridItem>\n      </Grid>\n    </GridItem>\n  );\n};\n\nconst DialogBody = () => {\n  const { settings } = useContext(SettingsContext);\n  const { newQuestion, newQuestionDispatch } = useContext(NewQuestionContext);\n\n  const renderProperties = () => {\n    const elements = [];\n    PROPERTIES_BY_QUESTION_TYPE[newQuestion.type.toUpperCase()].map(property =>\n      elements.push(React.createElement(property,\n        {newQuestion: newQuestion, newQuestionDispatch: newQuestionDispatch})));\n    return elements;\n  };\n\n\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={4}>\n      <Grid\n        item\n        xs={12}\n        style={{\n          background: settings.showGridAreas ? \"lightcoral\" : \"transparent\",\n          opacity: settings.showGridAreas ? 0.9 : 1.0\n        }}\n      >\n      </Grid>\n      <Grid item xs={12}>\n        <Grid container direction=\"row\">\n          {renderProperties()}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DialogFooter = ({ handleClose }) => {\n  const { settings } = useContext(SettingsContext);\n\n  const GridItem = (props) => (\n    <Grid\n    item\n    xs\n    style={{\n      textAlign: \"center\",\n      background: settings.showGridAreas ? \"yellow\" : \"transparent\",\n      opacity: settings.showGridAreas ? 0.9 : 1.0\n    }}\n  >{props.children}</Grid>\n  );\n\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      alignItems=\"flex-start\"\n      justify=\"flex-end\"\n      style={{\n        padding: \"2em\",\n        background: settings.showGridAreas ? \"lightgrey\" : \"transparent\"\n      }}\n    >\n      <GridItem>\n        <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>cancel</Button>\n      </GridItem>\n      <GridItem>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\">submit</Button>\n      </GridItem>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}