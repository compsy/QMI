{"ast":null,"code":"var _jsxFileName = \"/Users/palp/now/QMI/question-interface-managment/src/components/properties/TextArrayTemplate.js\";\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectProperty, setTextArrayField, setProperty, removeOption } from \"../../features/questionProperties/questionSlice\";\nimport { TextField, InputAdornment, IconButton, Button, Box, Menu, MenuItem, makeStyles, FormControl, InputLabel, FilledInput, Paper, Slide } from \"@material-ui/core\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from '@material-ui/icons/Add';\nconst useStyles = makeStyles(theme => ({\n  boxy: {\n    borderRadius: 0\n  },\n  paper: {\n    height: \"250px\",\n    overflow: \"auto\",\n    wordWrap: \"break-word\",\n    wordBreak: \"break-word\"\n  },\n  button: {\n    height: \"50px\"\n  }\n}));\nexport const TextArrayProperty = ({\n  name,\n  propertyName\n}) => {\n  const property = useSelector(selectProperty(propertyName));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (property === undefined) {\n      dispatch(setProperty({\n        property: propertyName,\n        value: []\n      }));\n    }\n  }, [property]);\n\n  const handleAddOptionClick = () => {\n    dispatch(setProperty({\n      property: propertyName,\n      value: [...property, \"\"]\n    }));\n  };\n\n  const classes = useStyles();\n  return React.createElement(React.Fragment, null, React.createElement(Paper, {\n    elevation: 0,\n    variant: \"outlined\",\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, property && property.map((_, index) => React.createElement(EachOptioni, {\n    index: index,\n    name: name,\n    propertyName: propertyName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Box, {\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(AddOptionButton, {\n    onClick: handleAddOptionClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })));\n};\n\nfunction EachOptioni({\n  index,\n  name,\n  propertyName\n}) {\n  const option = useSelector(state => state.question[propertyName][index]);\n  const dispatch = useDispatch();\n\n  const handleChange = (index, event) => {\n    dispatch(setTextArrayField({\n      property: propertyName,\n      index: index,\n      value: event.target.value\n    }));\n  };\n\n  const handleRemoveOptionClick = index => dispatch(removeOption({\n    property: propertyName,\n    index: index\n  })); // MENU STUFF\n\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleMenuClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  }; // ----------\n\n\n  const getInputProps = index => ({\n    endAdornment: React.createElement(InputAdornment, {\n      position: \"end\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      size: \"small\",\n      onClick: handleMenuClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(MoreHorizIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(Menu, {\n      id: \"simple-menu\",\n      keepMounted: true,\n      anchorEl: anchorEl,\n      open: Boolean(anchorEl),\n      onClose: handleMenuClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      button: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      variant: \"filled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Option tooltip\"), React.createElement(FilledInput, {\n      required: true,\n      className: classes.boxy,\n      autoFocus: true,\n      autoComplete: \"off\",\n      type: \"text\",\n      id: `option-${index + 1}-tooltip`,\n      placeholder: \"Enter option tooltip text here..\",\n      value: option || \"\",\n      onChange: e => handleChange(index, e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))), React.createElement(MenuItem, {\n      onClick: handleMenuClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"My account\"), React.createElement(MenuItem, {\n      onClick: handleMenuClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Logout\")), React.createElement(IconButton, {\n      size: \"small\",\n      onClick: () => handleRemoveOptionClick(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(DeleteIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })))\n  });\n\n  const classes = useStyles();\n  return (// <TextField\n    //   autoFocus\n    //   label={`Option ${index}`}\n    //   variant=\"filled\"\n    //   required\n    //   key={index}\n    //   fullWidth\n    //   type=\"text\"\n    //   placeholder={name}\n    //   value={option || \"\"}\n    //   onChange={(e) => handleChange(index, e)}\n    //   InputProps={getInputProps(index)}\n    // />\n    React.createElement(Slide, {\n      in: true,\n      direction: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      variant: \"filled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, `Option ${index + 1}`), React.createElement(FilledInput, {\n      required: true,\n      className: classes.optionTextField,\n      autoFocus: true,\n      autoComplete: \"off\",\n      type: \"text\",\n      id: `option-${index + 1}`,\n      placeholder: \"Enter option title here..\",\n      value: option,\n      onChange: handleChange,\n      endAdornment: React.createElement(React.Fragment, null, React.createElement(MoreSettingsButton, {\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })))\n  );\n}\n\nconst AddOptionButton = props => {\n  const classes = useStyles();\n  return React.createElement(Button, Object.assign({\n    disableElevation: true,\n    variant: \"contained\",\n    fullWidth: true,\n    className: classes.button\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), React.createElement(AddIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/palp/now/QMI/question-interface-managment/src/components/properties/TextArrayTemplate.js"],"names":["React","useEffect","useSelector","useDispatch","selectProperty","setTextArrayField","setProperty","removeOption","TextField","InputAdornment","IconButton","Button","Box","Menu","MenuItem","makeStyles","FormControl","InputLabel","FilledInput","Paper","Slide","MoreHorizIcon","DeleteIcon","AddIcon","useStyles","theme","boxy","borderRadius","paper","height","overflow","wordWrap","wordBreak","button","TextArrayProperty","name","propertyName","property","dispatch","undefined","value","handleAddOptionClick","classes","map","_","index","textAlign","EachOptioni","option","state","question","handleChange","event","target","handleRemoveOptionClick","anchorEl","setAnchorEl","useState","handleMenuClick","currentTarget","handleMenuClose","getInputProps","endAdornment","Boolean","e","optionTextField","AddOptionButton","props"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectProperty,\n  setTextArrayField,\n  setProperty,\n  removeOption,\n} from \"../../features/questionProperties/questionSlice\";\nimport {\n  TextField,\n  InputAdornment,\n  IconButton,\n  Button,\n  Box,\n  Menu,\n  MenuItem,\n  makeStyles,\n  FormControl,\n  InputLabel,\n  FilledInput,\n  Paper,\n  Slide,\n} from \"@material-ui/core\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddIcon from '@material-ui/icons/Add';\n\nconst useStyles = makeStyles((theme) => ({\n  boxy: {\n    borderRadius: 0,\n  },\n  paper: {\n    height: \"250px\",\n    overflow: \"auto\",\n    wordWrap: \"break-word\",\n    wordBreak: \"break-word\",\n  },\n  button: {\n    height: \"50px\"\n  }\n}));\n\nexport const TextArrayProperty = ({ name, propertyName }) => {\n  const property = useSelector(selectProperty(propertyName));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (property === undefined) {\n      dispatch(setProperty({ property: propertyName, value: [] }));\n    }\n  }, [property]);\n\n  const handleAddOptionClick = () => {\n    dispatch(\n      setProperty({\n        property: propertyName,\n        value: [...property, \"\"],\n      })\n    );\n  };\n\n  const classes = useStyles();\n  return (\n    <>\n      <Paper elevation={0} variant=\"outlined\" className={classes.paper}>\n        {property &&\n          property.map((_, index) => (\n            <EachOptioni\n              index={index}\n              name={name}\n              propertyName={propertyName}\n            />\n          ))}\n      </Paper>\n      <br />\n      <Box style={{ textAlign: \"center\" }}>\n        <AddOptionButton onClick={handleAddOptionClick}/>\n      </Box>\n    </>\n  );\n};\n\nfunction EachOptioni({ index, name, propertyName }) {\n  const option = useSelector((state) => state.question[propertyName][index]);\n  const dispatch = useDispatch();\n\n  const handleChange = (index, event) => {\n    dispatch(\n      setTextArrayField({\n        property: propertyName,\n        index: index,\n        value: event.target.value,\n      })\n    );\n  };\n\n  const handleRemoveOptionClick = (index) =>\n    dispatch(removeOption({ property: propertyName, index: index }));\n\n  // MENU STUFF\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleMenuClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  // ----------\n\n  const getInputProps = (index) => ({\n    endAdornment: (\n      <InputAdornment position=\"end\">\n        <IconButton size=\"small\" onClick={handleMenuClick}>\n          <MoreHorizIcon />\n        </IconButton>\n        <Menu\n          id=\"simple-menu\"\n          keepMounted\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleMenuClose}\n        >\n          {/* switch case without break for options */}\n          <MenuItem button={false}>\n            <FormControl fullWidth>\n              <InputLabel variant=\"filled\">Option tooltip</InputLabel>\n              <FilledInput\n                required\n                className={classes.boxy}\n                autoFocus\n                autoComplete=\"off\"\n                type=\"text\"\n                id={`option-${index + 1}-tooltip`}\n                placeholder=\"Enter option tooltip text here..\"\n                value={option || \"\"}\n                onChange={(e) => handleChange(index, e)}\n              />\n            </FormControl>\n          </MenuItem>\n          <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n          <MenuItem onClick={handleMenuClose}>Logout</MenuItem>\n        </Menu>\n        <IconButton size=\"small\" onClick={() => handleRemoveOptionClick(index)}>\n          <DeleteIcon />\n        </IconButton>\n      </InputAdornment>\n    ),\n  });\n\n  const classes = useStyles();\n  return (\n    // <TextField\n    //   autoFocus\n    //   label={`Option ${index}`}\n    //   variant=\"filled\"\n    //   required\n    //   key={index}\n    //   fullWidth\n    //   type=\"text\"\n    //   placeholder={name}\n    //   value={option || \"\"}\n    //   onChange={(e) => handleChange(index, e)}\n    //   InputProps={getInputProps(index)}\n    // />\n    <Slide in direction=\"right\">\n      <FormControl fullWidth>\n        <InputLabel variant=\"filled\">{`Option ${index + 1}`}</InputLabel>\n        <FilledInput\n          required\n          className={classes.optionTextField}\n          autoFocus\n          autoComplete=\"off\"\n          type=\"text\"\n          id={`option-${index + 1}`}\n          placeholder=\"Enter option title here..\"\n          value={option}\n          onChange={handleChange}\n          endAdornment={\n            <>\n              <MoreSettingsButton index={index} />\n              {/* <RemoveOptionButton index={index} /> */}\n            </>\n          }\n        />\n      </FormControl>\n    </Slide>\n  );\n}\n\nconst AddOptionButton = (props) => {\n  const classes = useStyles();\n  return (\n    <Button disableElevation variant=\"contained\" fullWidth className={classes.button} {...props}>\n      <AddIcon />\n    </Button>\n  );\n}"]},"metadata":{},"sourceType":"module"}